/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package security.gui;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import security.entities.Item;
import security.entities.UserRight;
import security.system.ConfigReader;
import soccer.gui.FrmAnalysis;
import soccer.gui.FrmAssociation;
import soccer.gui.FrmConfederation;
import soccer.gui.FrmCountry;
import soccer.gui.FrmFixtureType;
import soccer.gui.FrmFixture;
import soccer.gui.FrmImportFixture;
import soccer.gui.FrmTableData;
import soccer.gui.FrmImportData;
import soccer.gui.FrmImportTeam;
import soccer.gui.FrmPhase;
import soccer.gui.FrmReferee;
import soccer.gui.FrmResults;
import soccer.gui.FrmStadium;
import soccer.gui.FrmSimulation;
import soccer.gui.FrmTableMask;
import soccer.gui.FrmTeam;
import soccer.gui.FrmTournament;

/**
 *
 * @author Administrator
 */
public class FrameDesktop extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form FrameDesktop
     */
    public FrameDesktop() {
        initComponents();
        myInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainDesktop = new javax.swing.JDesktopPane();
        barMenu = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Soccer Soft");
        setName("SoccerSoft"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1350, 740));

        MainDesktop.setPreferredSize(new java.awt.Dimension(875, 915));

        javax.swing.GroupLayout MainDesktopLayout = new javax.swing.GroupLayout(MainDesktop);
        MainDesktop.setLayout(MainDesktopLayout);
        MainDesktopLayout.setHorizontalGroup(
            MainDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1180, Short.MAX_VALUE)
        );
        MainDesktopLayout.setVerticalGroup(
            MainDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 685, Short.MAX_VALUE)
        );

        setJMenuBar(barMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MainDesktop, javax.swing.GroupLayout.DEFAULT_SIZE, 1180, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MainDesktop, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane MainDesktop;
    private javax.swing.JMenuBar barMenu;
    // End of variables declaration//GEN-END:variables

    private FrmLogin frmLogin;
            
    private void myInitComponents(){
        String dbName = (new ConfigReader()).getApplicationDBName();
        this.setTitle("SoccerSoft - " + dbName);
        frmLogin = new FrmLogin(this);
        MainDesktop.add(frmLogin);
        signoutAction();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (null != e.getActionCommand()){
            switch (e.getActionCommand()) {
                case "Login":
                    loginAction();
                    break;
                case "Action_1010":
                    menuAction(getRight(1010), frmLogin.getUser());
                    break;
                case "Action_1020":
                    moduleAction(getRight(1020), frmLogin.getUser());
                    break;
                case "Action_1030":
                    roleAction(getRight(1030), frmLogin.getUser());
                    break;
                case "Action_1040":
                    userAction(getRight(1040), frmLogin.getUser());
                    break;
                case "Action_1050":
                    signoutAction();
                    break;
                case "Action_200010":
                    aboutAction();
                    break;

                case "Action_2010":
                    phaseAction(getRight(2010), frmLogin.getUser());
                    break;
                case "Action_2030":
                    confederationAction(getRight(2030), frmLogin.getUser());
                    break;
                case "Action_2040":
                    countryAction(getRight(2040), frmLogin.getUser());
                    break;
                case "Action_2050":
                    associationAction(getRight(2050), frmLogin.getUser());
                    break;
                case "Action_2060":
                    tournamentAction(getRight(2060), frmLogin.getUser());
                    break;
                case "Action_2070":
                    teamAction(getRight(2070), frmLogin.getUser());
                    break;
                case "Action_2080":
                    fixtureTypeAction(getRight(2080), frmLogin.getUser());
                    break;
                case "Action_2090":
                    stadiumAction(getRight(2090), frmLogin.getUser());
                    break;
                case "Action_2100":
                    refereeAction(getRight(2100), frmLogin.getUser());
                    break;

                case "Action_3010":
                    importTeamAction(getRight(3010), frmLogin.getUser());
                    break;
                case "Action_3020":
                    importFixtureAction(getRight(3020), frmLogin.getUser());
                    break;
                case "Action_3030":
                    importScheduleAction(getRight(3030), frmLogin.getUser());
                    break;
                    
                case "Action_4010":
                    fixtureAction(getRight(4010), frmLogin.getUser());
                    break;
                case "Action_4020":
                    resultsAction(getRight(4020), frmLogin.getUser());
                    break;
                case "Action_4030":
                    analysisAction(getRight(4030), frmLogin.getUser());
                    break;
                case "Action_4040":
                    simulationAction(getRight(4040), frmLogin.getUser());
                    break;
                case "Action_4050":
                    importRawDataAction(getRight(4050), frmLogin.getUser());
                    break;
                case "Action_4060":
                    importMaskDataAction(getRight(4060), frmLogin.getUser());
                    break;
                    
                default:
                    JOptionPane.showMessageDialog(this, "Action not identified", "Unkown", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        }
    }


    private void refereeAction(UserRight rights, Item user) {
        FrmReferee frm = new FrmReferee(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }
    
    private void stadiumAction(UserRight rights, Item user) {
        FrmStadium frm = new FrmStadium(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }

    private void tournamentAction(UserRight rights, Item user) {
        FrmTournament frm = new FrmTournament(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }
    
    private void teamAction(UserRight rights, Item user) {
        FrmTeam frm = new FrmTeam(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }

    private void associationAction(UserRight rights, Item user) {
        FrmAssociation frm = new FrmAssociation(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }

    private void fixtureTypeAction(UserRight rights, Item user) {
        FrmFixtureType frm = new FrmFixtureType(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }
    
    private void phaseAction(UserRight rights, Item user) {
        FrmPhase frm = new FrmPhase(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }

    private void importFixtureAction(UserRight rights, Item user) {
        FrmImportFixture frm = new FrmImportFixture(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }
    
    private void importTeamAction(UserRight rights, Item user) {
        FrmImportTeam frm = new FrmImportTeam(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }
    
    private void confederationAction(UserRight rights, Item user) {
        FrmConfederation frm = new FrmConfederation(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }
    
    private void countryAction(UserRight rights, Item user) {
        FrmCountry frm = new FrmCountry(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }
    
    private void fixtureAction(UserRight rights, Item user) {
        FrmFixture frm = new FrmFixture(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }

    private void analysisAction(UserRight rights, Item user) {
        FrmAnalysis frm = new FrmAnalysis(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }

    
    private void resultsAction(UserRight rights, Item user) {
        FrmResults frm = new FrmResults(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }

    private void simulationAction(UserRight rights, Item user) {
        FrmSimulation frm = new FrmSimulation(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }

    private void importRawDataAction(UserRight rights, Item user) {
        FrmTableData frm = new FrmTableData(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }
    
    private void importScheduleAction(UserRight rights, Item user) {
        FrmImportData frm = new FrmImportData(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }

    private void importMaskDataAction(UserRight rights, Item user) {
        FrmTableMask frm = new FrmTableMask(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }
    
    private void signoutAction(){
        JMenu menu = new JMenu();
        JMenuItem itemMenu= new JMenuItem();

        frmLogin.setUser(null);
        itemMenu.setText("Login");
        itemMenu.addActionListener(this);
        itemMenu.setActionCommand("Login");
        
        menu.setText("System");
        menu.add(itemMenu);
        
        barMenu.removeAll();
        barMenu.add(menu);
        setJMenuBar(barMenu);
        pack();
    }
    
    private void aboutAction() {
        FrmAbout frm = new FrmAbout();
        MainDesktop.add(frm);
        /**
         * Centers the about child windows
         */
        Dimension desktopSize = this.getSize();
        Dimension windowSize = frm.getSize();
        int width = (desktopSize.width - windowSize.width) / 2;
        int height = (desktopSize.height - windowSize.height) / 2;
        frm.setLocation(width, height);
        frm.setVisible(true);
    }

    private void userAction(UserRight rights, Item user) {
        FrmUser frm = new FrmUser(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }

    private void roleAction(UserRight rights, Item user) {
        FrmRole frm = new FrmRole(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }

    private void moduleAction(UserRight rights, Item user) {
        FrmModule frm = new FrmModule(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }

    private void menuAction(UserRight rights, Item user) {
        FrmMenu frm = new FrmMenu(rights, user);
        MainDesktop.add(frm);
        frm.setVisible(true);
    }

    private void loginAction() {
        /**
         * Centers the Login child windows
         */
        Dimension desktopSize = this.getSize();
        Dimension windowSize = frmLogin.getSize();
        int width = (desktopSize.width - windowSize.width) / 2;
        int height = (desktopSize.height - windowSize.height) / 2;
        frmLogin.setLocation(width, height);
        frmLogin.setVisible(true);
    }

    public void loadMenu(List<UserRight> rightsList){
        barMenu.removeAll();
        
        // add menus
        JMenu menu = null;
        UserRight previous = null;
        for (UserRight current: rightsList){
            JMenuItem mnuItem = new JMenuItem();
            mnuItem.setText(current.getModule().getName());
            mnuItem.addActionListener(this);
            mnuItem.setActionCommand("Action_" + String.valueOf(current.getItemOrder()));
                        
            if ( previous == null){
                menu =  new JMenu();
                menu.setText(current.getMenu().getName());
            }
            
            if ( previous != null && previous.getMenu().getId() != current.getMenu().getId()){
                barMenu.add(menu);
                menu =  new JMenu();
                menu.setText(current.getMenu().getName());
            } 
        
            menu.add(mnuItem);
            previous = current;
        }
        
        barMenu.add(menu);
        setJMenuBar(barMenu);
        pack();
    }
    
    private UserRight getRight(long orderId){
        UserRight right = null;
        for (UserRight r: frmLogin.getRights()){
            if (r.getItemOrder() == orderId){
                right = r;
                break;
            }
        }
        return right;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameDesktop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            FrameDesktop fd = new FrameDesktop();
            fd.setVisible(true);
            fd.setLocationRelativeTo(null);            
        });
    }
}
