/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package security.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import security.database.DBUser;
import security.database.DBUserModule;
import security.entities.Item;
import security.entities.Status;
import security.entities.Module;
import security.entities.TrackChange;
import security.entities.User;
import security.entities.UserModule;
import security.entities.UserRight;
import security.models.ItemListModel;
import security.models.StatusComboBoxModel;
import security.models.ModuleComboBoxModel;
import security.models.UserModuleTableModel;
import security.models.UserListModel;

/**
 *
 * @author Administrator
 */
public class FrmUser extends javax.swing.JInternalFrame implements ActionListener, ItemListener{

    /**
     * Creates new form FrmUsers
     */
    public FrmUser(UserRight right, Item user) {
        initComponents();
        myInitComponents(right, user);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cmbStatus = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstUsers = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtEntryUser = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtEntryDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtModUser = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtModDate = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btnNewD = new javax.swing.JButton();
        btnEditD = new javax.swing.JButton();
        btnDeleteD = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        cmbObject = new javax.swing.JComboBox();
        chkIsCreate = new javax.swing.JCheckBox();
        chkIsDelete = new javax.swing.JCheckBox();
        chkIsUpdate = new javax.swing.JCheckBox();
        jScrollPane5 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblObjects = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtUserId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        chkIsActive = new javax.swing.JCheckBox();
        btnNew = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstAvailableRoles = new javax.swing.JList();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstAssignedRoles = new javax.swing.JList();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Users");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter:"));

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Active", "Inactive" }));

        jScrollPane1.setViewportView(lstUsers);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cmbStatus, 0, 99, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Changes info:"));

        jLabel4.setText("Entry User:");

        txtEntryUser.setEnabled(false);

        jLabel6.setText("Entry Date:");

        txtEntryDate.setEnabled(false);

        jLabel5.setText("Mod. User:");

        txtModUser.setEnabled(false);

        jLabel7.setText("Mod. Date:");

        txtModDate.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEntryDate, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(txtEntryUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtModUser, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(txtModDate))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEntryUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtModUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEntryDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtModDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Object rights:"));

        btnNewD.setText("New");

        btnEditD.setText("Edit");

        btnDeleteD.setText("Delete");

        jLabel8.setText("Object:");

        cmbObject.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        chkIsCreate.setText("Create");

        chkIsDelete.setText("Delete");

        chkIsUpdate.setText("Update");

        tblObjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(tblObjects);

        jScrollPane5.setViewportView(jScrollPane4);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbObject, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkIsCreate)
                        .addGap(10, 10, 10)
                        .addComponent(chkIsUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkIsDelete))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNewD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEditD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDeleteD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnNewD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditD))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteD)
                    .addComponent(jLabel8)
                    .addComponent(cmbObject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkIsCreate)
                    .addComponent(chkIsUpdate)
                    .addComponent(chkIsDelete)))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("User info:"));

        jLabel1.setText("User Id:");

        txtUserId.setEnabled(false);

        jLabel2.setText("Username:");

        txtUsername.setEnabled(false);

        jLabel3.setText("Password:");

        txtPassword.setEnabled(false);

        chkIsActive.setText("Is Active");
        chkIsActive.setEnabled(false);

        btnNew.setText("New");

        btnEdit.setText("Edit");

        btnDelete.setText("Delete");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUserId, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkIsActive)
                            .addComponent(txtPassword))))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEdit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNew, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtUserId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNew))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(chkIsActive))
                .addContainerGap())
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Roles")));

        lstAvailableRoles.setEnabled(false);
        jScrollPane2.setViewportView(lstAvailableRoles);

        btnAdd.setText(">");
        btnAdd.setEnabled(false);

        btnRemove.setText("<");
        btnRemove.setEnabled(false);

        btnSave.setText("Save");
        btnSave.setEnabled(false);

        lstAssignedRoles.setEnabled(false);
        jScrollPane3.setViewportView(lstAssignedRoles);

        jLabel9.setText("Available:");

        jLabel10.setText("Assigned:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap(14, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnRemove)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSave))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteD;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnEditD;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNewD;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox chkIsActive;
    private javax.swing.JCheckBox chkIsCreate;
    private javax.swing.JCheckBox chkIsDelete;
    private javax.swing.JCheckBox chkIsUpdate;
    private javax.swing.JComboBox cmbObject;
    private javax.swing.JComboBox cmbStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JList lstAssignedRoles;
    private javax.swing.JList lstAvailableRoles;
    private javax.swing.JList lstUsers;
    private javax.swing.JTable tblObjects;
    private javax.swing.JTextField txtEntryDate;
    private javax.swing.JTextField txtEntryUser;
    private javax.swing.JTextField txtModDate;
    private javax.swing.JTextField txtModUser;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUserId;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    private int action = 0;
    private boolean save = false;
    private DBUser dbUser;
    private DBUserModule dbUserAccess;
    private UserRight right;
    private Item user;
    
    private void myInitComponents(UserRight right, Item user){
        this.user = user;
        this.right = right;

        dbUser = new DBUser();
        dbUserAccess = new DBUserModule();
        cmbStatus.addItemListener(this);
        lstUsers.addListSelectionListener(new ListSelection());
        btnNew.setActionCommand("New");
        btnNew.addActionListener(this);
        btnEdit.setActionCommand("Edit");
        btnEdit.addActionListener(this);
        btnDelete.setActionCommand("Delete");
        btnDelete.addActionListener(this);
        
        lstAvailableRoles.setModel(new ItemListModel(dbUser.getAvailableRoles(0)));
        lstAssignedRoles.setModel(new ItemListModel(dbUser.getAssignedRoles(0)));

        btnAdd.setActionCommand("Add");
        btnAdd.addActionListener(this);
        btnRemove.setActionCommand("Remove");
        btnRemove.addActionListener(this);
        btnSave.setActionCommand("Save");
        btnSave.addActionListener(this);
        
        tblObjects.getSelectionModel().addListSelectionListener(new TableSelection());
        tblObjects.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        cmbObject.setModel(new ModuleComboBoxModel(1));          // only active objects
        btnNewD.setActionCommand("NewD");
        btnNewD.addActionListener(this);
        btnEditD.setActionCommand("EditD");
        btnEditD.addActionListener(this);
        btnDeleteD.setActionCommand("DeleteD");
        btnDeleteD.addActionListener(this);
        
        setNormalScenario();
        loadStatus();
    }
    
    private void setNormalScenario(){
        cmbStatus.setEnabled(true);
        lstUsers.setEnabled(true);

        txtUsername.setEnabled(false);
        txtPassword.setEnabled(false);
        chkIsActive.setEnabled(false);
        btnNew.setEnabled(right.getIsCreated());
        if (lstUsers.getModel().getSize()>0){
            btnEdit.setEnabled(right.getIsUpdated());
            btnDelete.setEnabled(right.getIsDeleted());
            btnNewD.setEnabled(right.getIsCreated());
        } else {
            btnEdit.setEnabled(false);
            btnDelete.setEnabled(false);
            btnNewD.setEnabled(false);
        }

        lstAvailableRoles.setEnabled(true);
        ItemListModel modelA = (ItemListModel)lstAvailableRoles.getModel();
        if (modelA.getSize() > 0){
            btnAdd.setEnabled(right.getIsCreated());
        } else{
            btnAdd.setEnabled(false);
        }
        
        lstAssignedRoles.setEnabled(true);
        ItemListModel modelB = (ItemListModel)lstAssignedRoles.getModel();
        if (modelB.getSize()>0){
            btnRemove.setEnabled(right.getIsDeleted());
        } else {
            btnRemove.setEnabled(false);
        }
        btnSave.setEnabled(save);
     
        tblObjects.setEnabled(true);
        if (tblObjects.getModel().getRowCount()>0){
            btnEditD.setEnabled(right.getIsUpdated());
            btnDeleteD.setEnabled(right.getIsDeleted());
        } else {
            btnEditD.setEnabled(false);
            btnDeleteD.setEnabled(false);            
        }
        cmbObject.setEnabled(false);
        chkIsCreate.setEnabled(false);
        chkIsUpdate.setEnabled(false);
        chkIsDelete.setEnabled(false);
        
        btnNew.setText("New");
        btnEdit.setText("Edit");
        
        btnNewD.setText("New");
        btnEditD.setText("Edit");
        
        action = 0;
    }
    
    private void loadStatus(){
        cmbStatus.setModel(new StatusComboBoxModel());
        cmbStatus.setSelectedIndex(1);        
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        // status has been changed
        if (e.getStateChange() == ItemEvent.SELECTED){
            loadUsers();
        }
    }

    private void loadUsers(){
        if (cmbStatus.getModel().getSize() > 0) {
            Status status = (Status)cmbStatus.getSelectedItem();
            lstUsers.setModel(new UserListModel(dbUser.getList(status.getId())));
            if (lstUsers.getModel().getSize() > 0){
                lstUsers.setSelectedIndex(0);
            } else {
                clearFields();             // clear data fields
            }
        } else {
            clearFields();            // clear data fields
        }    
    }
    
    private class ListSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            // user list selected item has changed
            if (!e.getValueIsAdjusting()){
                loadDetail();
            }
        }
    }
    
    private void clearFields(){
        txtUserId.setText("");
        txtUsername.setText("");
        txtPassword.setText("");
        chkIsActive.setSelected(false);

        ItemListModel modelA = (ItemListModel)lstAvailableRoles.getModel();
        ItemListModel modelB = (ItemListModel)lstAssignedRoles.getModel();
        modelA.clear();
        modelB.clear();
        save=false;
        btnSave.setEnabled(save);
        btnAdd.setEnabled(false);
        btnRemove.setEnabled(false);
        tblObjects.setModel(new UserModuleTableModel(dbUserAccess.getList(0)));
        
        txtEntryUser.setText("");
        txtEntryDate.setText("");
        txtModUser.setText("");
        txtModDate.setText("");
    }

    private void loadDetail() {
        if (lstUsers.getSelectedIndex() != -1){
            User obj = (User)lstUsers.getSelectedValue();
            txtUserId.setText(Long.toString(obj.getUserId()));
            txtUsername.setText(obj.getUsername());
            txtPassword.setText(obj.getPassword());
            chkIsActive.setSelected(obj.getIsActive());
            txtEntryUser.setText(obj.getTrack().getEntryUser().getName());
            txtEntryDate.setText(new SimpleDateFormat("MM/dd/yyyy hh:mm:ss").format(obj.getTrack().getEntryDate()));
            txtModUser.setText(obj.getTrack().getModUser().getName());
            txtModDate.setText(new SimpleDateFormat("MM/dd/yyyy hh:mm:ss").format(obj.getTrack().getModDate()));
            btnNewD.setEnabled(right.getIsCreated());
            btnEdit.setEnabled(right.getIsUpdated());
            btnDelete.setEnabled(right.getIsDeleted());
            
            lstAvailableRoles.setModel(new ItemListModel(dbUser.getAvailableRoles(obj.getUserId())));
            lstAssignedRoles.setModel(new ItemListModel(dbUser.getAssignedRoles(obj.getUserId())));

            ItemListModel modelA = (ItemListModel)lstAvailableRoles.getModel();
            if (modelA.getSize() > 0){
                btnAdd.setEnabled(right.getIsCreated());
            } else{
                btnAdd.setEnabled(false);
            }

            ItemListModel modelB = (ItemListModel)lstAssignedRoles.getModel();
            if (modelB.getSize()>0){
                btnRemove.setEnabled(right.getIsDeleted());
            } else {
                btnRemove.setEnabled(false);
            }
            save=false;
            btnSave.setEnabled(save);

            loadTableDetail(obj.getUserId());
        }  else{
            clearFields();
            
            btnEdit.setEnabled(false);
            btnDelete.setEnabled(false);
            btnNewD.setEnabled(false);
            btnEditD.setEnabled(false);
            btnDeleteD.setEnabled(false);
        }
    }
    
    private void loadTableDetail(long userId) {
        tblObjects.setModel(new UserModuleTableModel(dbUserAccess.getList(userId)));
        TableModel tableModel = tblObjects.getModel();
        
        if (tableModel.getRowCount() > 0){
            tblObjects.setRowSelectionInterval(0, 0);
        } else {
            btnEditD.setEnabled(false);
            btnDeleteD.setEnabled(false);
        }
    }
    
    private class TableSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                loadRoleDetail();
            }
        }
    }
    
    private void loadRoleDetail(){
        TableModel tableModel = tblObjects.getModel();
        if (tblObjects.getSelectedRow() != -1){
            Item item = (Item)tableModel.getValueAt(tblObjects.getSelectedRow(), 0);
            setCmbObject(item.getId());
            chkIsCreate.setSelected((Boolean)tableModel.getValueAt(tblObjects.getSelectedRow(), 1));
            chkIsUpdate.setSelected((Boolean)tableModel.getValueAt(tblObjects.getSelectedRow(), 2));
            chkIsDelete.setSelected((Boolean)tableModel.getValueAt(tblObjects.getSelectedRow(), 3));
            btnEditD.setEnabled(right.getIsUpdated());
            btnDeleteD.setEnabled(right.getIsDeleted());
        } else {
            clearRoleDetail();
            btnEditD.setEnabled(false);
            btnDeleteD.setEnabled(false);
        }       
    }
    
    private void setCmbObject(Long roleId){
        int index = -1;
        Module obj;
        for (int i=0;i<cmbObject.getItemCount() && index == -1;i++){
            obj = (Module)cmbObject.getItemAt(i);
            if (obj.getId()== roleId){
                index = i;
            }
        }
        cmbObject.setSelectedIndex(index);
        cmbObject.repaint();
    }
    
    private void clearRoleDetail(){
        cmbObject.setSelectedIndex(-1);
        cmbObject.repaint();
        chkIsCreate.setSelected(false);
        chkIsUpdate.setSelected(false);
        chkIsDelete.setSelected(false);
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (null != e.getActionCommand()){
            switch (e.getActionCommand()) {
                case "New":
                    newRecord();
                    break;
                case "Edit":
                    editRecord();
                    break;
                case "Delete":
                    deleteRecord();
                    break;
                case "NewD":
                    newRecordD();
                    break;
                case "EditD":
                    editRecordD();
                    break;
                case "DeleteD":
                    deleteRecordD();
                    break;
                case "Add":
                    addRole();
                    break;
                case "Remove":
                    removeRole();
                    break;
                case "Save":
                    saveRole();
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Action not identified (" 
                            + e.getActionCommand()
                            + ")", "Unkown", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        }
    }
    
    private void newRecord() {
        if (action == 0){
            setNewScenario();
        }else{
            String msg = validateData();
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            }else if (action == 1){                  // insert action
                msg = insertRecord();
                if (msg.isEmpty()){
                    setNormalScenario();
                    loadUsers();
                    JOptionPane.showMessageDialog(this, "Record created succesfully!", "New", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            }else{                                // update action
                msg = updateRecord();
                if (msg.isEmpty()){
                    setNormalScenario();
                    updateUserList();
                    JOptionPane.showMessageDialog(this, "Record updated succesfully!", "Edit", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void setNewScenario() {
        cmbStatus.setEnabled(false);
        lstUsers.setEnabled(false);
        txtUsername.setEnabled(true);
        txtPassword.setEnabled(true);
        chkIsActive.setEnabled(false);
        tblObjects.setEnabled(false);
        
        cmbObject.setEnabled(false);
        chkIsCreate.setEnabled(false);
        chkIsUpdate.setEnabled(false);
        chkIsDelete.setEnabled(false);
        
        btnNew.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(false);
        btnNewD.setEnabled(false);
        btnEditD.setEnabled(false);
        btnDeleteD.setEnabled(false);
        
        btnNew.setText("Save");
        btnEdit.setText("Cancel");
        
        initFields();
        action = 1;         // new action
    }

    private void initFields(){
        txtUsername.setText("");
        txtPassword.setText("");
        chkIsActive.setSelected(true);
        loadTableDetail(-1);
        cmbObject.setSelectedIndex(-1);
        cmbObject.repaint();
        chkIsCreate.setSelected(false);
        chkIsUpdate.setSelected(false);
        chkIsDelete.setSelected(false);
    }
    
    private String validateData() {
        String msg;
        if (txtUsername.getText().equals("")){
            msg = "Name field cannot be empty";
        } 
        else if (txtPassword.getText().equals("")){
            msg = "Password field cannot be empty";
        } else {
            msg = "";
        }
        return msg;
    }
    
    private String insertRecord(){
        User obj = new User(
            -1
            , txtUsername.getText()
            , txtPassword.getText()
            , chkIsActive.isSelected()
            , new TrackChange(null, user, null, null)
        );
        
        return dbUser.insert(obj);
    }
    
    private String updateRecord() {
        User obj = new User(
              Long.parseLong(txtUserId.getText())
            , txtUsername.getText()
            , txtPassword.getText()
            , chkIsActive.isSelected()
            , new TrackChange(null, null, null, user)
        );
        
        return dbUser.update(obj);
    }
    
    private void updateUserList(){
        if (lstUsers.getSelectedIndex() != -1){
            Date date = new Date();
            User obj = (User)lstUsers.getSelectedValue();
            txtUserId.setText(Long.toString(obj.getUserId()));
            obj.setUsername(txtUsername.getText());
            obj.setPassword(txtPassword.getText());
            obj.setIsActive(chkIsActive.isSelected());
            obj.getTrack().setModDate(new Timestamp(date.getTime()));
            obj.getTrack().setModUser(user);
        }
    }

    private void editRecord() {
        if (action==0){
            setEditScenario();
        } else {
            setNormalScenario();
            loadDetail();
        }
    }
    
    private void setEditScenario(){
        cmbStatus.setEnabled(false);
        lstUsers.setEnabled(false);
        txtUsername.setEnabled(true);
        txtPassword.setEnabled(true);
        chkIsActive.setEnabled(true);
        
        lstAvailableRoles.setEnabled(false);
        btnAdd.setEnabled(false);
        btnRemove.setEnabled(false);
        btnSave.setEnabled(false);
        lstAssignedRoles.setEnabled(false);
        
        tblObjects.setEnabled(false);
        cmbObject.setEnabled(false);
        chkIsCreate.setEnabled(false);
        chkIsUpdate.setEnabled(false);
        chkIsDelete.setEnabled(false);
        
        btnNew.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(false);
        btnNewD.setEnabled(false);
        btnEditD.setEnabled(false);
        btnDeleteD.setEnabled(false);
        
        btnNew.setText("Save");
        btnEdit.setText("Cancel");

        action = 2;         // edit action
    }
    
    private void deleteRecord() {
        int ans = JOptionPane.showOptionDialog(
                this
                , "You are about to delete the user \"" + txtUsername.getText() + "\".\nAre you sure?"
                , "Delete"
                , JOptionPane.OK_CANCEL_OPTION
                , JOptionPane.QUESTION_MESSAGE
                , null
                , null
                , null);
        if (ans == JOptionPane.OK_OPTION){
            String msg = dbUser.delete(Long.parseLong(txtUserId.getText()));
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                loadUsers();
                JOptionPane.showMessageDialog(this, "Record deleted succesfully!", "Delete", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
    
    private void newRecordD(){
        if (action == 0){
            setNewScenarioD();
        }else{
            String msg = validateDataD();
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            }else if (action == 1){                  // insert action
                msg = insertRecordD();
                if (msg.isEmpty()){
                    setNormalScenario();
                    loadTableDetail(Long.parseLong(txtUserId.getText()));
                    JOptionPane.showMessageDialog(this, "Record created succesfully!", "New", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            }else{                                // update action
                msg = updateRecordD();
                if (msg.isEmpty()){
                    setNormalScenario();
                    updateRow();
                    JOptionPane.showMessageDialog(this, "Record updated succesfully!", "Edit", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
    
    private void setNewScenarioD() {
        cmbStatus.setEnabled(false);
        lstUsers.setEnabled(false);
        txtUsername.setEnabled(false);
        txtPassword.setEnabled(false);
        chkIsActive.setEnabled(false);
        tblObjects.setEnabled(false);
        cmbObject.setEnabled(true);
        chkIsCreate.setEnabled(true);
        chkIsUpdate.setEnabled(true);
        chkIsDelete.setEnabled(true);
        
        lstAvailableRoles.setEnabled(false);
        btnAdd.setEnabled(false);
        btnRemove.setEnabled(false);
        btnSave.setEnabled(false);
        lstAssignedRoles.setEnabled(false);

        btnNew.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnNewD.setEnabled(true);
        btnEditD.setEnabled(true);
        btnDeleteD.setEnabled(false);
        
        btnNewD.setText("Save");
        btnEditD.setText("Cancel");
        
        initFieldsD();
        action = 1;         // new action
    }

    private void initFieldsD(){
        cmbObject.setSelectedIndex(-1);
        cmbObject.repaint();
        chkIsCreate.setSelected(false);
        chkIsUpdate.setSelected(false);
        chkIsDelete.setSelected(false);
    }
    
    private String validateDataD() {
        String msg;
        if (cmbObject.getSelectedIndex() == -1){
            msg = "Object field cannot be empty";
        } else {
            msg = "";
        }
        return msg;
    }
   
    private String insertRecordD() {
        Module item = (Module)cmbObject.getSelectedItem();
        UserModule obj = new UserModule(
              Long.parseLong(txtUserId.getText())
            , new Item(item.getId(),item.getName())
            , chkIsCreate.isSelected()
            , chkIsUpdate.isSelected()
            , chkIsDelete.isSelected()
        );
        
        return dbUserAccess.insert(obj, new TrackChange(null, user, null, null));
    }

    private String updateRecordD() {
        Module item = (Module)cmbObject.getSelectedItem();
        UserModule obj = new UserModule(
              Long.parseLong(txtUserId.getText())
            , new Item(item.getId(),item.getName())
            , chkIsCreate.isSelected()
            , chkIsUpdate.isSelected()
            , chkIsDelete.isSelected()
        );
        
        return dbUserAccess.update(obj, new TrackChange(null, null, null, user));
    }
    
    private void updateRow(){
        Module item = (Module)cmbObject.getSelectedItem();
        Date date = new Date();
        tblObjects.setValueAt(new Item(item.getId(),item.getName()), tblObjects.getSelectedRow(), 0);
        tblObjects.setValueAt(chkIsCreate.isSelected(), tblObjects.getSelectedRow(), 1);
        tblObjects.setValueAt(chkIsUpdate.isSelected(), tblObjects.getSelectedRow(), 2);
        tblObjects.setValueAt(chkIsDelete.isSelected(), tblObjects.getSelectedRow(), 3);
        txtModUser.setText(user.getName());
        txtModDate.setText(new SimpleDateFormat("MM/dd/yyyy hh:mm:ss").format(date));
        User obj = (User)lstUsers.getSelectedValue();
        obj.getTrack().setModDate(new Timestamp(date.getTime()));
        obj.getTrack().setModUser(user);
    }
    
    private void editRecordD(){
        if (action==0){
            setEditScenarioD();
        } else {
            setNormalScenario();
            loadRoleDetail();
        }
    }
    private void setEditScenarioD(){
        cmbStatus.setEnabled(false);
        lstUsers.setEnabled(false);
        txtUsername.setEnabled(false);
        txtPassword.setEnabled(false);
        chkIsActive.setEnabled(false);
        tblObjects.setEnabled(false);
        cmbObject.setEnabled(false);
        chkIsCreate.setEnabled(true);
        chkIsUpdate.setEnabled(true);
        chkIsDelete.setEnabled(true);

        lstAvailableRoles.setEnabled(false);
        btnAdd.setEnabled(false);
        btnRemove.setEnabled(false);
        btnSave.setEnabled(false);
        lstAssignedRoles.setEnabled(false);

        btnNew.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnNewD.setEnabled(true);
        btnEditD.setEnabled(true);
        btnDeleteD.setEnabled(false);
        
        btnNewD.setText("Save");
        btnEditD.setText("Cancel");

        action = 2;         // edit action
    }
    
    private void deleteRecordD(){
        Module item = (Module)cmbObject.getSelectedItem();
        int ans = JOptionPane.showOptionDialog(
                this
                , "You are about to delete the object \"" 
                        + item.getName()
                        + "\".\nAre you sure?"
                , "Delete"
                , JOptionPane.OK_CANCEL_OPTION
                , JOptionPane.QUESTION_MESSAGE
                , null
                , null
                , null);
        if (ans == JOptionPane.OK_OPTION){
            String msg = dbUserAccess.delete(Long.parseLong(txtUserId.getText()), item.getId());
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                User userSeleted = (User)lstUsers.getSelectedValue();
                loadTableDetail(userSeleted.getUserId());
                JOptionPane.showMessageDialog(this, "Record deleted succesfully!", "Delete", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
    
    private void addRole(){
        if (lstAvailableRoles.getSelectedIndex() > -1){
            ItemListModel modelB = (ItemListModel)lstAvailableRoles.getModel();
            if (modelB.getSize()>0){
                Item role = (Item)lstAvailableRoles.getSelectedValue();
                ItemListModel modelA = (ItemListModel)lstAssignedRoles.getModel();
                modelA.addElement(role);
                modelB.removeElement(lstAvailableRoles.getSelectedIndex());
                save = true;
                btnSave.setEnabled(save);
                btnRemove.setEnabled(true);
                if (modelB.getSize()==0){
                    btnAdd.setEnabled(false);
                }
            }
        }
    }
    private void removeRole(){
        if (lstAssignedRoles.getSelectedIndex() > -1){
            ItemListModel modelA = (ItemListModel)lstAssignedRoles.getModel();
            if (modelA.getSize()>0){
                Item role = (Item)lstAssignedRoles.getSelectedValue();
                ItemListModel modelB = (ItemListModel)lstAvailableRoles.getModel();
                modelB.addElement(role);
                modelA.removeElement(lstAssignedRoles.getSelectedIndex());
                save = true;
                btnSave.setEnabled(save);
                btnAdd.setEnabled(true);
                if (modelA.getSize() == 0){
                    btnRemove.setEnabled(false);
                }
            }
        }
    }
    private void saveRole(){
        User selectedUser = (User)lstUsers.getSelectedValue();
        Item item;
        ItemListModel modelB = (ItemListModel)lstAvailableRoles.getModel();
        for (int i = 0; i < modelB.getSize(); i++){
            item = (Item)modelB.getElementAt(i);
            dbUser.applyUserRole(selectedUser.getUserId(), item.getId(), 0, user.getId());
        }
        
        ItemListModel modelA = (ItemListModel)lstAssignedRoles.getModel();
        for (int i = 0; i < modelA.getSize(); i++){
            item = (Item)modelA.getElementAt(i);
            dbUser.applyUserRole(selectedUser.getUserId(), item.getId(), 1, user.getId());
        }
        save = false;
        btnSave.setEnabled(save);
    }
}
