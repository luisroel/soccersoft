/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package soccer.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import security.entities.Item;
import security.entities.UserRight;
import soccer.database.DBFixture;
import soccer.database.DBStat;
import soccer.entities.BasicStats;
import soccer.entities.Probability;
import soccer.entities.Simulation;
import soccer.entities.Strength;
import soccer.models.BasicStatsTableModel;
import soccer.models.ProbabilityTableModel;
import soccer.models.SimulationComboBoxModel;
import soccer.models.SimulationTableModel;
import soccer.models.StrengthTableModel;
import utils.FloatRenderer;
import utils.TableColumnAdjuster;
import utils.TimestampRenderer;
import utils.Util;

/**
 *
 * @author Administrator
 */
public class FrmSimulation extends javax.swing.JInternalFrame implements ActionListener{

    /**
     * Creates new form FrmUsers
     */
    public FrmSimulation(UserRight right, Item user) {
        initComponents();
        myInitComponents(right, user);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtBankroll = new javax.swing.JTextField();
        btnRun = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtProfit = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtMaxBet = new javax.swing.JTextField();
        dtpFrom = new com.toedter.calendar.JDateChooser();
        dtpTo = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        cmbSimulation = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        spnScoredHome = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        spnScoredVisitor = new javax.swing.JSpinner();
        jLabel20 = new javax.swing.JLabel();
        txtOdd_1 = new javax.swing.JTextField();
        txtOdd_X = new javax.swing.JTextField();
        txtOdd_2 = new javax.swing.JTextField();
        btnEdit = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        txtHome = new javax.swing.JTextField();
        txtVisit = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel10 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblStatsGoals7 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblProbGoals7 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblStrengthGoals7 = new javax.swing.JTable();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblStatsPoints7 = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblProbPoints7 = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblStrengthPoints7 = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jPanel14 = new javax.swing.JPanel();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblStatsGoalsA = new javax.swing.JTable();
        jPanel17 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        tblProbGoalsA = new javax.swing.JTable();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        tblStrengthGoalsA = new javax.swing.JTable();
        jPanel15 = new javax.swing.JPanel();
        jTabbedPane7 = new javax.swing.JTabbedPane();
        jPanel19 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        tblStatsPointsA = new javax.swing.JTable();
        jPanel20 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        tblProbPointsA = new javax.swing.JTable();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane15 = new javax.swing.JScrollPane();
        tblStrengthPointsA = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblFixProfit = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRecoverProfit = new javax.swing.JTable();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Simulations");
        setPreferredSize(new java.awt.Dimension(1300, 680));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter:"));

        jLabel5.setText("From:");

        jLabel6.setText("To:");

        jLabel7.setText("Bankroll:");

        txtBankroll.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtBankroll.setText("10000.00");

        btnRun.setText("Run");

        jLabel1.setText("Profit:");

        txtProfit.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtProfit.setText("500.00");

        jLabel2.setText("Max. Bet:");

        txtMaxBet.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMaxBet.setText("7500.00");

        dtpFrom.setDateFormatString("MM/dd/yyyy HH:ss");

        dtpTo.setDateFormatString("MM/dd/yyyy HH:ss");

        jLabel8.setText("Simulation:");

        jLabel9.setText("Home:");

        spnScoredHome.setModel(new javax.swing.SpinnerNumberModel(0, 0, 25, 1));

        jLabel10.setText("Visitor:");

        spnScoredVisitor.setModel(new javax.swing.SpinnerNumberModel(0, 0, 25, 1));

        jLabel20.setText("1 X 2:");

        btnEdit.setText("Edit");

        txtHome.setEnabled(false);

        txtVisit.setEnabled(false);

        btnCancel.setText("Cancel");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dtpFrom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                    .addComponent(dtpTo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtBankroll)
                    .addComponent(txtProfit)
                    .addComponent(txtMaxBet)
                    .addComponent(btnRun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbSimulation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spnScoredHome)
                    .addComponent(spnScoredVisitor)
                    .addComponent(txtOdd_1)
                    .addComponent(txtOdd_X)
                    .addComponent(txtOdd_2)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtHome)
                    .addComponent(txtVisit)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbSimulation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dtpFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dtpTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBankroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtProfit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMaxBet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRun)
                .addGap(12, 12, 12)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnScoredHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtVisit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnScoredVisitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOdd_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(txtOdd_X, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOdd_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblStatsGoals7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblStatsGoals7.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane6.setViewportView(tblStatsGoals7);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Stats", jPanel4);

        tblProbGoals7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblProbGoals7.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane5.setViewportView(tblProbGoals7);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Probabilities", jPanel1);

        tblStrengthGoals7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblStrengthGoals7.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane4.setViewportView(tblStrengthGoals7);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Strengths", jPanel3);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Goals", jPanel10);

        tblStatsPoints7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblStatsPoints7.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane7.setViewportView(tblStatsPoints7);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 25, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Stats", jPanel11);

        tblProbPoints7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblProbPoints7.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane8.setViewportView(tblProbPoints7);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 25, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Probabilities", jPanel12);

        tblStrengthPoints7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblStrengthPoints7.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane9.setViewportView(tblStrengthPoints7);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 25, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Strengths", jPanel13);

        jTabbedPane3.addTab("Points", jTabbedPane4);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 58, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Last 7", jPanel6);

        tblStatsGoalsA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblStatsGoalsA.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane10.setViewportView(tblStatsGoalsA);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 66, Short.MAX_VALUE))
        );

        jTabbedPane6.addTab("Stats", jPanel16);

        tblProbGoalsA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblProbGoalsA.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane11.setViewportView(tblProbGoalsA);

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 66, Short.MAX_VALUE))
        );

        jTabbedPane6.addTab("Probabilities", jPanel17);

        tblStrengthGoalsA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblStrengthGoalsA.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane12.setViewportView(tblStrengthGoalsA);

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 66, Short.MAX_VALUE))
        );

        jTabbedPane6.addTab("Strengths", jPanel18);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane6)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jTabbedPane6)
                .addContainerGap())
        );

        jTabbedPane5.addTab("Goals", jPanel14);

        tblStatsPointsA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblStatsPointsA.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane13.setViewportView(tblStatsPointsA);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 35, Short.MAX_VALUE))
        );

        jTabbedPane7.addTab("Stats", jPanel19);

        tblProbPointsA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblProbPointsA.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane14.setViewportView(tblProbPointsA);

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 35, Short.MAX_VALUE))
        );

        jTabbedPane7.addTab("Probabilities", jPanel20);

        tblStrengthPointsA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblStrengthPointsA.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane15.setViewportView(tblStrengthPointsA);

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 35, Short.MAX_VALUE))
        );

        jTabbedPane7.addTab("Strengths", jPanel21);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane7)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jTabbedPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 43, Short.MAX_VALUE))
        );

        jTabbedPane5.addTab("Points", jPanel15);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane5)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jTabbedPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("All", jPanel9);

        tblFixProfit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblFixProfit.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(tblFixProfit);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Fixed Profit", jPanel7);

        tblRecoverProfit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblRecoverProfit.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane3.setViewportView(tblRecoverProfit);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Recover Profit", jPanel8);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRun;
    private javax.swing.JComboBox cmbSimulation;
    private com.toedter.calendar.JDateChooser dtpFrom;
    private com.toedter.calendar.JDateChooser dtpTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTabbedPane jTabbedPane6;
    private javax.swing.JTabbedPane jTabbedPane7;
    private javax.swing.JSpinner spnScoredHome;
    private javax.swing.JSpinner spnScoredVisitor;
    private javax.swing.JTable tblFixProfit;
    private javax.swing.JTable tblProbGoals7;
    private javax.swing.JTable tblProbGoalsA;
    private javax.swing.JTable tblProbPoints7;
    private javax.swing.JTable tblProbPointsA;
    private javax.swing.JTable tblRecoverProfit;
    private javax.swing.JTable tblStatsGoals7;
    private javax.swing.JTable tblStatsGoalsA;
    private javax.swing.JTable tblStatsPoints7;
    private javax.swing.JTable tblStatsPointsA;
    private javax.swing.JTable tblStrengthGoals7;
    private javax.swing.JTable tblStrengthGoalsA;
    private javax.swing.JTable tblStrengthPoints7;
    private javax.swing.JTable tblStrengthPointsA;
    private javax.swing.JTextField txtBankroll;
    private javax.swing.JTextField txtHome;
    private javax.swing.JTextField txtMaxBet;
    private javax.swing.JTextField txtOdd_1;
    private javax.swing.JTextField txtOdd_2;
    private javax.swing.JTextField txtOdd_X;
    private javax.swing.JTextField txtProfit;
    private javax.swing.JTextField txtVisit;
    // End of variables declaration//GEN-END:variables

    private UserRight right;
    private Item user;
    
    private void myInitComponents(UserRight right, Item user) {
        this.user = user;
        this.right = right;
        
        btnRun.setActionCommand("Run");
        btnRun.addActionListener(this); 
        btnEdit.setActionCommand("Edit");
        btnEdit.addActionListener(this);
        btnCancel.setActionCommand("Cancel");
        btnCancel.addActionListener(this);

        tblStatsGoals7.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblStatsGoals7.getSelectionModel().addListSelectionListener(new TableSelection());
        tblStatsGoals7.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd/yy HH:mm"));
        tblStatsGoals7.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblProbGoals7.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblProbGoals7.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd/yy HH:mm"));
        tblProbGoals7.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblStrengthGoals7.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblStrengthGoals7.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd/yy HH:mm"));
        tblStrengthGoals7.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblStatsGoalsA.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblStatsGoalsA.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd/yy HH:mm"));
        tblStatsGoalsA.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblProbGoalsA.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblProbGoalsA.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd/yy HH:mm"));
        tblProbGoalsA.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblStrengthGoalsA.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblStrengthGoalsA.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd/yy HH:mm"));
        tblStrengthGoalsA.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblStatsPoints7.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblStatsPoints7.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd/yy HH:mm"));
        tblStatsPoints7.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblProbPoints7.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblProbPoints7.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd/yy HH:mm"));
        tblProbPoints7.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblStrengthPoints7.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblStrengthPoints7.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd/yy HH:mm"));
        tblStrengthPoints7.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        tblFixProfit.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblFixProfit.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd/yy HH:mm"));
        tblFixProfit.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblRecoverProfit.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblRecoverProfit.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd/yy HH:mm"));
        tblRecoverProfit.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        cmbSimulation.setModel(new SimulationComboBoxModel());
        cmbSimulation.setSelectedIndex(0);
        
        Calendar c = Calendar.getInstance();
        c.set( Calendar.HOUR_OF_DAY, 23);
        c.set( Calendar.MINUTE, 59);
        c.set( Calendar.SECOND, 59);
        c.set( Calendar.MILLISECOND, 0);
        Date toDate = c.getTime();
        Date fromDate = new Date();
        long weekMiliSecs = (long)7 * (long)24 * (long)60 * (long)60 * (long)1000;
        long cTime = toDate.getTime();
        long beforeOneWeek = cTime - weekMiliSecs;  // 365 in mili seconds
        fromDate.setTime(beforeOneWeek);
        dtpFrom.setDate(fromDate);
        dtpTo.setDate(toDate);
        
        setNormalScenario();
    }
    
    private class TableSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                loadData();
            }
        }
    }
    
    private void loadData(){
        TableModel tableModel = tblStatsGoals7.getModel();
        if (tblStatsGoals7.getSelectedRow() != -1){
            int selectedRow = tblStatsGoals7.getSelectedRow();            
            String home = (String)tableModel.getValueAt(selectedRow, 6);
            txtHome.setText(home);
            spnScoredHome.setValue((Integer)tableModel.getValueAt(selectedRow, 18));
            
            String visitor = (String)tableModel.getValueAt(selectedRow, 7);
            txtVisit.setText(visitor);
            spnScoredVisitor.setValue((Integer)tableModel.getValueAt(selectedRow, 19));
            
            Float Odd_1 = (Float)tableModel.getValueAt(selectedRow, 8);           
            txtOdd_1.setText(Odd_1.toString());
            Float Odd_X = (Float)tableModel.getValueAt(selectedRow, 9);
            txtOdd_X.setText(Odd_X.toString());
            Float Odd_2 = (Float)tableModel.getValueAt(selectedRow, 10);
            txtOdd_2.setText(Odd_2.toString());

            btnEdit.setEnabled(right.getIsUpdated());
        } else {
            clearFields();
            btnEdit.setEnabled(false);
        }           
    }
    
    private void clearFields(){
        txtHome.setText("");
        spnScoredHome.setValue(0);
        txtVisit.setText("");
        spnScoredVisitor.setValue(0);
        txtOdd_1.setText("");
        txtOdd_X.setText("");
        txtOdd_2.setText("");
    }
    
    private void setNormalScenario(){
        cmbSimulation.setEnabled(true);
        tblStatsGoals7.setEnabled(true);
        dtpFrom.setEnabled(true);
        dtpTo.setEnabled(true);
        txtBankroll.setEnabled(true);
        txtProfit.setEnabled(true);
        txtMaxBet.setEnabled(true);
        btnRun.setEnabled(true);
        
        spnScoredHome.setEnabled(false);
        spnScoredVisitor.setEnabled(false);
        txtOdd_1.setEnabled(false);
        txtOdd_X.setEnabled(false);
        txtOdd_2.setEnabled(false);
        btnEdit.setText("Edit");
        btnCancel.setEnabled(false);
    }

    private void setEditScenario(){
        cmbSimulation.setEnabled(false);
        tblStatsGoals7.setEnabled(false);
        dtpFrom.setEnabled(false);
        dtpTo.setEnabled(false);
        txtBankroll.setEnabled(false);
        txtProfit.setEnabled(false);
        txtMaxBet.setEnabled(false);
        btnRun.setEnabled(false);
        
        tblStatsGoals7.setEnabled(true);
        spnScoredHome.setEnabled(true);
        spnScoredVisitor.setEnabled(true);
        txtOdd_1.setEnabled(true);
        txtOdd_X.setEnabled(true);
        txtOdd_2.setEnabled(true);
        btnEdit.setText("Save");
        btnCancel.setEnabled(true);
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (null != e.getActionCommand()){
            switch (e.getActionCommand()) {
                case "Edit":
                    editAction();
                    break;
                case "Cancel":
                    cancelAction();
                    break;
                case "Run":
                    runAction();
                    break;                    
                default:
                    JOptionPane.showMessageDialog(this, "Action not identified", "Unkown", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        }
    }
    
    private void editAction(){
        if (btnEdit.getText().equalsIgnoreCase("Edit")){
            setEditScenario();
        } else {
            String msg = validateData();
            if (msg.isEmpty()){
                DBFixture dbFixture = new DBFixture();
                
                long fixtureId = (long)tblStatsGoals7.getModel().getValueAt(tblStatsGoals7.getSelectedRow(), 1);
                int scoreH = (Integer)spnScoredHome.getValue();
                int scoreV = (Integer)spnScoredVisitor.getValue();
                float odd_1 = Float.parseFloat(txtOdd_1.getText());
                float odd_X = Float.parseFloat(txtOdd_X.getText());
                float odd_2 = Float.parseFloat(txtOdd_2.getText());
                
                msg = dbFixture.quickUpdate(
                          fixtureId
                        , scoreH
                        , scoreV
                        , odd_1
                        , odd_X
                        , odd_2
                        , user.getId()
                );
                
                if (msg.isEmpty()){
                    JOptionPane.showMessageDialog(this, "Data saved succesfully!!!", "Save", JOptionPane.INFORMATION_MESSAGE);
                    updateRowTable();
                    setNormalScenario();
                } else{
                    JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
                }
            } 
        }
    }
    
    private void updateRowTable(){
        int rowSelected = tblStatsGoals7.getSelectedRow();
        if (rowSelected != -1){
            tblStatsGoals7.setValueAt((Integer)spnScoredHome.getValue(), rowSelected, 18);
            tblStatsGoals7.setValueAt((Integer)spnScoredVisitor.getValue(), rowSelected, 19);
            tblStatsGoals7.setValueAt(Float.parseFloat(txtOdd_1.getText().trim()), rowSelected, 8);
            tblStatsGoals7.setValueAt(Float.parseFloat(txtOdd_X.getText().trim()), rowSelected, 9);
            tblStatsGoals7.setValueAt(Float.parseFloat(txtOdd_2.getText().trim()), rowSelected, 10);    
        }
    }
    
    private String validateData() {
        String msg;
        if (spnScoredHome.getValue() == null){
            msg = "Scored home field cannot be empty";
        } else if (spnScoredVisitor.getValue() == null){
            msg = "Scored visitor field cannot be empty";
        } else if(!Util.isNumeric(txtOdd_1.getText().trim())){
            msg = "Odd 1 must be a numeric value.";
        } else if(!Util.isNumeric(txtOdd_X.getText().trim())){
            msg = "Odd X must be a numeric value.";
        } else if(!Util.isNumeric(txtOdd_2.getText().trim())){
            msg = "Odd 2 must be a numeric value.";
        } else {
            msg = "";
        }
        return msg;
    }
    
    private void cancelAction(){
        loadData();
        setNormalScenario();
    }
    
    private void runAction(){
        TableModel tableModel;
        Item item = (Item)(cmbSimulation.getSelectedItem());
        List<BasicStats> lstStatsGoals7 = getDatasetStatsGoals7(item.getId());
        List<Probability> lstProbGoals7 = getDatasetProbGoals7(item.getId());
        List<Strength> lstStrengthGoals7 = getDatasetStrengthGoals7(item.getId());
        
        List<BasicStats> lstStatsGoalsA = getDatasetStatsGoalsA(item.getId());
        List<Probability> lstProbGoalsA = getDatasetProbGoalsA(item.getId());
        List<Strength> lstStrengthGoalsA = getDatasetStrengthGoalsA(item.getId());

        List<BasicStats> lstStatsPoints7 = getDatasetStatsPoints7(item.getId());
        List<Probability> lstProbPoints7 = getDatasetProbPoints7(item.getId());
        List<Strength> lstStrengthPoints7 = getDatasetStrengthPoints7(item.getId());

        List<Simulation> lstFix = getDatasetSimulation(item.getId());
        List<Simulation> lstRecover = getDatasetSimulation(item.getId());
        
        // load basic stats 
        tblStatsGoals7.setModel(new BasicStatsTableModel(lstStatsGoals7));
        TableColumnAdjuster taStatsGoals7 = new TableColumnAdjuster(tblStatsGoals7);
        taStatsGoals7.setOnlyAdjustLarger(false);
        taStatsGoals7.adjustColumns();
        tableModel = tblStatsGoals7.getModel();
        if (tableModel.getRowCount() > 0){
            tblStatsGoals7.setRowSelectionInterval(0, 0);
        }
        
        // load probabilities
        tblProbGoals7.setModel(new ProbabilityTableModel(lstProbGoals7));
        TableColumnAdjuster taProbGoals7 = new TableColumnAdjuster(tblProbGoals7);
        taProbGoals7.setOnlyAdjustLarger(false);
        taProbGoals7.adjustColumns();
        tableModel = tblProbGoals7.getModel();
        if (tableModel.getRowCount() > 0){
            tblProbGoals7.setRowSelectionInterval(0, 0);
        }

        // load basic stats 
        tblStrengthGoals7.setModel(new StrengthTableModel(lstStrengthGoals7));
        TableColumnAdjuster taStrengthGoals7 = new TableColumnAdjuster(tblStrengthGoals7);
        taStrengthGoals7.setOnlyAdjustLarger(false);
        taStrengthGoals7.adjustColumns();
        tableModel = tblStrengthGoals7.getModel();
        if (tableModel.getRowCount() > 0){
            tblStrengthGoals7.setRowSelectionInterval(0, 0);
        }
        
        // load basic stats 
        tblStatsGoalsA.setModel(new BasicStatsTableModel(lstStatsGoalsA));
        TableColumnAdjuster taStatsGoalsA = new TableColumnAdjuster(tblStatsGoalsA);
        taStatsGoalsA.setOnlyAdjustLarger(false);
        taStatsGoalsA.adjustColumns();
        tableModel = tblStatsGoalsA.getModel();
        if (tableModel.getRowCount() > 0){
            tblStatsGoalsA.setRowSelectionInterval(0, 0);
        }
        
        // load probabilities
        tblProbGoalsA.setModel(new ProbabilityTableModel(lstProbGoalsA));
        TableColumnAdjuster taProbGoalsA = new TableColumnAdjuster(tblProbGoalsA);
        taProbGoalsA.setOnlyAdjustLarger(false);
        taProbGoalsA.adjustColumns();
        tableModel = tblProbGoalsA.getModel();
        if (tableModel.getRowCount() > 0){
            tblProbGoalsA.setRowSelectionInterval(0, 0);
        }

        // load basic stats
        tblStrengthGoalsA.setModel(new StrengthTableModel(lstStrengthGoalsA));
        TableColumnAdjuster taStrengthGoalsA = new TableColumnAdjuster(tblStrengthGoalsA);
        taStrengthGoalsA.setOnlyAdjustLarger(false);
        taStrengthGoalsA.adjustColumns();
        tableModel = tblStrengthGoalsA.getModel();
        if (tableModel.getRowCount() > 0){
            tblStrengthGoalsA.setRowSelectionInterval(0, 0);
        }
        
        // load basic stats 
        tblStatsPoints7.setModel(new BasicStatsTableModel(lstStatsPoints7));
        TableColumnAdjuster taStatsPoints7 = new TableColumnAdjuster(tblStatsPoints7);
        taStatsPoints7.setOnlyAdjustLarger(false);
        taStatsPoints7.adjustColumns();
        tableModel = tblStatsPoints7.getModel();
        if (tableModel.getRowCount() > 0){
            tblStatsPoints7.setRowSelectionInterval(0, 0);
        }
        
        // load probabilities
        tblProbPoints7.setModel(new ProbabilityTableModel(lstProbPoints7));
        TableColumnAdjuster taProbPoints7 = new TableColumnAdjuster(tblProbPoints7);
        taProbPoints7.setOnlyAdjustLarger(false);
        taProbPoints7.adjustColumns();
        tableModel = tblProbPoints7.getModel();
        if (tableModel.getRowCount() > 0){
            tblProbPoints7.setRowSelectionInterval(0, 0);
        }

        // load basic stats
        tblStrengthPoints7.setModel(new StrengthTableModel(lstStrengthPoints7));
        TableColumnAdjuster taStrengthPoints7 = new TableColumnAdjuster(tblStrengthPoints7);
        taStrengthPoints7.setOnlyAdjustLarger(false);
        taStrengthPoints7.adjustColumns();
        tableModel = tblStrengthPoints7.getModel();
        if (tableModel.getRowCount() > 0){
            tblStrengthPoints7.setRowSelectionInterval(0, 0);
        }

        tblFixProfit.setModel(new SimulationTableModel(fixProfit(lstFix)));
        TableColumnAdjuster taFixedProfit = new TableColumnAdjuster(tblFixProfit);
        taFixedProfit.setOnlyAdjustLarger(false);
        taFixedProfit.adjustColumns();
        tableModel = tblFixProfit.getModel();
        if (tableModel.getRowCount() > 0){
            tblFixProfit.setRowSelectionInterval(0, 0);
        }
        
        tblRecoverProfit.setModel(new SimulationTableModel(recoverProfit(lstRecover)));
        TableColumnAdjuster taRecoverProfit = new TableColumnAdjuster(tblRecoverProfit);
        taRecoverProfit.setOnlyAdjustLarger(false);
        taRecoverProfit.adjustColumns();
        tableModel = tblRecoverProfit.getModel();
        if (tableModel.getRowCount() > 0){
            tblRecoverProfit.setRowSelectionInterval(0, 0);
        }
    }
    
    private List<BasicStats> getDatasetStatsGoals7(long simId){
        Timestamp from = new Timestamp(dtpFrom.getDate().getTime());
        Timestamp to = new Timestamp(dtpTo.getDate().getTime());
        DBStat dbStat = new DBStat();
        List<BasicStats> lst = dbStat.getStatsGoals7(simId, from, to);
        return lst;
    }
    
    private List<Probability> getDatasetProbGoals7(long simId){
        Timestamp from = new Timestamp(dtpFrom.getDate().getTime());
        Timestamp to = new Timestamp(dtpTo.getDate().getTime());
        DBStat dbStat = new DBStat();
        List<Probability> lst = dbStat.getProbGoals7(simId, from, to);
        return lst;
    }
        
    private List<Strength> getDatasetStrengthGoals7(long simId){
        Timestamp from = new Timestamp(dtpFrom.getDate().getTime());
        Timestamp to = new Timestamp(dtpTo.getDate().getTime());
        DBStat dbStat = new DBStat();
        List<Strength> lst = dbStat.getStrengthGoals7(simId, from, to);
        return lst;
    }
 
    private List<BasicStats> getDatasetStatsGoalsA(long simId){
        Timestamp from = new Timestamp(dtpFrom.getDate().getTime());
        Timestamp to = new Timestamp(dtpTo.getDate().getTime());
        DBStat dbStat = new DBStat();
        List<BasicStats> lst = dbStat.getStatsGoalsA(simId, from, to);
        return lst;
    }
    
    private List<Probability> getDatasetProbGoalsA(long simId){
        Timestamp from = new Timestamp(dtpFrom.getDate().getTime());
        Timestamp to = new Timestamp(dtpTo.getDate().getTime());
        DBStat dbStat = new DBStat();
        List<Probability> lst = dbStat.getProbGoalsA(simId, from, to);
        return lst;
    }
        
    private List<Strength> getDatasetStrengthGoalsA(long simId){
        Timestamp from = new Timestamp(dtpFrom.getDate().getTime());
        Timestamp to = new Timestamp(dtpTo.getDate().getTime());
        DBStat dbStat = new DBStat();
        List<Strength> lst = dbStat.getStrengthGoalsA(simId, from, to);
        return lst;
    }

    private List<BasicStats> getDatasetStatsPoints7(long simId){
        Timestamp from = new Timestamp(dtpFrom.getDate().getTime());
        Timestamp to = new Timestamp(dtpTo.getDate().getTime());
        DBStat dbStat = new DBStat();
        List<BasicStats> lst = dbStat.getStatsPoints7(simId, from, to);
        return lst;
    }
    
    private List<Probability> getDatasetProbPoints7(long simId){
        Timestamp from = new Timestamp(dtpFrom.getDate().getTime());
        Timestamp to = new Timestamp(dtpTo.getDate().getTime());
        DBStat dbStat = new DBStat();
        List<Probability> lst = dbStat.getProbPoints7(simId, from, to);
        return lst;
    }
        
    private List<Strength> getDatasetStrengthPoints7(long simId){
        Timestamp from = new Timestamp(dtpFrom.getDate().getTime());
        Timestamp to = new Timestamp(dtpTo.getDate().getTime());
        DBStat dbStat = new DBStat();
        List<Strength> lst = dbStat.getStrengthPoints7(simId, from, to);
        return lst;
    }
    
    private List<Simulation> getDatasetSimulation(long simId){
        Timestamp from = new Timestamp(dtpFrom.getDate().getTime());
        Timestamp to = new Timestamp(dtpTo.getDate().getTime());
        DBStat dbStat = new DBStat();
        List<Simulation> lst = dbStat.getSimulation(simId, from, to);
        return lst;
    }
    
    private List<Simulation> fixProfit(List<Simulation> lst){
        // set FixBet
        setFixBet(lst);

        // Compute payment
        setPayment(lst);
        
        // Balance update
        setBalance(lst);
        
        return lst;
    }

    private List<Simulation> recoverProfit(List<Simulation> lst){   
        // set FixBet
        setFixBet(lst);

        // recover losses
        recoverLosses(lst);

        // Compute payment
        setPayment(lst);

        // Balance update
        setBalance(lst);
        
        return lst;
    }

    private void setFixBet(List<Simulation> lst){
        Simulation mainItem, localItem;
        Timestamp current, next;
        float profit = Float.parseFloat(txtProfit.getText());
        float maxBet = Float.parseFloat(txtMaxBet.getText());
        float bet;
        Iterator localIt, mainIt = lst.iterator();
        int groupId = 1;
        long time;
        while (mainIt.hasNext()){
            mainItem = (Simulation)mainIt.next();
            if (mainItem.getType().equalsIgnoreCase("bet")){
                if (mainItem.getOdd() == 1){
                    mainItem.setIdealBet(0);
                    mainItem.setActualBet(0);
                } else {
                    bet = profit /(mainItem.getOdd() - 1);
                    if (bet > maxBet){
                        bet = maxBet;
                    }
                    mainItem.setIdealBet(bet);
                    mainItem.setActualBet(bet);
                }
                
                // create serial groups
                if (mainItem.getGroupId() == 0) {
                    mainItem.setGroupId(groupId);
                    current = mainItem.getTime(); 
                    localIt = lst.iterator();
                    while (localIt.hasNext()){
                        localItem = (Simulation)localIt.next();
                        next = localItem.getTime();
                        time = next.getTime() - current.getTime();
                        if (localItem.getType().equalsIgnoreCase("bet")
                            && (localItem.getGroupId() == 0)
                            && (time >= 9000000)){
                            localItem.setGroupId(groupId);
                            current = next;
                        }
                    }
                    groupId++;
                }
            }
            
            if (mainItem.getType().equalsIgnoreCase("ded")){
                localIt = lst.iterator();
                while (localIt.hasNext()){
                    localItem = (Simulation)localIt.next();
                    if (localItem.getFixtureId() == mainItem.getFixtureId()){
                        mainItem.setIdealPayment(localItem.getOdd() * localItem.getIdealBet());
                        break;
                    }
                }
            }
        }
    }
    
    private void recoverLosses(List<Simulation> lst){
        Simulation mainItem, localItem;
        Iterator localIt, mainIt;
        float maxBet = Float.parseFloat(txtMaxBet.getText());
        float bet;
        float loss;
        int groupId = 1;
        mainIt = lst.iterator();
        while (mainIt.hasNext()){
            mainItem = (Simulation)mainIt.next();
            if (mainItem.getGroupId()==groupId){
                if (mainItem.getOk() == 0) {
                    loss = mainItem.getActualBet();
                } else{
                    loss = 0;
                }
                localIt = lst.iterator();
                while (localIt.hasNext()){
                    localItem = (Simulation)localIt.next();
                    if (localItem.getFixtureId() != mainItem.getFixtureId() 
                        && localItem.getGroupId() == groupId){
                        
                        // update bet amount to be recovered on the current transaction
                        if (localItem.getOdd() == 1){
                            localItem.setActualBet(0);
                        }else {
                            bet = localItem.getActualBet() + (loss/(localItem.getOdd() - 1));
                            if (bet > maxBet){
                                bet = maxBet;
                            }
                            localItem.setActualBet(bet);
                        }
                        
                        // update loss amount
                        if (localItem.getOk() == 0) {
                            loss += localItem.getActualBet();
                        } else {
                            loss = 0;
                        }
                    }
                }
                groupId++;
            }
        }
    }
    
    private void setPayment(List<Simulation> lst){
        Simulation mainItem, localItem;
        Iterator localIt, mainIt = lst.iterator();
        while (mainIt.hasNext()){
            mainItem = (Simulation)mainIt.next();
            if (mainItem.getType().equalsIgnoreCase("pay")){
                localIt = lst.iterator();
                while (localIt.hasNext()){
                    localItem = (Simulation)localIt.next();
                    if (localItem.getFixtureId() == mainItem.getFixtureId()){
                        mainItem.setIdealPayment(localItem.getOdd() * localItem.getIdealBet());
                        mainItem.setActualPayment(localItem.getOdd() * (localItem.getActualBet() + localItem.getAddlProfit()));
                        break;
                    }
                }
            }            
        }    
    }
    
    private void setBalance(List<Simulation> lst){
        Simulation mainItem;
        float bankroll1 = Float.parseFloat(txtBankroll.getText());
        float bankroll2 = bankroll1;
        Iterator mainIt = lst.iterator();
        while (mainIt.hasNext()){
            mainItem = (Simulation)mainIt.next();
            bankroll1 = bankroll1 - mainItem.getIdealBet() + mainItem.getIdealPayment();
            mainItem.setIdealBalance(bankroll1);
            bankroll2 = bankroll2 - mainItem.getActualBet() + mainItem.getActualPayment();
            mainItem.setActualBalance(bankroll2);
            mainItem.setLevel(bankroll1 - bankroll2);
        }
    }
}
