/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package soccer.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ListSelectionModel;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import javax.swing.table.TableModel;
import security.entities.Item;
import security.entities.UserRight;
import soccer.database.DBTableData;
import soccer.models.TableDataTableModel;
import utils.FloatRenderer;
import utils.TableColumnAdjuster;
import utils.TimestampRenderer;

/**
 *
 * @author Administrator
 */
public class FrmTableMask extends javax.swing.JInternalFrame implements ActionListener{

    /**
     * Creates new form FrmUsers
     */
    public FrmTableMask(UserRight right, Item user) {
        initComponents();
        myInitComponents(right, user);
    }

    /**
     * This method is called fromDate within the constructor toDate initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrp1 = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dtpDateFrom = new com.toedter.calendar.JDateChooser();
        spnFrom = new javax.swing.JSpinner();
        spnTo = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        dtpDateTo = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnGo = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        tblPNPN = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        tblPNPP = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        tblPNNN = new javax.swing.JTable();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane18 = new javax.swing.JScrollPane();
        tblPPPN = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblNNPN = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNNNN = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        tblPNNP = new javax.swing.JTable();
        jPanel17 = new javax.swing.JPanel();
        jScrollPane17 = new javax.swing.JScrollPane();
        tblPPPP = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblNNPP = new javax.swing.JTable();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane15 = new javax.swing.JScrollPane();
        tblPPNN = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblNPPN = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNNNP = new javax.swing.JTable();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane16 = new javax.swing.JScrollPane();
        tblPPNP = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblNPNN = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblNPPP = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblNPNP = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Table Data");
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(1300, 680));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter:"));

        jLabel1.setText("Date From:");

        dtpDateFrom.setDateFormatString("MM/dd/yyyy");

        spnFrom.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.01f));

        spnTo.setModel(new javax.swing.SpinnerNumberModel(1.0f, null, null, 0.01f));

        jLabel4.setText("Date To:");

        dtpDateTo.setDateFormatString("MM/dd/yyyy");

        jLabel6.setText("PWI To:");

        jLabel7.setText("PWI From:");

        btnGo.setText("Go");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spnTo)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(dtpDateTo, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                            .addComponent(dtpDateFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spnFrom)
                            .addComponent(btnGo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnTo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dtpDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dtpDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblPNPN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPNPN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPNPN.getTableHeader().setReorderingAllowed(false);
        jScrollPane13.setViewportView(tblPNPN);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("PNPN", jPanel12);

        tblPNPP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPNPP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPNPP.getTableHeader().setReorderingAllowed(false);
        jScrollPane14.setViewportView(tblPNPP);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("PNPP", jPanel13);

        tblPNNN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPNNN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPNNN.getTableHeader().setReorderingAllowed(false);
        jScrollPane11.setViewportView(tblPNNN);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("PNNN", jPanel10);

        tblPPPN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPPPN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPPPN.getTableHeader().setReorderingAllowed(false);
        jScrollPane18.setViewportView(tblPPPN);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane18, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane18, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("PPPN", jPanel16);

        tblNNPN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNNPN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNNPN.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tblNNPN);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("NNPN", jPanel3);

        tblNNNN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNNNN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNNNN.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblNNNN);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("NNNN", jPanel1);

        tblPNNP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPNNP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPNNP.getTableHeader().setReorderingAllowed(false);
        jScrollPane12.setViewportView(tblPNNP);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("PNNP", jPanel11);

        tblPPPP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPPPP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPPPP.getTableHeader().setReorderingAllowed(false);
        jScrollPane17.setViewportView(tblPPPP);

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("PPPP", jPanel17);

        tblNNPP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNNPP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNNPP.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(tblNNPP);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("NNPP", jPanel4);

        tblPPNN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPPNN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPPNN.getTableHeader().setReorderingAllowed(false);
        jScrollPane15.setViewportView(tblPPNN);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("PPNN", jPanel14);

        tblNPPN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNPPN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNPPN.getTableHeader().setReorderingAllowed(false);
        jScrollPane9.setViewportView(tblNPPN);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("NPPN", jPanel8);

        tblNNNP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNNNP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNNNP.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblNNNP);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("NNNP", jPanel2);

        tblPPNP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPPNP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPPNP.getTableHeader().setReorderingAllowed(false);
        jScrollPane16.setViewportView(tblPPNP);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("PPNP", jPanel15);

        tblNPNN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNPNN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNPNN.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(tblNPNN);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("NPNN", jPanel7);

        tblNPPP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNPPP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNPPP.getTableHeader().setReorderingAllowed(false);
        jScrollPane10.setViewportView(tblNPPP);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("NPPP", jPanel9);

        tblNPNP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNPNP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNPNP.getTableHeader().setReorderingAllowed(false);
        jScrollPane8.setViewportView(tblNPNP);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("NPNP", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGo;
    private javax.swing.ButtonGroup btnGrp1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private com.toedter.calendar.JDateChooser dtpDateFrom;
    private com.toedter.calendar.JDateChooser dtpDateTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JSpinner spnFrom;
    private javax.swing.JSpinner spnTo;
    private javax.swing.JTable tblNNNN;
    private javax.swing.JTable tblNNNP;
    private javax.swing.JTable tblNNPN;
    private javax.swing.JTable tblNNPP;
    private javax.swing.JTable tblNPNN;
    private javax.swing.JTable tblNPNP;
    private javax.swing.JTable tblNPPN;
    private javax.swing.JTable tblNPPP;
    private javax.swing.JTable tblPNNN;
    private javax.swing.JTable tblPNNP;
    private javax.swing.JTable tblPNPN;
    private javax.swing.JTable tblPNPP;
    private javax.swing.JTable tblPPNN;
    private javax.swing.JTable tblPPNP;
    private javax.swing.JTable tblPPPN;
    private javax.swing.JTable tblPPPP;
    // End of variables declaration//GEN-END:variables

    private DBTableData dbRawData;
    private UserRight right;
    private Item user;
    
    private void myInitComponents(UserRight right, Item user) {
        this.user = user;
        this.right = right;
        dbRawData = new DBTableData();

        tblNNNN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNNNN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNNNN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblNNNP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNNNP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNNNP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblNNPN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNNPN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNNPN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        tblNNPP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNNPP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNNPP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblNPNN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNPNN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNPNN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblNPNP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNPNP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNPNP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblNPPN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNPPN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNPPN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        tblNPPP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNPPP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNPPP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        tblPNNN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPNNN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPNNN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblPNNP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPNNP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPNNP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblPNPN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPNPN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPNPN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        tblPNPP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPNPP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPNPP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        tblPPNN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPPNN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPPNN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblPPNP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPPNP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPPNP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblPPPN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPPPN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPPPN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        tblPPPP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPPPP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPPPP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        setRangeDate();
        
        btnGo.setActionCommand("Go");
        btnGo.addActionListener(this); 
    }
    
    private void setRangeDate(){
        Calendar c = Calendar.getInstance();
        c.set( Calendar.HOUR_OF_DAY, 23);
        c.set( Calendar.MINUTE, 59);
        c.set( Calendar.SECOND, 59);
        c.set( Calendar.MILLISECOND, 0);
        Date toDate = c.getTime();
        Date fromDate = new Date();
        long ThreeMonthsMiliSecs = (long)90 * (long)24 * (long)60 * (long)60 * (long)1000;
        long cTime = toDate.getTime();
        long beforeThreeMonths = cTime - ThreeMonthsMiliSecs; 
        fromDate.setTime(beforeThreeMonths);
        dtpDateFrom.setDate(fromDate);
        dtpDateTo.setDate(toDate);
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        loadData();
    }
    
    private void loadData(){
        Timestamp from = new Timestamp(dtpDateFrom.getDate().getTime());
        Timestamp to = new Timestamp(dtpDateTo.getDate().getTime());

        // Filling table tblData
        tblNNNN.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "NNNN")));
        TableColumnAdjuster taData1 = new TableColumnAdjuster(tblNNNN);
        taData1.setOnlyAdjustLarger(false);
        taData1.adjustColumns();
        TableModel tableModel = tblNNNN.getModel();
        if (tableModel.getRowCount() > 0) {
            tblNNNN.setRowSelectionInterval(0, 0);
        }
        
        tblNNNP.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "NNNP")));
        TableColumnAdjuster taData2 = new TableColumnAdjuster(tblNNNP);
        taData2.setOnlyAdjustLarger(false);
        taData2.adjustColumns();
        tableModel = tblNNNP.getModel();
        if (tableModel.getRowCount() > 0) {
            tblNNNP.setRowSelectionInterval(0, 0);
        }

        tblNNPN.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "NNPN")));
        TableColumnAdjuster taData3 = new TableColumnAdjuster(tblNNPN);
        taData3.setOnlyAdjustLarger(false);
        taData3.adjustColumns();
        tableModel = tblNNPN.getModel();
        if (tableModel.getRowCount() > 0) {
            tblNNPN.setRowSelectionInterval(0, 0);
        }
        
        tblNNPP.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "NNPP")));
        TableColumnAdjuster taData4 = new TableColumnAdjuster(tblNNPP);
        taData4.setOnlyAdjustLarger(false);
        taData4.adjustColumns();
        tableModel = tblNNPP.getModel();
        if (tableModel.getRowCount() > 0) {
            tblNNPP.setRowSelectionInterval(0, 0);
        }
        
        tblNPNN.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "NPNN")));
        TableColumnAdjuster taData5 = new TableColumnAdjuster(tblNPNN);
        taData5.setOnlyAdjustLarger(false);
        taData5.adjustColumns();
        tableModel = tblNPNN.getModel();
        if (tableModel.getRowCount() > 0) {
            tblNPNN.setRowSelectionInterval(0, 0);
        }
        
        tblNPNP.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "NPNP")));
        TableColumnAdjuster taData6 = new TableColumnAdjuster(tblNPNP);
        taData6.setOnlyAdjustLarger(false);
        taData6.adjustColumns();
        tableModel = tblNPNP.getModel();
        if (tableModel.getRowCount() > 0) {
            tblNPNP.setRowSelectionInterval(0, 0);
        }
        
        tblNPPN.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "NPPN")));
        TableColumnAdjuster taData7 = new TableColumnAdjuster(tblNPPN);
        taData7.setOnlyAdjustLarger(false);
        taData7.adjustColumns();
        tableModel = tblNPPN.getModel();
        if (tableModel.getRowCount() > 0) {
            tblNPPN.setRowSelectionInterval(0, 0);
        }
        
        tblNPPP.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "NPPP")));
        TableColumnAdjuster taData8 = new TableColumnAdjuster(tblNPPP);
        taData8.setOnlyAdjustLarger(false);
        taData8.adjustColumns();
        tableModel = tblNPPP.getModel();
        if (tableModel.getRowCount() > 0) {
            tblNPPP.setRowSelectionInterval(0, 0);
        }
        
        tblPNNN.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "PNNN")));
        TableColumnAdjuster taData9 = new TableColumnAdjuster(tblPNNN);
        taData9.setOnlyAdjustLarger(false);
        taData9.adjustColumns();
        tableModel = tblPNNN.getModel();
        if (tableModel.getRowCount() > 0) {
            tblPNNN.setRowSelectionInterval(0, 0);
        }
        
        tblPNNP.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "PNNP")));
        TableColumnAdjuster taData10 = new TableColumnAdjuster(tblPNNP);
        taData10.setOnlyAdjustLarger(false);
        taData10.adjustColumns();
        tableModel = tblPNNP.getModel();
        if (tableModel.getRowCount() > 0) {
            tblPNNP.setRowSelectionInterval(0, 0);
        }
        
        tblPNPN.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "PNPN")));
        TableColumnAdjuster taData11 = new TableColumnAdjuster(tblPNPN);
        taData11.setOnlyAdjustLarger(false);
        taData11.adjustColumns();
        tableModel = tblPNPN.getModel();
        if (tableModel.getRowCount() > 0) {
            tblPNPN.setRowSelectionInterval(0, 0);
        }
        
        tblPNPP.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "PNPP")));
        TableColumnAdjuster taData12 = new TableColumnAdjuster(tblPNPP);
        taData12.setOnlyAdjustLarger(false);
        taData12.adjustColumns();
        tableModel = tblPNPP.getModel();
        if (tableModel.getRowCount() > 0) {
            tblPNPP.setRowSelectionInterval(0, 0);
        }
        
        tblPPNN.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "PPNN")));
        TableColumnAdjuster taData13 = new TableColumnAdjuster(tblPPNN);
        taData13.setOnlyAdjustLarger(false);
        taData13.adjustColumns();
        tableModel = tblPPNN.getModel();
        if (tableModel.getRowCount() > 0) {
            tblPPNN.setRowSelectionInterval(0, 0);
        }
        
        tblPPNP.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "PPNP")));
        TableColumnAdjuster taData14 = new TableColumnAdjuster(tblPPNP);
        taData14.setOnlyAdjustLarger(false);
        taData14.adjustColumns();
        tableModel = tblPPNP.getModel();
        if (tableModel.getRowCount() > 0) {
            tblPPNP.setRowSelectionInterval(0, 0);
        }
        
        tblPPPN.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "PPPN")));
        TableColumnAdjuster taData15 = new TableColumnAdjuster(tblPPPN);
        taData15.setOnlyAdjustLarger(false);
        taData15.adjustColumns();
        tableModel = tblPPPN.getModel();
        if (tableModel.getRowCount() > 0) {
            tblPPPN.setRowSelectionInterval(0, 0);
        }
        
        tblPPPP.setModel(new TableDataTableModel(dbRawData.getTableDataMask(from, to, (Float)spnFrom.getValue(), (Float)spnTo.getValue(), "PPPP")));
        TableColumnAdjuster taData16 = new TableColumnAdjuster(tblPPPP);
        taData16.setOnlyAdjustLarger(false);
        taData16.adjustColumns();
        tableModel = tblPPPP.getModel();
        if (tableModel.getRowCount() > 0) {
            tblPPPP.setRowSelectionInterval(0, 0);
        }

    }
    
}
