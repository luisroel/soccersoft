/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package soccer.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import soccer.database.DBAssociation;
import security.entities.Item;
import security.entities.Status;
import soccer.entities.Association;
import security.entities.TrackChange;
import security.entities.UserRight;
import security.models.StatusComboBoxModel;
import soccer.entities.Confederation;
import soccer.entities.Country;
import soccer.models.AssociationListModel;
import soccer.models.ConfederationComboBoxModel;
import soccer.models.CountryComboBoxModel;

/**
 *
 * @author Administrator
 */
public class FrmAssociation extends javax.swing.JInternalFrame implements ActionListener, ItemListener, ListSelectionListener {

    /**
     * Creates new form FrmObject
     */
    public FrmAssociation(UserRight right, Item user) {
        initComponents();
        myInitComponents(right, user);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cmbStatus = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstAssociation = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtEntryUser = new javax.swing.JTextField();
        txtModUser = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtEntryDate = new javax.swing.JTextField();
        txtModDate = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        chkActive = new javax.swing.JCheckBox();
        btnNew = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtName = new javax.swing.JTextArea();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtShortName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cmbConfederation = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        cmbCountry = new javax.swing.JComboBox();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Associations");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter:"));

        cmbStatus.setName(""); // NOI18N

        jScrollPane1.setViewportView(lstAssociation);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE))
                .addGap(0, 9, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Change info:"));

        jLabel4.setText("Entry User:");

        jLabel5.setText("Mod. User:");

        txtEntryUser.setEnabled(false);

        txtModUser.setEnabled(false);

        jLabel6.setText("Entry Date:");

        jLabel7.setText("Mod. Date:");

        txtEntryDate.setEnabled(false);

        txtModDate.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEntryDate)
                    .addComponent(txtEntryUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtModUser)
                    .addComponent(txtModDate))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEntryUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtModUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEntryDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtModDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Association info:"));

        jLabel1.setText("Id:");

        txtId.setEnabled(false);

        chkActive.setText("Active");
        chkActive.setEnabled(false);

        btnNew.setText("New");

        jLabel2.setText("Name:");

        jLabel3.setText("Description:");

        txtName.setColumns(20);
        txtName.setLineWrap(true);
        txtName.setRows(5);
        txtName.setEnabled(false);
        jScrollPane2.setViewportView(txtName);

        btnEdit.setText("Edit");

        btnDelete.setText("Delete");

        jLabel8.setText("Confederation:");

        jLabel9.setText("Country:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel2)
                                .addGap(4, 4, 4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel3)))
                    .addComponent(jLabel9))
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmbConfederation, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkActive))
                    .addComponent(txtShortName, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                    .addComponent(cmbCountry, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(37, 37, 37)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNew, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnEdit, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDelete, btnEdit, btnNew});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEdit))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(chkActive))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtShortName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbConfederation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDelete)
                        .addComponent(cmbCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel9))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNew;
    private javax.swing.JCheckBox chkActive;
    private javax.swing.JComboBox cmbConfederation;
    private javax.swing.JComboBox cmbCountry;
    private javax.swing.JComboBox cmbStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lstAssociation;
    private javax.swing.JTextField txtEntryDate;
    private javax.swing.JTextField txtEntryUser;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtModDate;
    private javax.swing.JTextField txtModUser;
    private javax.swing.JTextArea txtName;
    private javax.swing.JTextField txtShortName;
    // End of variables declaration//GEN-END:variables
    
    private int action;
    private DBAssociation dbAssociation;
    private UserRight right;
    private Item user;
    
    private void myInitComponents(UserRight right, Item user) {
        this.user = user;
        this.right = right;
        setNormalScenario();

        dbAssociation = new DBAssociation();
        btnNew.setActionCommand("New");
        btnNew.addActionListener(this);
        btnEdit.setActionCommand("Edit");
        btnEdit.addActionListener(this);
        btnDelete.setActionCommand("Delete");
        btnDelete.addActionListener(this);
        cmbConfederation.setModel(new ConfederationComboBoxModel(1));          // only active objects
        cmbCountry.setModel(new CountryComboBoxModel(1));          // only active objects
        cmbStatus.addItemListener(this);
        lstAssociation.addListSelectionListener(this);
        
        loadStatus();
    }

    private void setNormalScenario(){
        cmbStatus.setEnabled(true);
        lstAssociation.setEnabled(true);
        chkActive.setEnabled(false);
        txtShortName.setEnabled(false);
        txtName.setEnabled(false);
        cmbConfederation.setEnabled(false);
        cmbCountry.setEnabled(false);
        
        btnNew.setEnabled(right.getIsCreated());
        btnEdit.setEnabled(right.getIsUpdated());
        btnDelete.setEnabled(right.getIsDeleted());
        
        btnNew.setText("New");
        btnEdit.setText("Edit");
        
        action = 0;         // no action
    }
    
    private void loadStatus(){
        cmbStatus.setModel(new StatusComboBoxModel());
        cmbStatus.setSelectedIndex(1);
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getStateChange() == ItemEvent.SELECTED){
            loadAssociations();
        }
    }

    private void loadAssociations(){
        if (cmbStatus.getModel().getSize() > 0) {
            Status status = (Status)cmbStatus.getSelectedItem();
            lstAssociation.setModel(new AssociationListModel(dbAssociation.getList(status.getId())));
            if (lstAssociation.getModel().getSize() > 0){
                lstAssociation.setSelectedIndex(0);
            } else {
                // clear data fields
                clearFields();
            }
        } else {
            // clear list and data fields
        }
    }

    private void clearFields(){
        txtId.setText("");
        txtShortName.setText("");
        txtName.setText("");
        cmbConfederation.setSelectedIndex(-1);
        cmbCountry.setSelectedIndex(-1);
        chkActive.setSelected(true);
        txtEntryUser.setText("");
        txtEntryDate.setText("");
        txtModUser.setText("");
        txtModDate.setText("");
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        loadDetail();
    }

    private void loadDetail(){
        if (!lstAssociation.isSelectionEmpty()){
            Association obj = (Association)lstAssociation.getSelectedValue();
            txtId.setText(Long.toString(obj.getId()));
            txtShortName.setText(obj.getShortName());
            txtName.setText(obj.getName());
            setCmbConfederation(obj.getConfederation().getId());
            setCmbCountry(obj.getCountry().getId());
            chkActive.setSelected(obj.getIsActive());
            txtEntryUser.setText(obj.getTrack().getEntryUser().getName());
            txtEntryDate.setText(new SimpleDateFormat("MM/dd/yyyy hh:mm:ss").format(obj.getTrack().getEntryDate()));
            txtModUser.setText(obj.getTrack().getModUser().getName());
            txtModDate.setText(new SimpleDateFormat("MM/dd/yyyy hh:mm:ss").format(obj.getTrack().getModDate()));
        }        
    }
    
    private void setCmbConfederation(long confederationId){
        int index = -1;
        Confederation obj;
        for (int i=0;i<cmbConfederation.getItemCount() && index == -1;i++){
            obj = (Confederation)cmbConfederation.getItemAt(i);
            if (obj.getId()== confederationId){
                index = i;
            }
        }
        cmbConfederation.setSelectedIndex(index);
        cmbConfederation.repaint();
    }

    private void setCmbCountry(long countryId){
        int index = -1;
        Country obj;
        for (int i=0;i<cmbCountry.getItemCount() && index == -1;i++){
            obj = (Country)cmbCountry.getItemAt(i);
            if (obj.getId()== countryId){
                index = i;
            }
        }
        cmbCountry.setSelectedIndex(index);
        cmbCountry.repaint();
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (null != e.getActionCommand()){
            switch (e.getActionCommand()) {
                case "New":
                    newRecord();
                    break;
                case "Edit":
                    editRecord();
                    break;
                case "Delete":
                    deleteRecord();
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Action not identified", "Unkown", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        }
    }

    private void newRecord() {
        if (action == 0){
            setNewScenario();
        }else{
            String msg = validateData();
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            }else if (action == 1){                  // insert action
                msg = insertRecord();
                if (msg.isEmpty()){
                    setNormalScenario();
                    loadAssociations();
                    JOptionPane.showMessageDialog(this, "Record created succesfully!", "New", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            }else{                                // update action
                msg = updateRecord();
                if (msg.isEmpty()){
                    setNormalScenario();
                    updateRow();
                    JOptionPane.showMessageDialog(this, "Record updated succesfully!", "Edit", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void setNewScenario(){
        cmbStatus.setEnabled(false);
        lstAssociation.setEnabled(false);
        chkActive.setEnabled(false);
        txtShortName.setEnabled(true);
        txtName.setEnabled(true);
        cmbConfederation.setEnabled(true);
        cmbCountry.setEnabled(true);
        btnNew.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(false);
        
        btnNew.setText("Save");
        btnEdit.setText("Cancel");
        
        clearFields();
        action = 1;     // new action
    }
    
    private String validateData() {
        String msg;
        if (txtShortName.getText().equals("")){
            msg = "Name field cannot be empty";
        } else if (txtName.getText().equals("")){
            msg = "Description field cannot be empty";
        } else if (cmbConfederation.getSelectedIndex() < 0){
            msg = "Confederation field has not been selected.";
        } else if (cmbCountry.getSelectedIndex() < 0){
            msg = "Country field has not been selected.";
        } else {
            msg = "";
        }
        return msg;
    }

    private String insertRecord() {
        Confederation confederation = (Confederation)cmbConfederation.getSelectedItem();
        Country country = (Country)cmbCountry.getSelectedItem();
        Association obj = new Association(
              -1
            , txtShortName.getText()
            , txtName.getText()
            , chkActive.isSelected()
            , new Item(confederation.getId(), confederation.getShortName())
            , new Item(country.getId(), country.getShortName())
            , new TrackChange(null, user, null, null)
        );
        
        return dbAssociation.insert(obj);
    }
    
    private String updateRecord() {
        Confederation confederation = (Confederation)cmbConfederation.getSelectedItem();
        Country country = (Country)cmbCountry.getSelectedItem();
        Association obj = new Association(
              Long.parseLong(txtId.getText())
            , txtShortName.getText()
            , txtName.getText()
            , chkActive.isSelected()
            , new Item(confederation.getId(), confederation.getShortName())
            , new Item(country.getId(), country.getShortName())
            , new TrackChange(null, null, null, user)
        );
        
        return dbAssociation.update(obj);
    }

    private void updateRow(){
        Date date = new Date();
        Confederation confederation = (Confederation)cmbConfederation.getSelectedItem();
        Country country = (Country)cmbCountry.getSelectedItem();
        Association obj = (Association)lstAssociation.getSelectedValue();
        obj.setShortName(txtShortName.getText());
        obj.setName(txtName.getText());
        obj.setConfederation(new Item(confederation.getId(), confederation.getName()));
        obj.setConfederation(new Item(country.getId(), country.getName()));
        obj.setIsActive(chkActive.isSelected());
        obj.getTrack().setModUser(user);
        obj.getTrack().setModDate(new Timestamp(date.getTime()));
        txtModUser.setText(user.getName());
        txtModDate.setText(new SimpleDateFormat("MM/dd/yyyy hh:mm:ss").format(date));
    }
    
    private void editRecord() {
        if (action==0){
            setEditScenario();
        } else {
            setNormalScenario();
            loadDetail();
        }
    }

    private void setEditScenario(){
        cmbStatus.setEnabled(false);
        lstAssociation.setEnabled(false);
        chkActive.setEnabled(true);
        txtShortName.setEnabled(true);
        txtName.setEnabled(true);
        cmbConfederation.setEnabled(true);
        cmbCountry.setEnabled(true);
        btnNew.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(false);
        
        btnNew.setText("Save");
        btnEdit.setText("Cancel");
        
        action = 2;     // edit action
    }
    
    private void deleteRecord() {
        int ans = JOptionPane.showOptionDialog(this
                , "You are about to delete the object \"" + txtShortName.getText() + "\".\nAre you sure?"
                , "Delete"
                , JOptionPane.OK_CANCEL_OPTION
                , JOptionPane.QUESTION_MESSAGE
                , null
                , null
                , null);
        if (ans == JOptionPane.OK_OPTION){
            String msg = dbAssociation.delete(Long.parseLong(txtId.getText()));
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                loadAssociations();
                JOptionPane.showMessageDialog(this, "Record deleted succesfully!", "Delete", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
}
