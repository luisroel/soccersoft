/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package soccer.gui;

import java.awt.event.ActionEvent;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.event.ActionListener;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import security.entities.Item;
import security.entities.TrackChange;
import security.entities.UserRight;
import security.models.ItemListModel;
import soccer.database.DBFixture;
import soccer.database.DBTeam;
import soccer.entities.Fixture;
import soccer.entities.FixtureStatus;
import soccer.entities.Referee;
import soccer.entities.Stadium;
import soccer.entities.Team;
import soccer.models.FixtureStatusComboBoxModel;
import soccer.models.FixtureTableModel;
import soccer.models.RefereeComboBoxModel;
import soccer.models.StadiumComboBoxModel;
import soccer.models.TeamComboBoxModel;
import utils.FloatRenderer;
import utils.TableColumnAdjuster;
import utils.TimestampRenderer;

/**
 *
 * @author Administrator
 */
public class FrmResults extends javax.swing.JInternalFrame implements ActionListener{

    /**
     * Creates new form FrmUsers
     */
    public FrmResults(UserRight right, Item user) {
        initComponents();
        myInitComponents(right, user);
    }

    /**
     * This method is called fromDate within the constructor toDate initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstTournament = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        lstAssociation = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        dtpDate = new com.toedter.calendar.JDateChooser();
        btnUpdateWeeknoSelected = new javax.swing.JButton();
        btnUpdateCurrentSelected = new javax.swing.JButton();
        btnUpdateAllSelected = new javax.swing.JButton();
        btnUpdateWeeknoAll = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        btnUpdateCurrentAll = new javax.swing.JButton();
        btnUpdateAllAll = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFixtures = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        cmbReferee = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        spnRound = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        cmbStadium = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        spnDateTime = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        cmbFixtureStatus = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        spnWeekNo = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        cmbHome = new javax.swing.JComboBox();
        spnScoredHome = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        cmbVisitor = new javax.swing.JComboBox();
        spnScoredVisitor = new javax.swing.JSpinner();
        jPanel11 = new javax.swing.JPanel();
        txtOdd_1 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtOdd_X = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txtOdd_2 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        txtTendency = new javax.swing.JTextField();
        btnEditI = new javax.swing.JButton();
        btnDeleteI = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtEntryUser = new javax.swing.JTextField();
        txtEntryDate = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtModUser = new javax.swing.JTextField();
        txtModDate = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Results");
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(1300, 680));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter:"));

        jLabel2.setText("Association:");

        jLabel3.setText("Tournament:");

        jScrollPane4.setViewportView(lstTournament);

        jScrollPane6.setViewportView(lstAssociation);

        jLabel1.setText("Date:");

        dtpDate.setDateFormatString("MM/dd/yyyy");

        btnUpdateWeeknoSelected.setText("Selected");

        btnUpdateCurrentSelected.setText("Selected");

        btnUpdateAllSelected.setText("Selected");

        btnUpdateWeeknoAll.setText("All");

        jLabel4.setText("Week No:");

        jLabel5.setText("Weekly Stats Current Week:");

        jLabel15.setText("Weekly Stats All Weeks\n:");

        btnUpdateCurrentAll.setText("All");

        btnUpdateAllAll.setText("All");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(btnUpdateCurrentSelected)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUpdateCurrentAll, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnUpdateWeeknoSelected)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUpdateWeeknoAll, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)))
                        .addGap(35, 35, 35))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(btnUpdateAllSelected)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUpdateAllAll, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dtpDate, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnUpdateAllAll, btnUpdateCurrentAll, btnUpdateWeeknoAll, btnUpdateWeeknoSelected});

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dtpDate, jLabel1, jLabel15, jLabel2, jLabel3, jLabel4, jLabel5, jScrollPane4, jScrollPane6});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dtpDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateWeeknoSelected)
                    .addComponent(btnUpdateWeeknoAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateCurrentSelected)
                    .addComponent(btnUpdateCurrentAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateAllSelected)
                    .addComponent(btnUpdateAllAll))
                .addContainerGap())
        );

        tblFixtures.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblFixtures.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblFixtures.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblFixtures);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Fixtures", jPanel4);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("General"));

        jLabel6.setText("Id:");

        txtId.setEnabled(false);

        jLabel12.setText("Referee:");

        jLabel7.setText("Round:");

        spnRound.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 1));

        jLabel11.setText("Stadium:");

        jLabel8.setText("Date:");

        spnDateTime.setModel(new javax.swing.SpinnerDateModel());
        spnDateTime.setEditor(new javax.swing.JSpinner.DateEditor(spnDateTime, "MM/dd/yy HH:mm"));

        jLabel13.setText("Status:");

        jLabel14.setText("Week:");

        spnWeekNo.setModel(new javax.swing.SpinnerNumberModel(1, 1, 99, 1));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(94, 94, 94)
                                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(4, 4, 4))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(2, 2, 2)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbReferee, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(spnWeekNo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbFixtureStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnRound, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(94, 94, 94)
                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbStadium, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)))
                .addGap(18, 18, 18))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbReferee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spnRound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbStadium, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spnDateTime)
                        .addComponent(spnWeekNo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbFixtureStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {spnDateTime, spnRound, spnWeekNo});

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Teams"));

        jLabel9.setText("Home:");

        spnScoredHome.setModel(new javax.swing.SpinnerNumberModel(0, 0, 25, 1));

        jLabel10.setText("Visitor:");

        spnScoredVisitor.setModel(new javax.swing.SpinnerNumberModel(0, 0, 25, 1));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbHome, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbVisitor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spnScoredHome)
                    .addComponent(spnScoredVisitor))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnScoredHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbVisitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnScoredVisitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jLabel9.getAccessibleContext().setAccessibleDescription("");
        jLabel10.getAccessibleContext().setAccessibleDescription("");

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Odds:"));

        jLabel20.setText("1:");

        jLabel21.setText("X:");

        jLabel22.setText("2:");

        jLabel23.setText("Tendency:");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOdd_1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOdd_X, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOdd_2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTendency, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtOdd_1, txtOdd_2, txtOdd_X, txtTendency});

        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel23)
                        .addComponent(txtTendency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtOdd_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel22)
                        .addComponent(txtOdd_X, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel21))
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtOdd_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel20)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnEditI.setText("Edit");

        btnDeleteI.setText("Delete");

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Change Info"));

        jLabel16.setText("Entry User:");

        jLabel18.setText("Entry Date:");

        txtEntryUser.setEnabled(false);

        txtEntryDate.setEnabled(false);

        jLabel17.setText("Mod. User:");

        jLabel19.setText("Mod. Date:");

        txtModUser.setEnabled(false);

        txtModDate.setEnabled(false);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEntryUser)
                    .addComponent(txtEntryDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtModUser)
                    .addComponent(txtModDate))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEntryUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(txtModUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEntryDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(txtModDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 607, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnDeleteI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEditI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(107, 107, 107))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnEditI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteI))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(123, 123, 123))
        );

        jTabbedPane2.addTab("Details", jPanel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane2))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteI;
    private javax.swing.JButton btnEditI;
    private javax.swing.JButton btnUpdateAllAll;
    private javax.swing.JButton btnUpdateAllSelected;
    private javax.swing.JButton btnUpdateCurrentAll;
    private javax.swing.JButton btnUpdateCurrentSelected;
    private javax.swing.JButton btnUpdateWeeknoAll;
    private javax.swing.JButton btnUpdateWeeknoSelected;
    private javax.swing.JComboBox cmbFixtureStatus;
    private javax.swing.JComboBox cmbHome;
    private javax.swing.JComboBox cmbReferee;
    private javax.swing.JComboBox cmbStadium;
    private javax.swing.JComboBox cmbVisitor;
    private com.toedter.calendar.JDateChooser dtpDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JList lstAssociation;
    private javax.swing.JList lstTournament;
    private javax.swing.JSpinner spnDateTime;
    private javax.swing.JSpinner spnRound;
    private javax.swing.JSpinner spnScoredHome;
    private javax.swing.JSpinner spnScoredVisitor;
    private javax.swing.JSpinner spnWeekNo;
    private javax.swing.JTable tblFixtures;
    private javax.swing.JTextField txtEntryDate;
    private javax.swing.JTextField txtEntryUser;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtModDate;
    private javax.swing.JTextField txtModUser;
    private javax.swing.JTextField txtOdd_1;
    private javax.swing.JTextField txtOdd_2;
    private javax.swing.JTextField txtOdd_X;
    private javax.swing.JTextField txtTendency;
    // End of variables declaration//GEN-END:variables

    private int action;
    private DBFixture dbFixture;
    private UserRight right;
    private Item user;
    private Timestamp fromDate, toDate;
    
    private void myInitComponents(UserRight right, Item user) {
        this.user = user;
        this.right = right;
        dbFixture = new DBFixture();
        DBTeam dbTeam = new DBTeam();       
        dtpDate.addPropertyChangeListener("date", (evt) -> {loadAssociations();});
        lstAssociation.addListSelectionListener(new AssociationListSelection());
        lstTournament.addListSelectionListener(new TournamentListSelection());
        btnUpdateWeeknoSelected.setActionCommand("UpdateWS");
        btnUpdateWeeknoSelected.addActionListener(this);
        btnUpdateWeeknoAll.setActionCommand("UpdateWA");
        btnUpdateWeeknoAll.addActionListener(this);
        
        btnUpdateCurrentSelected.setActionCommand("UpdateCS");
        btnUpdateCurrentSelected.addActionListener(this);
        btnUpdateCurrentAll.setActionCommand("UpdateCA");
        btnUpdateCurrentAll.addActionListener(this);


        btnUpdateAllSelected.setActionCommand("UpdateAS");
        btnUpdateAllSelected.addActionListener(this);
        btnUpdateAllAll.setActionCommand("UpdateAA");
        btnUpdateAllAll.addActionListener(this);
        
        btnEditI.setActionCommand("EditI");
        btnEditI.addActionListener(this);
        btnDeleteI.setActionCommand("DeleteI");
        btnDeleteI.addActionListener(this);
        
        tblFixtures.getSelectionModel().addListSelectionListener(new TableSelection());
        tblFixtures.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblFixtures.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd/yy HH:mm"));
        tblFixtures.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        cmbFixtureStatus.setModel(new FixtureStatusComboBoxModel(1));
        cmbReferee.setModel(new RefereeComboBoxModel(1));
        cmbStadium.setModel(new StadiumComboBoxModel(1));
        cmbHome.setModel(new TeamComboBoxModel(dbTeam.getList(1)));
        cmbVisitor.setModel(new TeamComboBoxModel(dbTeam.getList(1)));

        Calendar c = Calendar.getInstance();
        c.set( Calendar.HOUR_OF_DAY,0);
        c.set( Calendar.MINUTE, 0);
        c.set( Calendar.SECOND, 0);
        c.set( Calendar.MILLISECOND, 0);
        dtpDate.setDate(c.getTime());
        setNormalScenario();
    }
    
    private void loadAssociations(){
        setRangeDate();
        lstAssociation.setModel(new ItemListModel(dbFixture.getAssociationListByDate(fromDate, toDate)));
        if (lstAssociation.getModel().getSize() > 0){
            lstAssociation.setSelectedIndex(0);
        }
    }

    private void setRangeDate(){
        long oneDay = (
                      (23*60*60)    // 23 Hours in seconds
                    + (59*60)       // 59 minutes in secods
                    + 59            // 59 seconds
                    ) * 1000;       // in milisecods
        
        Date selectedDate = dtpDate.getDate();
        // Getting filter values
        fromDate = new Timestamp(selectedDate.getTime());
        toDate = new Timestamp(selectedDate.getTime() + oneDay);
    }
    
    private class AssociationListSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                if (lstAssociation.getSelectedIndex() != -1){                   
                    loadTournaments();
                }
            }
        }
    }
    
    private void loadTournaments(){
        setRangeDate();
        Item association = (Item)lstAssociation.getSelectedValue();
        lstTournament.setModel(new ItemListModel(dbFixture.getTournamentListByDate(fromDate, toDate, association.getId())));
        if (lstTournament.getModel().getSize() > 0){
            lstTournament.setSelectedIndex(0);
        }
    }
    
    private class TournamentListSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                if (lstTournament.getSelectedIndex() != -1){
                    loadFixtures();
                }
            }
        }
    }
    
    private void setNormalScenario(){
        dtpDate.setEnabled(true);
        lstAssociation.setEnabled(true);
        lstTournament.setEnabled(true);
        TableModel tableModel = tblFixtures.getModel();
        tblFixtures.setEnabled(true);

        spnDateTime.setEnabled(false);
        spnRound.setEnabled(false);
        spnWeekNo.setEnabled(false);
        cmbFixtureStatus.setEnabled(false);
        cmbHome.setEnabled(false);
        spnScoredHome.setEnabled(false);
        cmbVisitor.setEnabled(false);
        spnScoredVisitor.setEnabled(false);
        cmbReferee.setEnabled(false);
        cmbStadium.setEnabled(false);
        txtOdd_1.setEnabled(false);
        txtOdd_X.setEnabled(false);
        txtOdd_2.setEnabled(false);
        txtTendency.setEnabled(false);
	if (tableModel.getRowCount() > 0) {
            btnEditI.setEnabled(right.getIsUpdated());
            btnDeleteI.setEnabled(right.getIsDeleted());
        } else {
            btnEditI.setEnabled(false);
            btnDeleteI.setEnabled(false);
        }
        btnEditI.setText("Edit"); 
        btnDeleteI.setText("Delete");
        action = 0;         // no action
    }
    
    private void loadFixtures(){
        // loading table
        setRangeDate();
        Item association = (Item)lstAssociation.getSelectedValue();
        Item tournament = (Item)lstTournament.getSelectedValue();
        tblFixtures.setModel(new FixtureTableModel(dbFixture.getListByDates(fromDate, toDate, association.getId(), tournament.getId())));
        TableColumnAdjuster ta = new TableColumnAdjuster(tblFixtures);
        ta.setOnlyAdjustLarger(false);
        ta.adjustColumns();
        TableModel tableModel = tblFixtures.getModel();
        if (tableModel.getRowCount() > 0) {
            tblFixtures.setRowSelectionInterval(0, 0);
        } else {
            clearFixtureValues();
            btnEditI.setEnabled(false);
            btnDeleteI.setEnabled(false);
        }
    }
    
    private class TableSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                loadFixtureDetail();
            }
        }
    }

    private void loadFixtureDetail(){
        TableModel tableModel = tblFixtures.getModel();
        if (tblFixtures.getSelectedRow() != -1){
            int selectedRow = tblFixtures.getSelectedRow();
            txtId.setText(Long.toString((Long)tableModel.getValueAt(selectedRow, 0)));
            spnRound.setValue((Integer)tableModel.getValueAt(selectedRow, 3));
            
            Item status = (Item)tableModel.getValueAt(selectedRow, 4);
            setCmbFixtureStatus(status.getId());

            spnDateTime.setValue((Timestamp)tableModel.getValueAt(selectedRow, 5));
            
            Item home = (Item)tableModel.getValueAt(selectedRow, 6);
            setCmbHome(home.getId());
            
            spnScoredHome.setValue((Integer)tableModel.getValueAt(selectedRow, 7));
            spnScoredVisitor.setValue((Integer)tableModel.getValueAt(selectedRow, 8));
            
            Item visitor = (Item)tableModel.getValueAt(selectedRow, 9);
            setCmbVisitor(visitor.getId());
            
            Float Odd_1 = (Float)tableModel.getValueAt(selectedRow, 10);           
            txtOdd_1.setText(Odd_1.toString());
            Float Odd_X = (Float)tableModel.getValueAt(selectedRow, 11);
            txtOdd_X.setText(Odd_X.toString());
            Float Odd_2 = (Float)tableModel.getValueAt(selectedRow, 12);
            txtOdd_2.setText(Odd_2.toString());

            String tendency = (String)tableModel.getValueAt(selectedRow, 13);
            txtTendency.setText(tendency);
            
            Item stadium = (Item)tableModel.getValueAt(selectedRow, 14);
            setCmbStadium(stadium.getId());
            
            Item referee = (Item)tableModel.getValueAt(selectedRow, 15);
            setCmbReferee(referee.getId());
            
            spnWeekNo.setValue((Integer)tableModel.getValueAt(selectedRow, 18));
            
            TrackChange tc = (TrackChange)tableModel.getValueAt(selectedRow, 19);
            txtEntryUser.setText(tc.getEntryUser().getName());
            txtEntryDate.setText(new SimpleDateFormat("MM/dd/yy hh:mm:ss").format(tc.getEntryDate()));
            txtModUser.setText(tc.getModUser().getName());
            txtModDate.setText(new SimpleDateFormat("MM/dd/yy hh:mm:ss").format(tc.getModDate()));

            btnEditI.setEnabled(right.getIsUpdated());
            btnDeleteI.setEnabled(right.getIsDeleted());
        } else {
            clearFixtureValues();
            btnEditI.setEnabled(false);
            btnDeleteI.setEnabled(false);
        }       
    }

    private void setCmbHome(long id){
        int index = -1;
        Team obj;
        for (int i=0;i<cmbHome.getItemCount() && index == -1;i++){
            obj = (Team)cmbHome.getItemAt(i);
            if (obj.getId()== id){
                index = i;
            }
        }
        cmbHome.setSelectedIndex(index);
        cmbHome.repaint();
    }

    private void setCmbVisitor(long id){
        int index = -1;
        Team obj;
        for (int i=0;i<cmbVisitor.getItemCount() && index == -1;i++){
            obj = (Team)cmbVisitor.getItemAt(i);
            if (obj.getId()== id){
                index = i;
            }
        }
        cmbVisitor.setSelectedIndex(index);
        cmbVisitor.repaint();
    }
    
    private void setCmbFixtureStatus(long id){
        int index = -1;
        FixtureStatus obj;
        for (int i=0;i<cmbFixtureStatus.getItemCount() && index == -1;i++){
            obj = (FixtureStatus)cmbFixtureStatus.getItemAt(i);
            if (obj.getId()== id){
                index = i;
            }
        }
        cmbFixtureStatus.setSelectedIndex(index);
        cmbFixtureStatus.repaint();
    }
    
    private void setCmbStadium(long id){
        int index = -1;
        Stadium obj;
        for (int i=0;i<cmbStadium.getItemCount() && index == -1;i++){
            obj = (Stadium)cmbStadium.getItemAt(i);
            if (obj.getId()== id){
                index = i;
            }
        }
        cmbStadium.setSelectedIndex(index);
        cmbStadium.repaint();
    }

    private void setCmbReferee(long id){
        int index = -1;
        Referee obj;
        for (int i=0;i<cmbReferee.getItemCount() && index == -1;i++){
            obj = (Referee)cmbReferee.getItemAt(i);
            if (obj.getId()== id){
                index = i;
            }
        }
        cmbReferee.setSelectedIndex(index);
        cmbReferee.repaint();
    }

    private void clearFixtureValues(){
        txtId.setText("");
        spnRound.setValue(1);
        spnWeekNo.setValue(1);
        spnDateTime.setValue(new Timestamp(new Date().getTime()));
        cmbFixtureStatus.setSelectedIndex(-1);
        cmbHome.setSelectedIndex(-1);
        spnScoredHome.setValue(0);
        spnScoredVisitor.setValue(0);
        cmbVisitor.setSelectedIndex(-1);
        cmbReferee.setSelectedIndex(-1);
        cmbStadium.setSelectedIndex(-1);
        txtOdd_1.setText("");
        txtOdd_X.setText("");
        txtOdd_2.setText("");
        txtTendency.setText("");
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (null != e.getActionCommand()){
            switch (e.getActionCommand()) {
                case "UpdateWS":
                    updateWeeknoSelected();
                    break;
                case "UpdateWA":
                    updateWeeknoAll();
                    break;
                case "UpdateCS":
                    updateCurrentSelected();
                    break;
                case "UpdateCA":
                    updateCurrentAll();
                    break;
                case "UpdateAS":
                    updateAllSelected();
                    break;
                case "UpdateAA":
                    updateAllAll();
                    break;
                case "EditI":
                    editRecordI();
                    break;
                case "DeleteI":
                    deleteRecordI();
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Action not identified", "Unkown", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        }
    }
    /**
     *  Update Fixture WeekNo Of the Season Fixture Selected
     */
    private void updateWeeknoSelected(){
        TableModel tableModel = tblFixtures.getModel();
        int selectedRow = tblFixtures.getSelectedRow();
        if (selectedRow != -1 ){
            Item season = (Item)tableModel.getValueAt(selectedRow, 14);
            dbFixture.updateWeekno(season.getId());
            JOptionPane.showMessageDialog(this, "Weekno update completed!", "Completed", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No Fixture Selected", "No Action", JOptionPane.INFORMATION_MESSAGE);
        }  
    }

    /**
     * Update Fixture WeekNo Of The Season With Fixtures Within From and To Dates
     */
    private void updateWeeknoAll(){
        TableModel tableModel = tblFixtures.getModel();
        int rows = tableModel.getRowCount();
        if (rows > 0 ){
            dbFixture.updateWeeknoByDate(fromDate,toDate);
            JOptionPane.showMessageDialog(this, "Weekno update completed!", "Completed", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No Fixtures For The Date.", "No Action", JOptionPane.INFORMATION_MESSAGE);
        }  
    }

    /**
     * Create Weekly Stats Of The Season Of The Fixture Selected For The WeekNo
     */
    private void updateCurrentSelected(){
        TableModel tableModel = tblFixtures.getModel();
        int selectedRow = tblFixtures.getSelectedRow();
        if (selectedRow != -1 ){
            Item season = (Item)tableModel.getValueAt(selectedRow, 14);
            Integer weekNo = (Integer)tableModel.getValueAt(selectedRow, 16);
            dbFixture.updateWeeklyStats(season.getId(), weekNo, weekNo);
            JOptionPane.showMessageDialog(this, "Weekly stats update completed!", "Completed", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No Fixtures For The Date.", "No Action", JOptionPane.INFORMATION_MESSAGE);
        }         
    }
    
    /**
     * Create Weekly Stats Of The All Seasons And WeekNo Within From And To Dates
     */
    private void updateCurrentAll(){
        TableModel tableModel = tblFixtures.getModel();
        int rows = tableModel.getRowCount();
        if (rows > 0 ){
            dbFixture.updateWeeklyStatsByDate( fromDate, toDate, false);
            JOptionPane.showMessageDialog(this, "Weekly Stats update completed!", "Completed", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No Fixtures For The Date.", "No Action", JOptionPane.INFORMATION_MESSAGE);
        }         
    }

    /**
     * Create Weekly Stats Of The Season Fixture Selected From 1 To WeekNo
     */    
    private void updateAllSelected(){
        TableModel tableModel = tblFixtures.getModel();
        int selectedRow = tblFixtures.getSelectedRow();
        if (selectedRow != -1 ){
            Item season = (Item)tableModel.getValueAt(selectedRow, 14);
            Integer weekNo = (Integer)tableModel.getValueAt(selectedRow, 16);
            dbFixture.updateWeeklyStats(season.getId(), 1, weekNo);
            JOptionPane.showMessageDialog(this, "Weekly stats update completed!", "Completed", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No Fixtures For The Date.", "No Action", JOptionPane.INFORMATION_MESSAGE);
        }           
    }
    
    /**
     * Create Weekly Stats Of The All Seasons From 1 To WeekNo Within From And To Dates
     */
    private void updateAllAll(){
        TableModel tableModel = tblFixtures.getModel();
        int rows = tableModel.getRowCount();
        if (rows > 0 ){
            dbFixture.updateWeeklyStatsByDate( fromDate, toDate, true);
            JOptionPane.showMessageDialog(this, "Weekly stats update completed!", "Completed", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No Fixtures For The Date.", "No Action", JOptionPane.INFORMATION_MESSAGE);
        }         
    }

    private void editRecordI() {
        if (action == 0){
            setEditScenario();
        }else{
            String msg = validateFixtureData();
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            }else {                                // update action
                msg = updateFixtureRecord();
                if (msg.isEmpty()){
                    setNormalScenario();
                    updateFixtureRow();
                    JOptionPane.showMessageDialog(this, "Record updated succesfully!", "Edit", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
        
    private String validateFixtureData() {
        String msg;
        if (spnRound.getValue() == null){
            msg = "Round field cannot be empty";
        } else if (spnWeekNo.getValue() == null){
            msg = "Week no. field cannot be empty";
        } else if (spnDateTime.getValue() == null){
            msg = "Date/Time field cannot be empty";
        } else if (cmbFixtureStatus.getSelectedIndex() == -1){
            msg = "Fixture status field cannot be empty";
        } else if (cmbHome.getSelectedIndex() == -1){
            msg = "Home team field cannot be empty";
        } else if (spnScoredHome.getValue() == null){
            msg = "Scored home field cannot be empty";
        } else if (spnScoredVisitor.getValue() == null){
            msg = "Scored visitor field cannot be empty";
        } else if (cmbVisitor.getSelectedIndex() == -1){
            msg = "Visitor team field cannot be empty";
        } else if (cmbStadium.getSelectedIndex() == -1){
            msg = "Stadium field cannot be empty";
        } else if (cmbReferee.getSelectedIndex() == -1){
            msg = "Referee field cannot be empty";
        } else {
            msg = "";
        }
        return msg;
    }
    
    private String updateFixtureRecord() {
        TableModel tableModel = tblFixtures.getModel();
        int selectedRow = tblFixtures.getSelectedRow();
        Item association = (Item)tableModel.getValueAt(selectedRow, 1);
        Item tournament = (Item)tableModel.getValueAt(selectedRow, 2);
        Item season = (Item)tableModel.getValueAt(selectedRow, 16);
        Item phase = (Item)tableModel.getValueAt(selectedRow, 17);
        Team home = (Team)cmbHome.getSelectedItem();
        Team visitor = (Team)cmbVisitor.getSelectedItem();
        Stadium stadium = (Stadium)cmbStadium.getSelectedItem();
        Referee referee = (Referee)cmbReferee.getSelectedItem();
        FixtureStatus status = (FixtureStatus)cmbFixtureStatus.getSelectedItem();

        Fixture obj = new Fixture(
              Long.parseLong(txtId.getText())
            , association
            , tournament
            , season
            , phase
            , (Integer)spnRound.getValue()
            , new Timestamp(((Date)spnDateTime.getValue()).getTime())
            , new Item(home.getId(), home.getShortName())
            , (Integer)spnScoredHome.getValue()
            , new Item(visitor.getId(), visitor.getShortName())
            , (Integer)spnScoredVisitor.getValue()
            , new Item(stadium.getId(), stadium.getShortName())
            , new Item(referee.getId(), referee.getNickName())
            , new Item(status.getId(), status.getShortName())
            , Float.parseFloat(txtOdd_1.getText())
            , Float.parseFloat(txtOdd_X.getText())
            , Float.parseFloat(txtOdd_2.getText())
            , (Integer)spnWeekNo.getValue()
            , txtTendency.getText().trim()
            , new TrackChange(null, null, null, user)
        );
        
        return dbFixture.update(obj);
    }

    private void updateFixtureRow(){
        int rowSelected = tblFixtures.getSelectedRow();
        if (rowSelected != -1){
            Item item;
            tblFixtures.setValueAt((Integer)spnRound.getValue(), rowSelected, 3);

            item = (Item)tblFixtures.getValueAt(rowSelected, 4);
            item.setId(((FixtureStatus)cmbFixtureStatus.getSelectedItem()).getId());
            item.setName(((FixtureStatus)cmbFixtureStatus.getSelectedItem()).getShortName());

            Timestamp ts = (Timestamp)tblFixtures.getValueAt(rowSelected, 5);
            ts.setTime(((Date)spnDateTime.getValue()).getTime());

            item = (Item)tblFixtures.getValueAt(rowSelected, 6);
            item.setId(((Team)cmbHome.getSelectedItem()).getId());
            item.setName(((Team)cmbHome.getSelectedItem()).getShortName());
            
            tblFixtures.setValueAt((Integer)spnScoredHome.getValue(), rowSelected, 7);
            tblFixtures.setValueAt((Integer)spnScoredVisitor.getValue(), rowSelected, 8);
            
            item = (Item)tblFixtures.getValueAt(rowSelected, 9);
            item.setId(((Team)cmbVisitor.getSelectedItem()).getId());
            item.setName(((Team)cmbVisitor.getSelectedItem()).getShortName());
            
            tblFixtures.setValueAt(Float.parseFloat(txtOdd_1.getText()), rowSelected, 10);
            tblFixtures.setValueAt(Float.parseFloat(txtOdd_X.getText()), rowSelected, 11);
            tblFixtures.setValueAt(Float.parseFloat(txtOdd_2.getText()), rowSelected, 12);
            
            tblFixtures.setValueAt(txtTendency.getText().trim(), rowSelected, 13);
            
            item = (Item)tblFixtures.getValueAt(rowSelected, 14);
            item.setId(((Stadium)cmbStadium.getSelectedItem()).getId());
            item.setName(((Stadium)cmbStadium.getSelectedItem()).getShortName());

            item = (Item)tblFixtures.getValueAt(rowSelected, 15);
            item.setId(((Referee)cmbReferee.getSelectedItem()).getId());
            item.setName(((Referee)cmbReferee.getSelectedItem()).getNickName());
            
            tblFixtures.setValueAt((Integer)spnWeekNo.getValue(), rowSelected, 18);
            
            TrackChange tc = (TrackChange)tblFixtures.getValueAt(rowSelected, 19);
            tc.setModDate(new Timestamp(new Date().getTime()));
            item = tc.getModUser();
            item.setId(user.getId());
            item.setName(user.getName());
        }
    }
    
    private void setEditScenario(){
        dtpDate.setEnabled(false);
        lstAssociation.setEnabled(false);
        lstTournament.setEnabled(false);
        tblFixtures.setEnabled(false);

        spnDateTime.setEnabled(true);
        spnRound.setEnabled(true);
        spnWeekNo.setEnabled(true);
        cmbFixtureStatus.setEnabled(true);
        cmbHome.setEnabled(true);
        spnScoredHome.setEnabled(true);
        cmbVisitor.setEnabled(true);
        spnScoredVisitor.setEnabled(true);
        cmbReferee.setEnabled(true);
        cmbStadium.setEnabled(true);
        txtOdd_1.setEnabled(true);
        txtOdd_X.setEnabled(true);
        txtOdd_2.setEnabled(true);
        txtTendency.setEnabled(true);
        
        btnEditI.setEnabled(true);
        btnDeleteI.setEnabled(true);
        
        btnEditI.setText("Save");
        btnDeleteI.setText("Cancel");
        
        action = 2;     // edit action                
    }
    
    private void deleteRecordI() {
        if (action==0){
            int ans = JOptionPane.showOptionDialog(this
                    , "You are about toDate delete the Fixture Id \"" + txtId.getText() + "\".\nAre you sure?"
                    , "Delete"
                    , JOptionPane.OK_CANCEL_OPTION
                    , JOptionPane.QUESTION_MESSAGE
                    , null
                    , null
                    , null);
            if (ans == JOptionPane.OK_OPTION){
                String msg = dbFixture.delete(Long.parseLong(txtId.getText()));
                if (!msg.isEmpty()){
                    JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    loadFixtures();
                    JOptionPane.showMessageDialog(this, "Record deleted succesfully!", "Delete", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } else {
            setNormalScenario();
            loadFixtureDetail();
        }
    }
}
