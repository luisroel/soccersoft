/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package soccer.gui;

import java.awt.event.ActionEvent;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.event.ActionListener;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.TableModel;
import security.entities.Item;
import security.entities.TrackChange;
import security.entities.UserRight;
import soccer.database.DBAssociation;
import soccer.database.DBFixture;
import soccer.database.DBPhase;
import soccer.database.DBSeason;
import soccer.database.DBStat;
import soccer.database.DBTeam;
import soccer.database.DBTournament;
import soccer.entities.Association;
import soccer.entities.Fixture;
import soccer.entities.FixtureStatus;
import soccer.entities.Phase;
import soccer.entities.Referee;
import soccer.entities.Season;
import soccer.entities.Stadium;
import soccer.entities.Team;
import soccer.entities.Tournament;
import soccer.models.AssociationListModel;
import soccer.models.FixtureStatusComboBoxModel;
import soccer.models.FixtureTableModel;
import soccer.models.PhaseListModel;
import soccer.models.RefereeComboBoxModel;
import soccer.models.SeasonListModel;
import soccer.models.StadiumComboBoxModel;
import soccer.models.StandingTableModel;
import soccer.models.TeamComboBoxModel;
import soccer.models.TournamentListModel;
import utils.FloatRenderer;
import utils.TableColumnAdjuster;
import utils.TimestampRenderer;
import utils.Util;

/**
 *
 * @author Administrator
 */
public class FrmFixture extends javax.swing.JInternalFrame implements ActionListener{

    /**
     * Creates new form FrmUsers
     */
    public FrmFixture(UserRight right, Item user) {
        initComponents();
        myInitComponents(right, user);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstTournament = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lstSeason = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        lstAssociation = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        spnRoundFilter = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstPhase = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        btnAll = new javax.swing.JRadioButton();
        btnHome = new javax.swing.JRadioButton();
        btnVisitor = new javax.swing.JRadioButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFixtures = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        cmbReferee = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        spnRound = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        cmbStadium = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        spnDateTime = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        cmbFixtureStatus = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        spnWeekNo = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        cmbHome = new javax.swing.JComboBox();
        spnScoredHome = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        cmbVisitor = new javax.swing.JComboBox();
        spnScoredVisitor = new javax.swing.JSpinner();
        jPanel11 = new javax.swing.JPanel();
        txtOdd_1 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtOdd_X = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txtOdd_2 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        txtTendency = new javax.swing.JTextField();
        btnNewI = new javax.swing.JButton();
        btnEditI = new javax.swing.JButton();
        btnDeleteI = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtEntryDate = new javax.swing.JTextField();
        txtEntryUser = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtModDate = new javax.swing.JTextField();
        txtModUser = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblOverall = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblHome = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblAway = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Fixtures");
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(1300, 680));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter:"));

        jLabel1.setText("Association:");

        jLabel2.setText("Tournament:");

        jScrollPane4.setViewportView(lstTournament);

        jLabel3.setText("Seasons:");

        jScrollPane5.setViewportView(lstSeason);

        jScrollPane6.setViewportView(lstAssociation);

        jLabel5.setText("Round:");

        spnRoundFilter.setModel(new javax.swing.SpinnerNumberModel(0, 0, 50, 1));

        jLabel4.setText("Phase:");

        jScrollPane2.setViewportView(lstPhase);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Team Filter"));

        buttonGroup1.add(btnAll);
        btnAll.setSelected(true);
        btnAll.setText("All");

        buttonGroup1.add(btnHome);
        btnHome.setText("Home");

        buttonGroup1.add(btnVisitor);
        btnVisitor.setText("Visitor");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAll, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnHome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnVisitor)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnAll)
                .addComponent(btnHome)
                .addComponent(btnVisitor))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(spnRoundFilter, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addContainerGap())
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnRoundFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5)))
        );

        tblFixtures.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblFixtures.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblFixtures.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblFixtures);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 984, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Fixtures", jPanel4);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("General"));

        jLabel6.setText("Id:");

        txtId.setEnabled(false);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Referee:");

        jLabel7.setText("Round:");

        spnRound.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Stadium:");

        jLabel8.setText("Date:");

        spnDateTime.setModel(new javax.swing.SpinnerDateModel());
        spnDateTime.setEditor(new javax.swing.JSpinner.DateEditor(spnDateTime, "MM/dd/yy HH:mm"));

        jLabel13.setText("Status:");

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Week:");

        spnWeekNo.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spnRound, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbFixtureStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(spnWeekNo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(178, 178, 178))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addGap(2, 2, 2)
                            .addComponent(jLabel12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(cmbReferee, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel11)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(cmbStadium, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbReferee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(spnRound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbStadium, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(spnDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbFixtureStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13)
                        .addComponent(jLabel14)
                        .addComponent(spnWeekNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Teams"));

        jLabel9.setText("Home:");

        spnScoredHome.setModel(new javax.swing.SpinnerNumberModel(0, 0, 25, 1));

        jLabel10.setText("Visitor:");

        spnScoredVisitor.setModel(new javax.swing.SpinnerNumberModel(0, 0, 25, 1));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbHome, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbVisitor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spnScoredVisitor, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(spnScoredHome))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnScoredHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cmbVisitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnScoredVisitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Odds:"));

        jLabel20.setText("1:");

        jLabel21.setText("X:");

        jLabel22.setText("2:");

        jLabel23.setText("Tendency:");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOdd_1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOdd_X, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOdd_2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(txtTendency, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtOdd_1, txtOdd_2, txtOdd_X, txtTendency});

        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel22)
                        .addComponent(txtOdd_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel23)
                        .addComponent(txtTendency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtOdd_X, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel21))
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtOdd_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel20)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnNewI.setText("New");

        btnEditI.setText("Edit");

        btnDeleteI.setText("Delete");

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Change Info:"));

        jLabel16.setText("Entry User:");

        jLabel18.setText("Entry Date:");

        txtEntryDate.setEnabled(false);

        txtEntryUser.setEnabled(false);

        jLabel17.setText("Mod. User:");

        jLabel19.setText("Mod. Date:");

        txtModDate.setEnabled(false);

        txtModUser.setEnabled(false);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEntryUser)
                    .addComponent(txtEntryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtModUser)
                    .addComponent(txtModDate, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtModUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtModDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19)))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEntryUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEntryDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEditI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNewI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDeleteI, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE))
                .addGap(119, 119, 119))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnNewI)
                        .addGap(26, 26, 26)
                        .addComponent(btnEditI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteI))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(161, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Detail", jPanel7);

        tblOverall.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblOverall.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblOverall.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tblOverall);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 984, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Overall", jPanel6);

        tblHome.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblHome.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblHome.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(tblHome);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 984, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Home", jPanel8);

        tblAway.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblAway.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblAway.getTableHeader().setReorderingAllowed(false);
        jScrollPane8.setViewportView(tblAway);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 984, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Away", jPanel9);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton btnAll;
    private javax.swing.JButton btnDeleteI;
    private javax.swing.JButton btnEditI;
    private javax.swing.JRadioButton btnHome;
    private javax.swing.JButton btnNewI;
    private javax.swing.JRadioButton btnVisitor;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbFixtureStatus;
    private javax.swing.JComboBox cmbHome;
    private javax.swing.JComboBox cmbReferee;
    private javax.swing.JComboBox cmbStadium;
    private javax.swing.JComboBox cmbVisitor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JList lstAssociation;
    private javax.swing.JList lstPhase;
    private javax.swing.JList lstSeason;
    private javax.swing.JList lstTournament;
    private javax.swing.JSpinner spnDateTime;
    private javax.swing.JSpinner spnRound;
    private javax.swing.JSpinner spnRoundFilter;
    private javax.swing.JSpinner spnScoredHome;
    private javax.swing.JSpinner spnScoredVisitor;
    private javax.swing.JSpinner spnWeekNo;
    private javax.swing.JTable tblAway;
    private javax.swing.JTable tblFixtures;
    private javax.swing.JTable tblHome;
    private javax.swing.JTable tblOverall;
    private javax.swing.JTextField txtEntryDate;
    private javax.swing.JTextField txtEntryUser;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtModDate;
    private javax.swing.JTextField txtModUser;
    private javax.swing.JTextField txtOdd_1;
    private javax.swing.JTextField txtOdd_2;
    private javax.swing.JTextField txtOdd_X;
    private javax.swing.JTextField txtTendency;
    // End of variables declaration//GEN-END:variables

    private int action;
    private DBFixture dbFixture;
    private UserRight right;
    private Item user;
    
    private void myInitComponents(UserRight right, Item user) {
        this.user = user;
        this.right = right;
        dbFixture = new DBFixture();
        lstAssociation.addListSelectionListener(new AssociationListSelection());
        lstTournament.addListSelectionListener(new TournamentListSelection());
        lstSeason.addListSelectionListener(new SeasonListSelection());
        lstPhase.addListSelectionListener(new PhaseListSelection());
        spnRoundFilter.addChangeListener(new RoundChangeListener());
        btnNewI.setActionCommand("NewI");
        btnNewI.addActionListener(this);
        btnEditI.setActionCommand("EditI");
        btnEditI.addActionListener(this);
        btnDeleteI.setActionCommand("DeleteI");
        btnDeleteI.addActionListener(this);

        btnAll.setActionCommand("Reload");
        btnAll.addActionListener(this);
        btnHome.setActionCommand("Reload");
        btnHome.addActionListener(this);
        btnVisitor.setActionCommand("Reload");
        btnVisitor.addActionListener(this);

        tblFixtures.getSelectionModel().addListSelectionListener(new TableSelection());
        tblFixtures.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblFixtures.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd/yy HH:mm"));
        tblFixtures.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        cmbFixtureStatus.setModel(new FixtureStatusComboBoxModel(1));
        cmbReferee.setModel(new RefereeComboBoxModel(1));
        cmbStadium.setModel(new StadiumComboBoxModel(1));
        loadAssociations();
        setNormalScenario();
    }

    private void setNormalScenario(){
        TableModel tableModel = tblFixtures.getModel();
        lstAssociation.setEnabled(true);
        lstTournament.setEnabled(true);
        lstSeason.setEnabled(true);
        lstPhase.setEnabled(true);
        spnRoundFilter.setEnabled(true);
        tblFixtures.setEnabled(true);

        spnDateTime.setEnabled(false);
        spnRound.setEnabled(false);
        spnWeekNo.setEnabled(false);
        cmbFixtureStatus.setEnabled(false);
        cmbHome.setEnabled(false);
        spnScoredHome.setEnabled(false);
        cmbVisitor.setEnabled(false);
        spnScoredVisitor.setEnabled(false);
        cmbReferee.setEnabled(false);
        cmbStadium.setEnabled(false);
        txtOdd_1.setEnabled(false);
        txtOdd_X.setEnabled(false);
        txtOdd_2.setEnabled(false);
        txtTendency.setEnabled(false);
        btnNewI.setEnabled(right.getIsCreated());
	if (tableModel.getRowCount() > 0) {
            btnEditI.setEnabled(right.getIsUpdated());
            btnDeleteI.setEnabled(right.getIsDeleted());
        } else {
            btnEditI.setEnabled(false);
            btnDeleteI.setEnabled(false);
        }
        btnNewI.setText("New");
        btnEditI.setText("Edit");        
        action = 0;         // no action
    }
    
    private void loadAssociations(){
        DBAssociation dbAssociation = new DBAssociation();
        lstAssociation.setModel(new AssociationListModel(dbAssociation.getList(1)));
        if (lstAssociation.getModel().getSize() > 0){
            lstAssociation.setSelectedIndex(0);
        } else{
            loadTournaments(-1);
        }
    }
    
    private class AssociationListSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                if (lstAssociation.getSelectedIndex() != -1){                   
                    Association association = (Association)lstAssociation.getSelectedValue();
                    loadTournaments(association.getId());
                }
            }
        }
    }

    private void loadTournaments(long associationId){
        DBTournament dbTournament = new DBTournament();
        lstTournament.setModel(new TournamentListModel(dbTournament.getListByAssociation(associationId)));
        if (lstTournament.getModel().getSize() > 0){
            lstTournament.setSelectedIndex(0);
        } else {
            loadSeasons(-1);  // clear lstSeason control
        }
    }
    
    private class TournamentListSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                if (lstTournament.getSelectedIndex() != -1){
                    Tournament tournament = (Tournament)lstTournament.getSelectedValue();
                    loadSeasons(tournament.getId());
                }
            }
        }
    }

    private void loadSeasons(long tournamentId){
        DBSeason dbSeason = new DBSeason();
        lstSeason.setModel(new SeasonListModel(dbSeason.getList(tournamentId)));
        if (lstSeason.getModel().getSize() > 0){
            lstSeason.setSelectedIndex(0);
        } else {
            loadPhases(-1);     // clear lstPhases control
        }
    }
    
    private class SeasonListSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                if (lstSeason.getSelectedIndex() != -1){
                    Season season = (Season)lstSeason.getSelectedValue();
                    DBTeam dbTeam = new DBTeam();
                    cmbHome.setModel(new TeamComboBoxModel(dbTeam.getListBySeason(season.getId())));
                    cmbVisitor.setModel(new TeamComboBoxModel(dbTeam.getListBySeason(season.getId())));
                    loadPhases(season.getId());
                }
            }
        }
    }

    private void loadPhases(long seasonId){
        DBPhase dbPhase = new DBPhase();
        lstPhase.setModel(new PhaseListModel(dbPhase.getListBySeason(seasonId)));
        if (lstPhase.getModel().getSize() > 0){
            lstPhase.setSelectedIndex(0);
        } else {
            loadData();
        }
    }
    
    private class PhaseListSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                loadData();
            }
        }
    }
    
    private void loadData(){        
        // Getting filter values
        long seasonId = getSeasonId();
        long phaseId = getPhaseId();
        if (seasonId != -1 && phaseId != -1) {
            loadFixtures(seasonId, phaseId);
            loadStanding(seasonId, phaseId);
        }
    }
    
    private long getSeasonId(){
        // Getting filter values
        long seasonId = lstSeason.getSelectedIndex();
        if (seasonId != -1){
            Season season = (Season)lstSeason.getSelectedValue();
            seasonId = season.getId();
        }
        return seasonId;
    }
    
    private long getPhaseId(){
        long phaseId = lstPhase.getSelectedIndex();
        if (phaseId != -1){
            Phase phase = (Phase)lstPhase.getSelectedValue();
            phaseId = phase.getId();
        }
        return phaseId;
    }
    
    private void loadFixtures(long seasonId, long phaseId){
        int round = (Integer)spnRoundFilter.getValue();
        
        // loading table
        tblFixtures.setModel(new FixtureTableModel(getFilteredList(dbFixture.getList(seasonId, phaseId, round))));
        TableColumnAdjuster ta = new TableColumnAdjuster(tblFixtures);
        ta.setOnlyAdjustLarger(false);
        ta.adjustColumns();
        TableModel tableModel = tblFixtures.getModel();
        if (tableModel.getRowCount() > 0) {
            tblFixtures.setRowSelectionInterval(0, 0);
        } else {
            clearFixtureValues();
            btnEditI.setEnabled(false);
            btnDeleteI.setEnabled(false);
        }
    }

    private List<Fixture> getFilteredList(List<Fixture> list){
        List<Fixture> rslList = new ArrayList<>();
        TableModel tableModel = tblFixtures.getModel();
        if (tblFixtures.getSelectedRow() == -1 || btnAll.isSelected())
            rslList = list;
        else {
            String team;
            Fixture node;
            int selectedRow = tblFixtures.getSelectedRow();
            Iterator i = list.iterator();
            if (btnHome.isSelected()){
                team = ((Item)tableModel.getValueAt(selectedRow, 6)).getName();
                while (i.hasNext()){
                    node = (Fixture)i.next();
                    if ( node.getHomeTeam().getName().equalsIgnoreCase(team) ){
                        rslList.add(node);
                    }
                }
            } else {
                team = ((Item)tableModel.getValueAt(selectedRow, 9)).getName();
                while (i.hasNext()){
                    node = (Fixture)i.next();
                    if ( node.getVisitorTeam().getName().equalsIgnoreCase(team) ){
                        rslList.add(node);
                    }
                }
            }
        }
        return rslList;
    }
    
    private void loadStanding(long seasonId, long phaseId){
        DBStat dbStat = new DBStat();
        TableModel tableModel;
        Timestamp date;
        date = new Timestamp(new Date().getTime());
        
        // Load overall standing
        tblOverall.setModel(new StandingTableModel(dbStat.getOverallLiveStanding(seasonId, phaseId, date)));
        TableColumnAdjuster taOverall = new TableColumnAdjuster(tblOverall);
        taOverall.setOnlyAdjustLarger(false);
        taOverall.adjustColumns();
        tableModel = tblOverall.getModel();
        if (tableModel.getRowCount() > 0){
            tblOverall.setRowSelectionInterval(0, 0);
        }
        
        // Load home standing
        tblHome.setModel(new StandingTableModel(dbStat.getHomeLiveStanding(seasonId, phaseId, date)));
        TableColumnAdjuster taHome = new TableColumnAdjuster(tblHome);
        taHome.setOnlyAdjustLarger(false);
        taHome.adjustColumns();
        tableModel = tblHome.getModel();
        if (tableModel.getRowCount() > 0){
            tblHome.setRowSelectionInterval(0, 0);
        }
        
        // Load away standing
        tblAway.setModel(new StandingTableModel(dbStat.getAwayLiveStanding(seasonId, phaseId, date)));
        TableColumnAdjuster taAway = new TableColumnAdjuster(tblAway);
        taAway.setOnlyAdjustLarger(false);
        taAway.adjustColumns();
        tableModel = tblAway.getModel();
        if (tableModel.getRowCount() > 0){
            tblAway.setRowSelectionInterval(0, 0);
        }
    }
    
    private class RoundChangeListener implements ChangeListener{
        @Override
        public void stateChanged(ChangeEvent e) {
            loadFixtures(getSeasonId(), getPhaseId());
        }
    }
    
    private class TableSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                loadFixtureDetail();
            }
        }
    }

    private void loadFixtureDetail(){
        TableModel tableModel = tblFixtures.getModel();
        if (tblFixtures.getSelectedRow() != -1){
            int selectedRow = tblFixtures.getSelectedRow();
            txtId.setText(Long.toString((Long)tableModel.getValueAt(selectedRow, 0)));
            spnRound.setValue((Integer)tableModel.getValueAt(selectedRow, 3));
            
            Item status = (Item)tableModel.getValueAt(selectedRow, 4);
            setCmbFixtureStatus(status.getId());

            spnDateTime.setValue((Timestamp)tableModel.getValueAt(selectedRow, 5));
            
            Item home = (Item)tableModel.getValueAt(selectedRow, 6);
            setCmbHome(home.getId());
            
            spnScoredHome.setValue((Integer)tableModel.getValueAt(selectedRow, 7));
            spnScoredVisitor.setValue((Integer)tableModel.getValueAt(selectedRow, 8));
            
            Item visitor = (Item)tableModel.getValueAt(selectedRow, 9);
            setCmbVisitor(visitor.getId());
            
            Float Odd_1 = (Float)tableModel.getValueAt(selectedRow, 10);           
            txtOdd_1.setText(Odd_1.toString());
            Float Odd_X = (Float)tableModel.getValueAt(selectedRow, 11);
            txtOdd_X.setText(Odd_X.toString());
            Float Odd_2 = (Float)tableModel.getValueAt(selectedRow, 12);
            txtOdd_2.setText(Odd_2.toString());
            
            String tendency = (String)tableModel.getValueAt(selectedRow, 13);
            txtTendency.setText(tendency);
            
            Item stadium = (Item)tableModel.getValueAt(selectedRow, 14);
            setCmbStadium(stadium.getId());
            
            Item referee = (Item)tableModel.getValueAt(selectedRow, 15);
            setCmbReferee(referee.getId());
            
            spnWeekNo.setValue((Integer)tableModel.getValueAt(selectedRow, 18));
            
            TrackChange tc = (TrackChange)tableModel.getValueAt(selectedRow, 19);
            txtEntryUser.setText(tc.getEntryUser().getName());
            txtEntryDate.setText(new SimpleDateFormat("MM/dd/yy hh:mm:ss").format(tc.getEntryDate()));
            txtModUser.setText(tc.getModUser().getName());
            txtModDate.setText(new SimpleDateFormat("MM/dd/yy hh:mm:ss").format(tc.getModDate()));

            btnEditI.setEnabled(right.getIsUpdated());
            btnDeleteI.setEnabled(right.getIsDeleted());
        } else {
            clearFixtureValues();
            btnEditI.setEnabled(false);
            btnDeleteI.setEnabled(false);
        }       
    }

    private void setCmbHome(long id){
        int index = -1;
        Team obj;
        for (int i=0;i<cmbHome.getItemCount() && index == -1;i++){
            obj = (Team)cmbHome.getItemAt(i);
            if (obj.getId()== id){
                index = i;
            }
        }
        cmbHome.setSelectedIndex(index);
        cmbHome.repaint();
    }

    private void setCmbVisitor(long id){
        int index = -1;
        Team obj;
        for (int i=0;i<cmbVisitor.getItemCount() && index == -1;i++){
            obj = (Team)cmbVisitor.getItemAt(i);
            if (obj.getId()== id){
                index = i;
            }
        }
        cmbVisitor.setSelectedIndex(index);
        cmbVisitor.repaint();
    }
    
    private void setCmbFixtureStatus(long id){
        int index = -1;
        FixtureStatus obj;
        for (int i=0;i<cmbFixtureStatus.getItemCount() && index == -1;i++){
            obj = (FixtureStatus)cmbFixtureStatus.getItemAt(i);
            if (obj.getId()== id){
                index = i;
            }
        }
        cmbFixtureStatus.setSelectedIndex(index);
        cmbFixtureStatus.repaint();
    }
    
    private void setCmbStadium(long id){
        int index = -1;
        Stadium obj;
        for (int i=0;i<cmbStadium.getItemCount() && index == -1;i++){
            obj = (Stadium)cmbStadium.getItemAt(i);
            if (obj.getId()== id){
                index = i;
            }
        }
        cmbStadium.setSelectedIndex(index);
        cmbStadium.repaint();
    }

    private void setCmbReferee(long id){
        int index = -1;
        Referee obj;
        for (int i=0;i<cmbReferee.getItemCount() && index == -1;i++){
            obj = (Referee)cmbReferee.getItemAt(i);
            if (obj.getId()== id){
                index = i;
            }
        }
        cmbReferee.setSelectedIndex(index);
        cmbReferee.repaint();
    }

    private void clearFixtureValues(){
        txtId.setText("");
        spnRound.setValue(1);
        spnWeekNo.setValue(1);
        spnDateTime.setValue(new Timestamp(new Date().getTime()));
        cmbFixtureStatus.setSelectedIndex(-1);
        cmbHome.setSelectedIndex(-1);
        spnScoredHome.setValue(0);
        spnScoredVisitor.setValue(0);
        cmbVisitor.setSelectedIndex(-1);
        cmbReferee.setSelectedIndex(-1);
        cmbStadium.setSelectedIndex(-1);
        txtOdd_1.setText("");
        txtOdd_X.setText("");
        txtOdd_2.setText("");
        txtTendency.setText("");
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (null != e.getActionCommand()){
            switch (e.getActionCommand()) {
                case "NewI":
                    if (lstSeason.getSelectedIndex() == -1){
                        JOptionPane.showMessageDialog(this, "There is no season selected!", "Missing Info", JOptionPane.ERROR_MESSAGE);
                    } else if (lstPhase.getSelectedIndex() == -1){
                        JOptionPane.showMessageDialog(this, "There is no phase selected!", "Missing Info", JOptionPane.ERROR_MESSAGE);
                    } else{
                        newRecordI();
                    }
                    break;
                case "EditI":
                    editRecordI();
                    break;
                case "DeleteI":
                    deleteRecordI();
                    break;
                case "Reload":
                    loadData();
                    break;  
                default:
                    JOptionPane.showMessageDialog(this, "Action not identified", "Unkown", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        }
    }

    private void newRecordI() {
        if (action == 0){
            setNewScenario();
        }else{
            String msg = validateFixtureData();
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            }else if (action == 1){                  // insert action
                msg = insertFixtureRecord();
                if (msg.isEmpty()){
                    setNormalScenario();
                    loadFixtures(getSeasonId(), getPhaseId());
                    JOptionPane.showMessageDialog(this, "Record created succesfully!", "New", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            }else{                                // update action
                msg = updateFixtureRecord();
                if (msg.isEmpty()){
                    setNormalScenario();
                    updateFixtureRow();
                    JOptionPane.showMessageDialog(this, "Record updated succesfully!", "Edit", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void setNewScenario(){
        lstAssociation.setEnabled(false);
        lstTournament.setEnabled(false);
        lstSeason.setEnabled(false);
        lstPhase.setEnabled(false);
        spnRoundFilter.setEnabled(false);
        tblFixtures.setEnabled(false);

        spnDateTime.setEnabled(true);
        spnRound.setEnabled(true);
        spnWeekNo.setEnabled(true);
        cmbFixtureStatus.setEnabled(true);
        cmbHome.setEnabled(true);
        spnScoredHome.setEnabled(true);
        cmbVisitor.setEnabled(true);
        spnScoredVisitor.setEnabled(true);
        cmbReferee.setEnabled(true);
        cmbStadium.setEnabled(true);
        txtOdd_1.setEnabled(true);
        txtOdd_X.setEnabled(true);
        txtOdd_2.setEnabled(true);
        txtTendency.setEnabled(true);
        btnNewI.setEnabled(right.getIsCreated());
        
        btnNewI.setEnabled(true);
        btnEditI.setEnabled(true);
        btnDeleteI.setEnabled(false);
        
        btnNewI.setText("Save");
        btnEditI.setText("Cancel");
        
        setFixtureInitValues();
        action = 1;     // new action
    }
    
    private void setFixtureInitValues(){
        txtId.setText("");
        if ((Integer)spnRoundFilter.getValue() != 0){
            spnRound.setValue(spnRoundFilter.getValue());
        } else {
            spnRound.setValue(1);
        }
        spnWeekNo.setValue(1);
        spnDateTime.setValue(new Timestamp(new Date().getTime()));
        cmbFixtureStatus.setSelectedIndex(0);
        cmbHome.setSelectedIndex(0);
        spnScoredHome.setValue((Integer)0);
        spnScoredVisitor.setValue((Integer)0);
        cmbVisitor.setSelectedIndex(1);
        cmbReferee.setSelectedIndex(0);
        cmbStadium.setSelectedIndex(0);
        txtOdd_1.setText("1.0");
        txtOdd_X.setText("1.0");
        txtOdd_2.setText("1.0");
        txtTendency.setText("-");
    }
    
    private String validateFixtureData() {
        String msg;
        if (spnRound.getValue() == null){
            msg = "Round field cannot be empty";
        } else if (spnWeekNo.getValue() == null){
            msg = "Week no. field cannot be empty";
        } else if (spnDateTime.getValue() == null){
            msg = "Date/Time field cannot be empty";
        } else if (cmbFixtureStatus.getSelectedIndex() == -1){
            msg = "Fixture status field cannot be empty";
        } else if (cmbHome.getSelectedIndex() == -1){
            msg = "Home team field cannot be empty";
        } else if (spnScoredHome.getValue() == null){
            msg = "Scored home field cannot be empty";
        } else if (spnScoredVisitor.getValue() == null){
            msg = "Scored visitor field cannot be empty";
        } else if (cmbVisitor.getSelectedIndex() == -1){
            msg = "Visitor team field cannot be empty";
        } else if (cmbStadium.getSelectedIndex() == -1){
            msg = "Stadium field cannot be empty";
        } else if (cmbReferee.getSelectedIndex() == -1){
            msg = "Referee field cannot be empty";
        }  else if(!Util.isNumeric(txtOdd_1.getText().trim())){
            msg = "Odd 1 must be a numeric value.";
        } else if(!Util.isNumeric(txtOdd_X.getText().trim())){
            msg = "Odd X must be a numeric value.";
        } else if(!Util.isNumeric(txtOdd_2.getText().trim())){
            msg = "Odd 2 must be a numeric value.";
        } else {
            msg = "";
        }
        return msg;
    }

    private String insertFixtureRecord() {
        Association association = (Association)lstAssociation.getSelectedValue();
        Tournament tournament = (Tournament)lstTournament.getSelectedValue();
        Season season = (Season)lstSeason.getSelectedValue();
        Phase phase = (Phase)lstPhase.getSelectedValue();
        Team home = (Team)cmbHome.getSelectedItem();
        Team visitor = (Team)cmbVisitor.getSelectedItem();
        Stadium stadium = (Stadium)cmbStadium.getSelectedItem();
        Referee referee = (Referee)cmbReferee.getSelectedItem();
        FixtureStatus status = (FixtureStatus)cmbFixtureStatus.getSelectedItem();
        
        Fixture obj = new Fixture(
              new Long(-1)
            , new Item(association.getId(), association.getShortName())
            , new Item(tournament.getId(), tournament.getShortName())
            , new Item(season.getId(), season.getShortName())
            , new Item(phase.getId(), phase.getShortName())
            , (Integer)spnRound.getValue()
            , new Timestamp(((Date)spnDateTime.getValue()).getTime())
            , new Item(home.getId(), home.getShortName())
            , (Integer)spnScoredHome.getValue()
            , new Item(visitor.getId(), visitor.getShortName())
            , (Integer)spnScoredVisitor.getValue()
            , new Item(stadium.getId(), stadium.getShortName())
            , new Item(referee.getId(), referee.getNickName())
            , new Item(status.getId(), status.getShortName())
            , new Float(txtOdd_1.getText())
            , new Float(txtOdd_X.getText())
            , new Float(txtOdd_2.getText())
            , (Integer)spnWeekNo.getValue()
            , txtTendency.getText()
            , new TrackChange(null, user, null, null)
        );
        
        return dbFixture.insert(obj);
    }
    
    private String updateFixtureRecord() {
        Association association = (Association)lstAssociation.getSelectedValue();
        Tournament tournament = (Tournament)lstTournament.getSelectedValue();
        Season season = (Season)lstSeason.getSelectedValue();
        Phase phase = (Phase)lstPhase.getSelectedValue();
        Team home = (Team)cmbHome.getSelectedItem();
        Team visitor = (Team)cmbVisitor.getSelectedItem();
        Stadium stadium = (Stadium)cmbStadium.getSelectedItem();
        Referee referee = (Referee)cmbReferee.getSelectedItem();
        FixtureStatus status = (FixtureStatus)cmbFixtureStatus.getSelectedItem();

        Fixture obj = new Fixture(
              Long.parseLong(txtId.getText())
            , new Item(association.getId(), association.getShortName())
            , new Item(tournament.getId(), tournament.getShortName())
            , new Item(season.getId(), season.getShortName())
            , new Item(phase.getId(), phase.getShortName())
            , (Integer)spnRound.getValue()
            , new Timestamp(((Date)spnDateTime.getValue()).getTime())
            , new Item(home.getId(), home.getShortName())
            , (Integer)spnScoredHome.getValue()
            , new Item(visitor.getId(), visitor.getShortName())
            , (Integer)spnScoredVisitor.getValue()
            , new Item(stadium.getId(), stadium.getShortName())
            , new Item(referee.getId(), referee.getNickName())
            , new Item(status.getId(), status.getShortName())
            , Float.parseFloat(txtOdd_1.getText())
            , Float.parseFloat(txtOdd_X.getText())
            , Float.parseFloat(txtOdd_2.getText())
            , (Integer)spnWeekNo.getValue()
            , txtTendency.getText().trim()
            , new TrackChange(null, null, null, user)
        );
        
        return dbFixture.update(obj);
    }

    private void updateFixtureRow(){
        int rowSelected = tblFixtures.getSelectedRow();
        if (rowSelected != -1){
            Item item;
            tblFixtures.setValueAt((Integer)spnRound.getValue(), rowSelected, 3);

            item = (Item)tblFixtures.getValueAt(rowSelected, 4);
            item.setId(((FixtureStatus)cmbFixtureStatus.getSelectedItem()).getId());
            item.setName(((FixtureStatus)cmbFixtureStatus.getSelectedItem()).getShortName());

            Timestamp ts = (Timestamp)tblFixtures.getValueAt(rowSelected, 5);
            ts.setTime(((Date)spnDateTime.getValue()).getTime());

            item = (Item)tblFixtures.getValueAt(rowSelected, 6);
            item.setId(((Team)cmbHome.getSelectedItem()).getId());
            item.setName(((Team)cmbHome.getSelectedItem()).getShortName());
            
            tblFixtures.setValueAt((Integer)spnScoredHome.getValue(), rowSelected, 7);
            tblFixtures.setValueAt((Integer)spnScoredVisitor.getValue(), rowSelected, 8);
            
            item = (Item)tblFixtures.getValueAt(rowSelected, 9);
            item.setId(((Team)cmbVisitor.getSelectedItem()).getId());
            item.setName(((Team)cmbVisitor.getSelectedItem()).getShortName());
            
            tblFixtures.setValueAt(Float.parseFloat(txtOdd_1.getText()), rowSelected, 10);
            tblFixtures.setValueAt(Float.parseFloat(txtOdd_X.getText()), rowSelected, 11);
            tblFixtures.setValueAt(Float.parseFloat(txtOdd_2.getText()), rowSelected, 12);
            tblFixtures.setValueAt(txtTendency.getText(), rowSelected, 13);
            
            item = (Item)tblFixtures.getValueAt(rowSelected, 14);
            item.setId(((Stadium)cmbStadium.getSelectedItem()).getId());
            item.setName(((Stadium)cmbStadium.getSelectedItem()).getShortName());

            item = (Item)tblFixtures.getValueAt(rowSelected, 15);
            item.setId(((Referee)cmbReferee.getSelectedItem()).getId());
            item.setName(((Referee)cmbReferee.getSelectedItem()).getNickName());
            
            tblFixtures.setValueAt((Integer)spnWeekNo.getValue(), rowSelected, 18);
            
            TrackChange tc = (TrackChange)tblFixtures.getValueAt(rowSelected, 19);
            tc.setModDate(new Timestamp(new Date().getTime()));
            item = tc.getModUser();
            item.setId(user.getId());
            item.setName(user.getName());
        }
    }
    
    private void editRecordI() {
        if (action==0){
            setEditScenario();
        } else {
            setNormalScenario();
            loadFixtureDetail();
        }
    }

    private void setEditScenario(){
        lstAssociation.setEnabled(false);
        lstTournament.setEnabled(false);
        lstSeason.setEnabled(false);
        lstPhase.setEnabled(false);
        spnRoundFilter.setEnabled(false);
        tblFixtures.setEnabled(false);

        spnDateTime.setEnabled(true);
        spnRound.setEnabled(true);
        spnWeekNo.setEnabled(true);
        cmbFixtureStatus.setEnabled(true);
        cmbHome.setEnabled(true);
        spnScoredHome.setEnabled(true);
        cmbVisitor.setEnabled(true);
        spnScoredVisitor.setEnabled(true);
        cmbReferee.setEnabled(true);
        cmbStadium.setEnabled(true);
        txtOdd_1.setEnabled(true);
        txtOdd_X.setEnabled(true);
        txtOdd_2.setEnabled(true);
        txtTendency.setEnabled(true);
        btnNewI.setEnabled(right.getIsCreated());
        
        btnNewI.setEnabled(true);
        btnEditI.setEnabled(true);
        btnDeleteI.setEnabled(false);
        
        btnNewI.setText("Save");
        btnEditI.setText("Cancel");
        
        action = 2;     // edit action                
    }
    
    private void deleteRecordI() {
        int ans = JOptionPane.showOptionDialog(this
                , "You are about to delete the Fixture Id \"" + txtId.getText() + "\".\nAre you sure?"
                , "Delete"
                , JOptionPane.OK_CANCEL_OPTION
                , JOptionPane.QUESTION_MESSAGE
                , null
                , null
                , null);
        if (ans == JOptionPane.OK_OPTION){
            String msg = dbFixture.delete(Long.parseLong(txtId.getText()));
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                loadFixtures(getSeasonId(), getPhaseId());
                JOptionPane.showMessageDialog(this, "Record deleted succesfully!", "Delete", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
}
