/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package soccer.gui;

import java.awt.event.ActionEvent;
import javax.swing.ListSelectionModel;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import security.entities.Item;
import security.entities.UserRight;
import soccer.database.DBTeam;
import soccer.entities.Fixture;
import soccer.entities.TeamSeason;
import soccer.models.TeamSeasonTableModel;
import utils.FixtureLoader;
import utils.TableColumnAdjuster;

/**
 *
 * @author Administrator
 */
public class FrmImportTeam extends javax.swing.JInternalFrame implements ActionListener{
    
    private String currentDir = ".";
    
    /**
     * Creates new form FrmUsers
     */
    public FrmImportTeam(UserRight right, Item user) {
        initComponents();
        myInitComponents(right, user);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTeams = new javax.swing.JTable();
        btnFilename = new javax.swing.JButton();
        txtFilename = new javax.swing.JTextField();
        btnLoad = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Import Teams");
        setPreferredSize(new java.awt.Dimension(1100, 680));

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Teams:"));

        tblTeams.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblTeams.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblTeams.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblTeams);

        btnFilename.setText("...");

        btnLoad.setText("Load");

        btnSave.setText("Save");

        jLabel4.setText("File:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFilename)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFilename, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 931, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnLoad, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLoad)
                        .addComponent(btnFilename))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(4, 4, 4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSave)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel6.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFilename;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTeams;
    private javax.swing.JTextField txtFilename;
    // End of variables declaration//GEN-END:variables

    private DBTeam dbTeam;
    private UserRight right;
    private Item user;
    private List<TeamSeason> list;
    
    private void myInitComponents(UserRight right, Item user) {
        this.user = user;
        this.right = right;
        dbTeam = new DBTeam();

        btnFilename.setActionCommand("File");
        btnFilename.addActionListener(this);
        btnLoad.setActionCommand("Load");
        btnLoad.addActionListener(this);
        btnSave.setActionCommand("Save");
        btnSave.addActionListener(this);
        
        tblTeams.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        setNormalScenario();
    }
    
    private void setNormalScenario(){
        btnSave.setEnabled(right.getIsCreated());
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (null != e.getActionCommand()){
            switch (e.getActionCommand()) {
                case "File":
                    fileAction();
                    break;
                case "Load":
                    try {
                        loadAction();
                    } catch (Exception ex) {
                        Logger.getLogger(FrmImportFixture.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case "Save":
                    saveAction();
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Action not identified", "Unkown", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        }
    }

    private void fileAction() {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File(currentDir));
        chooser.setDialogTitle("Fixture File");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            txtFilename.setText(chooser.getSelectedFile().getAbsolutePath());
            currentDir = chooser.getCurrentDirectory().getAbsolutePath();
        }        
    }

    private void loadAction() throws Exception {
        File file = new File(txtFilename.getText());
        if (file.exists()){
            FixtureLoader fl = new FixtureLoader();
            list = readData(fl.xmlReader(file, user));
            tblTeams.setModel(new TeamSeasonTableModel(list));
            TableModel tableModel = tblTeams.getModel();
            TableColumnAdjuster ta = new TableColumnAdjuster(tblTeams);
            ta.setOnlyAdjustLarger(false);
            ta.adjustColumns();
            if (tableModel.getRowCount() > 0){
                tblTeams.setRowSelectionInterval(0, 0);
            }
        } else{
            JOptionPane.showMessageDialog(this, "Phase not selected.", "Missing info", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private List<TeamSeason> readData(List<Fixture> fixtures){
        List<TeamSeason> lst = new ArrayList<>();
        Fixture f;
        Iterator<Fixture> iterator = fixtures.iterator();
        while (iterator.hasNext()) {
            f = iterator.next();
            TeamSeason team = new TeamSeason(
                      new Item(-1, f.getAssociation().getName().trim())
                    , new Item(-1, f.getTournament().getName().trim())
                    , new Item(-1, f.getSeason().getName().trim())
                    , new Item(-1, f.getHomeTeam().getName().trim())
            );
            if (!lst.contains(team)){
                lst.add(team);
            }
            team = new TeamSeason(
                      new Item(-1, f.getAssociation().getName().trim())
                    , new Item(-1, f.getTournament().getName().trim())
                    , new Item(-1, f.getSeason().getName().trim())
                    , new Item(-1, f.getHomeTeam().getName().trim())
            );
            if (!lst.contains(team)){
                lst.add(team);
            }
        }
        
        // Descending order
        Collections.sort(lst, (Object o1, Object o2) -> {
            TeamSeason t1 = (TeamSeason)o1;
            TeamSeason t2 = (TeamSeason)o2;
            if (t1.getAssociation().getName().compareTo(t2.getAssociation().getName()) > 0)
                return 1;
            else if (t1.getAssociation().getName().compareTo(t2.getAssociation().getName()) < 0)
                return -1;
            else if (t1.getTournament().getName().compareTo(t2.getTournament().getName()) > 0)
                return 1;
            else if (t1.getTournament().getName().compareTo(t2.getTournament().getName()) > 0)
                return -1;
            else if (t1.getSeason().getName().compareTo(t2.getSeason().getName()) > 0)
                return 1;
            else if (t1.getSeason().getName().compareTo(t2.getSeason().getName()) < 0)
                return -1;
            else if (t1.getTeam().getName().compareTo(t2.getTeam().getName()) > 0)
                return 1;
            else if (t1.getTeam().getName().compareTo(t2.getTeam().getName()) < 0)
                return -1;
            else
                return 0;
        });
        
        return lst;
    }
    
    private void saveAction() {
        String msg = saveRecords();
        if (msg.isEmpty()){
            JOptionPane.showMessageDialog(this, "Save succesfully completed!!!", "Completed", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, msg, "Failure", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private String saveRecords() {
        String msg = "";
        TeamSeason team;
        Iterator<TeamSeason> iterator = list.iterator();
        while (iterator.hasNext() && msg.isEmpty()){
            team = iterator.next();
            msg = dbTeam.registerTeam(team, user.getId());
            if (!msg.isEmpty()) {
                msg = msg + "\nTeam: " + team.getTeam().getName();
            }
        }
        return msg;
    }
}
