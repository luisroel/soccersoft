/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package soccer.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import soccer.database.DBTournament;
import security.entities.Item;
import soccer.entities.Tournament;
import security.entities.TrackChange;
import security.entities.UserRight;
import soccer.database.DBAssociation;
import soccer.database.DBSeason;
import soccer.entities.Association;
import soccer.entities.Phase;
import soccer.entities.Season;
import soccer.models.AssociationListModel;
import soccer.models.PhaseComboBoxModel;
import soccer.models.SeasonListModel;
import soccer.models.SeasonPhaseTableModel;
import soccer.models.TournamentListModel;
import utils.TableColumnAdjuster;

/**
 *
 * @author Administrator
 */
public class FrmTournament extends javax.swing.JInternalFrame implements ActionListener{

    /**
     * Creates new form FrmObject
     * @param right
     * @param user
     */
    public FrmTournament(UserRight right, Item user) {
        initComponents();
        myInitComponents(right, user);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstTournaments = new javax.swing.JList();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lstAssociations = new javax.swing.JList();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lstSeasons = new javax.swing.JList();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        chkActive = new javax.swing.JCheckBox();
        btnNew = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtName = new javax.swing.JTextArea();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtShortName = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btnNewD = new javax.swing.JButton();
        btnEditD = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtSeasonShortName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtSeasonName = new javax.swing.JTextArea();
        btnDeleteD = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        txtSeasonId = new javax.swing.JTextField();
        dtpTo = new com.toedter.calendar.JDateChooser();
        dtpFrom = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtEntryUser = new javax.swing.JTextField();
        txtModUser = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtEntryDate = new javax.swing.JTextField();
        txtModDate = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblPhases = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        btnNewP = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        cmbPhases = new javax.swing.JComboBox();
        btnEditP = new javax.swing.JButton();
        cmbPhasesFull = new javax.swing.JComboBox();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Tournaments");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter:"));

        jScrollPane1.setViewportView(lstTournaments);

        jLabel13.setText("Association:");

        jScrollPane6.setViewportView(lstAssociations);

        jLabel14.setText("Tournament:");

        jLabel15.setText("Seasons:");

        jScrollPane5.setViewportView(lstSeasons);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Tournament info:"));

        jLabel1.setText("Id:");

        txtId.setEnabled(false);

        chkActive.setText("Active");
        chkActive.setEnabled(false);

        btnNew.setText("New");

        jLabel2.setText("Name:");

        jLabel3.setText("Description:");

        txtName.setColumns(20);
        txtName.setLineWrap(true);
        txtName.setRows(5);
        txtName.setEnabled(false);
        jScrollPane2.setViewportView(txtName);

        btnEdit.setText("Edit");

        btnDelete.setText("Delete");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkActive))
                    .addComponent(txtShortName, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnDelete)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(15, 15, 15)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtShortName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(8, 8, 8)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(30, 30, 30))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNew)
                            .addComponent(chkActive))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEdit)))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Seasons Info:"));

        btnNewD.setText("New");

        btnEditD.setText("Edit");

        jLabel9.setText("Name:");

        jLabel10.setText("Description:");

        txtSeasonName.setColumns(20);
        txtSeasonName.setLineWrap(true);
        txtSeasonName.setRows(5);
        jScrollPane4.setViewportView(txtSeasonName);

        btnDeleteD.setText("Delete");

        jLabel12.setText("Id:");

        txtSeasonId.setEnabled(false);

        dtpTo.setDateFormatString("MM/dd/yyyy");

        dtpFrom.setDateFormatString("MM/dd/yyyy");

        jLabel11.setText("From:");

        jLabel16.setText("To:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSeasonShortName)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(txtSeasonId, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dtpFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dtpTo, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnNewD, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEditD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteD)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSeasonId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addComponent(dtpFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dtpTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel16))
                    .addComponent(btnNewD))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSeasonShortName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(btnEditD))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel10)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnDeleteD, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Change info:"));

        jLabel4.setText("Entry User:");

        jLabel5.setText("Mod. User:");

        txtEntryUser.setEnabled(false);

        txtModUser.setEnabled(false);

        jLabel6.setText("Entry Date:");

        jLabel7.setText("Mod. Date:");

        txtEntryDate.setEnabled(false);

        txtModDate.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEntryUser)
                    .addComponent(txtEntryDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtModUser)
                    .addComponent(txtModDate))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEntryUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtModUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEntryDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtModDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 709, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("General", jPanel5);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Roles"), "Phases"));

        tblPhases.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane8.setViewportView(tblPhases);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Phase:");

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Phase Name:");

        txtDescription.setEnabled(false);

        btnNewP.setText("New");

        btnRemove.setText("Remove");

        cmbPhases.setEnabled(false);

        btnEditP.setText("Edit");

        cmbPhasesFull.setEnabled(false);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(cmbPhases, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbPhasesFull, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(txtDescription)))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(btnEditP, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNewP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnEditP, btnNewP, btnRemove});

        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnNewP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemove))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cmbPhases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbPhasesFull, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel17)
                    .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnNewP, btnRemove});

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(224, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Phases", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 738, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteD;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnEditD;
    private javax.swing.JButton btnEditP;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNewD;
    private javax.swing.JButton btnNewP;
    private javax.swing.JButton btnRemove;
    private javax.swing.JCheckBox chkActive;
    private javax.swing.JComboBox cmbPhases;
    private javax.swing.JComboBox cmbPhasesFull;
    private com.toedter.calendar.JDateChooser dtpFrom;
    private com.toedter.calendar.JDateChooser dtpTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList lstAssociations;
    private javax.swing.JList lstSeasons;
    private javax.swing.JList lstTournaments;
    private javax.swing.JTable tblPhases;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtEntryDate;
    private javax.swing.JTextField txtEntryUser;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtModDate;
    private javax.swing.JTextField txtModUser;
    private javax.swing.JTextArea txtName;
    private javax.swing.JTextField txtSeasonId;
    private javax.swing.JTextArea txtSeasonName;
    private javax.swing.JTextField txtSeasonShortName;
    private javax.swing.JTextField txtShortName;
    // End of variables declaration//GEN-END:variables
    
    private int action;
    private DBTournament dbTournament;
    private DBSeason dbSeason;
    private UserRight right;
    private Item user;
    
    private void myInitComponents(UserRight right, Item user) {
        this.user = user;
        this.right = right;

        dbTournament = new DBTournament();
        dbSeason = new DBSeason();
        lstAssociations.addListSelectionListener(new AssociationListSelection());
        lstTournaments.addListSelectionListener(new TournamentListSelection());
        lstSeasons.addListSelectionListener(new SeasonListSelection());
        btnNew.setActionCommand("New");
        btnNew.addActionListener(this);
        btnEdit.setActionCommand("Edit");
        btnEdit.addActionListener(this);
        btnDelete.setActionCommand("Delete");
        btnDelete.addActionListener(this);

        btnNewD.setActionCommand("NewD");
        btnNewD.addActionListener(this);
        btnEditD.setActionCommand("EditD");
        btnEditD.addActionListener(this);
        btnDeleteD.setActionCommand("DeleteD");
        btnDeleteD.addActionListener(this);

        tblPhases.getSelectionModel().addListSelectionListener(new TablePhaseSelection());
        tblPhases.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        cmbPhases.setModel(new PhaseComboBoxModel(1));
        btnNewP.setActionCommand("NewP");
        btnNewP.addActionListener(this);
        btnEditP.setActionCommand("EditP");
        btnEditP.addActionListener(this);
        btnRemove.setActionCommand("Remove");
        btnRemove.addActionListener(this);

        loadAssociations();
        setNormalScenario();
    }

    private void setNormalScenario(){
        lstAssociations.setEnabled(true);
        lstTournaments.setEnabled(true);
        
        chkActive.setEnabled(false);
        txtShortName.setEnabled(false);
        txtName.setEnabled(false);
        lstSeasons.setEnabled(true);

        dtpFrom.setEnabled(false);
        dtpTo.setEnabled(false);
        txtSeasonShortName.setEnabled(false);
        txtSeasonName.setEnabled(false);
        
        cmbPhases.setEnabled(false);
        txtDescription.setEnabled(false);
        
        btnNew.setEnabled(right.getIsCreated());
	if (lstTournaments.getModel().getSize() > 0) {
            btnEdit.setEnabled(right.getIsUpdated());
            btnDelete.setEnabled(right.getIsDeleted());
            btnNewD.setEnabled(right.getIsCreated());
            btnNewP.setEnabled(right.getIsCreated());
            btnEditP.setEnabled(right.getIsCreated());
            btnRemove.setEnabled(right.getIsCreated());
        } else {
            btnEdit.setEnabled(false);
            btnDelete.setEnabled(false);
            btnNewD.setEnabled(false);
            btnNewP.setEnabled(false);
            btnEditP.setEnabled(false);
            btnRemove.setEnabled(false);
        }
            
        if (lstSeasons.getModel().getSize() > 0){
            btnEditD.setEnabled(right.getIsUpdated());
            btnDeleteD.setEnabled(right.getIsDeleted());
            btnNewP.setEnabled(right.getIsCreated());
            btnEditP.setEnabled(right.getIsCreated());
            btnRemove.setEnabled(right.getIsCreated());
        } else {
            btnEditD.setEnabled(false);
            btnDeleteD.setEnabled(false);
            btnNewP.setEnabled(false);
            btnEditP.setEnabled(false);
            btnRemove.setEnabled(false);
        }
        
        if (tblPhases.getModel().getRowCount() > 0){
            btnEditP.setEnabled(right.getIsDeleted());
            btnRemove.setEnabled(right.getIsDeleted());
        } else {
            btnEditP.setEnabled(false);
            btnRemove.setEnabled(false);
        }
        
        btnNew.setText("New");
        btnEdit.setText("Edit");
        
        btnNewD.setText("New");
        btnEditD.setText("Edit");

        btnNewP.setText("New");
        btnEditP.setText("Edit");
        
        action = 0;         // no action
    }

    private void loadAssociations(){
        DBAssociation dbAssociation = new DBAssociation();
        lstAssociations.setModel(new AssociationListModel(dbAssociation.getList(1)));
        if (lstAssociations.getModel().getSize() > 0){
            lstAssociations.setSelectedIndex(0);
        } else {
            loadTournaments();
        }
    }
    
    private class AssociationListSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                loadTournaments();
            }
        }
    }

    private void loadTournaments(){
        long associationId = lstAssociations.getSelectedIndex();
        if (associationId != -1){
            associationId = ((Association)lstAssociations.getSelectedValue()).getId();
        }
        lstTournaments.setModel(new TournamentListModel(dbTournament.getListByAssociation(associationId)));
        if (lstTournaments.getModel().getSize() > 0){
            lstTournaments.setSelectedIndex(0);
        } else {
            // clear data fields
            clearFields();
            loadSeasons();
        }
    }

    private void clearFields(){
        txtId.setText("");
        txtShortName.setText("");
        txtName.setText("");
        chkActive.setSelected(true);
        
        txtEntryUser.setText("");
        txtEntryDate.setText("");
        txtModUser.setText("");
        txtModDate.setText("");
    }

    private class TournamentListSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                loadTournamentFields();
                loadSeasons();
            }
        }
    }
    
    private void loadTournamentFields(){
        if (lstTournaments.getSelectedIndex() != -1) {
            Tournament obj = (Tournament)lstTournaments.getSelectedValue();
            txtId.setText(Long.toString(obj.getId()));
            txtShortName.setText(obj.getShortName());
            txtName.setText(obj.getName());
            chkActive.setSelected(obj.getIsActive());
            txtEntryUser.setText(obj.getTrack().getEntryUser().getName());
            txtEntryDate.setText(new SimpleDateFormat("MM/dd/yy hh:mm:ss").format(obj.getTrack().getEntryDate()));
            txtModUser.setText(obj.getTrack().getModUser().getName());
            txtModDate.setText(new SimpleDateFormat("MM/dd/yy hh:mm:ss").format(obj.getTrack().getModDate()));
            btnNewD.setEnabled(right.getIsCreated());
            btnEdit.setEnabled(right.getIsUpdated());
            btnDelete.setEnabled(right.getIsDeleted());
        }
    }
        
    private void loadSeasons() {
        long tournamentId = lstTournaments.getSelectedIndex();
        if (tournamentId != -1 ){
            tournamentId = ((Tournament)lstTournaments.getSelectedValue()).getId();
        }
        
        lstSeasons.setModel(new SeasonListModel(dbSeason.getList(tournamentId)));
        if (lstSeasons.getModel().getSize() > 0){
            lstSeasons.setSelectedIndex(0);
        } else {
            clearSeasonFields();
            btnEditD.setEnabled(false);
            btnDeleteD.setEnabled(false);
            
            loadPhases(-1);     // clear lstPhases control
        }
    }

    private class SeasonListSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                if (lstSeasons.getSelectedIndex() != -1){
                    Season season = (Season)lstSeasons.getSelectedValue();
                    loadSeasonFields(season);
                    loadPhases(season.getId());
                }
            }
        }
    }
    
    private void clearSeasonFields(){
        dtpFrom.setDate(new Date());
        dtpTo.setDate(new Date());
        txtSeasonId.setText("");
        txtSeasonShortName.setText("");
        txtSeasonName.setText("");
    }

    private void loadSeasonFields(Season season){
        if (season != null) {
            txtSeasonId.setText(Long.toString(season.getId()));
            dtpFrom.setDate(season.getFrom());
            dtpTo.setDate(season.getTo());
            txtSeasonShortName.setText(season.getShortName());
            txtSeasonName.setText(season.getName());
            btnEditD.setEnabled(right.getIsUpdated());
            btnDeleteD.setEnabled(right.getIsDeleted());
            btnNewP.setEnabled(right.getIsCreated());
        } else {
            clearSeasonFields();
            btnEditD.setEnabled(false);
            btnDeleteD.setEnabled(false);
            btnNewP.setEnabled(false);
            btnEditP.setEnabled(false);
            btnRemove.setEnabled(false);
        }
    }
    
    private class TablePhaseSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                loadPhaseFields();
            }
        }
    }

    private void loadPhaseFields(){
        TableModel tableModel = tblPhases.getModel();
        long selectedRow = tblPhases.getSelectedRow();
        if (selectedRow != -1) {
            Item item = (Item)tableModel.getValueAt(tblPhases.getSelectedRow(), 0);
            setCmbPhases(item.getId());
            txtDescription.setText((String)tableModel.getValueAt(tblPhases.getSelectedRow(), 1));
            btnRemove.setEnabled(right.getIsDeleted());
        } else {
            btnRemove.setEnabled(false);
        }
    }

    private void setCmbPhases(long id){
        int index = -1;
        Phase obj;
        for (int i=0;i<cmbPhases.getItemCount() && index == -1;i++){
            obj = (Phase)cmbPhases.getItemAt(i);
            if (obj.getId()== id){
                index = i;
            }
        }
        cmbPhases.setSelectedIndex(index);
        cmbPhases.repaint();
    }
    
    private void loadPhases(long seasonId){
        tblPhases.setModel(new SeasonPhaseTableModel(dbSeason.getPhasesList(seasonId)));
        TableColumnAdjuster taPhases= new TableColumnAdjuster(tblPhases);
        taPhases.setOnlyAdjustLarger(false);
        taPhases.adjustColumns();
        TableModel tableModel = tblPhases.getModel();
        if (tableModel.getRowCount() > 0){
            tblPhases.setRowSelectionInterval(0, 0);
        }
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (null != e.getActionCommand()){
            switch (e.getActionCommand()) {
                case "New":
                    newRecord();
                    break;
                case "Edit":
                    editRecord();
                    break;
                case "Delete":
                    deleteRecord();
                    break;
                case "NewD":
                    newRecordD();
                    break;
                case "EditD":
                    editRecordD();
                    break;
                case "DeleteD":
                    deleteRecordD();
                    break;
                case "NewP":
                    addPhase();
                    break;
                case "EditP":
                    editPhase();
                    break;
                case "Remove":
                    removePhase();
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Action not identified", "Unkown", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        }
    }

    private void newRecord() {
        if (action == 0){
            setNewScenario();
        }else{
            String msg = validateData();
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            }else if (action == 1){                  // insert action
                msg = insertRecord();
                if (msg.isEmpty()){
                    setNormalScenario();
                    loadTournaments();
                    JOptionPane.showMessageDialog(this, "Record created succesfully!", "New", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            }else{                                // update action
                msg = updateRecord();
                if (msg.isEmpty()){
                    setNormalScenario();
                    updateTournamentList();
                    JOptionPane.showMessageDialog(this, "Record updated succesfully!", "Edit", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void setNewScenario(){
        lstAssociations.setEnabled(false);
        lstTournaments.setEnabled(false);
        chkActive.setEnabled(false);
        
        txtShortName.setEnabled(true);
        txtName.setEnabled(true);
        lstSeasons.setEnabled(false);
        txtSeasonShortName.setEnabled(false);
        txtSeasonName.setEnabled(false);
        
        btnNew.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(false);
        btnNewD.setEnabled(false);
        btnEditD.setEnabled(false);
        btnDeleteD.setEnabled(false);
        
        btnNew.setText("Save");
        btnEdit.setText("Cancel");
        
        clearFields();
        action = 1;     // new action
    }
    
    private String validateData() {
        String msg;
        if (txtShortName.getText().equals("")){
            msg = "Name field cannot be empty";
        } else if (txtName.getText().equals("")){
            msg = "Description field cannot be empty";    
        } else if (lstAssociations.getSelectedIndex() == -1){
            msg = "There is no association selected.";    
        } else {
            msg = "";
        }
        return msg;
    }

    private String insertRecord() {
        Association association = (Association)lstAssociations.getSelectedValue();
        Tournament obj = new Tournament(
              -1
            , txtShortName.getText()
            , txtName.getText()
            , chkActive.isSelected()
            , new Item(association.getId(), association.getShortName())
            , new TrackChange(null, user, null, null)
        );
        return dbTournament.insert(obj);
    }
    
    private String updateRecord() {
        Association association = (Association)lstAssociations.getSelectedValue();
        Tournament obj = new Tournament(
              Long.parseLong(txtId.getText())
            , txtShortName.getText()
            , txtName.getText()
            , chkActive.isSelected()
            , new Item(association.getId(), association.getShortName())
            , new TrackChange(null, null, null, user)
        );
        return dbTournament.update(obj);
    }

    private void updateTournamentList(){
        if (lstTournaments.getSelectedIndex() != -1){
            Date date = new Date();
            Association association = (Association)lstAssociations.getSelectedValue();
            Tournament obj = (Tournament)lstTournaments.getSelectedValue();
            obj.setShortName(txtShortName.getText());
            obj.setName(txtName.getText());
            obj.setIsActive(chkActive.isSelected());
            obj.getAssociation().setId(association.getId());
            obj.getAssociation().setName(association.getShortName());
            obj.getTrack().setModDate(new Timestamp(date.getTime()));
            obj.getTrack().setModUser(user);
        }
    }
    
    private void editRecord() {
        if (action==0){
            setEditScenario();
        } else {
            setNormalScenario();
            loadTournaments();
        }
    }

    private void setEditScenario(){
        lstAssociations.setEnabled(false);
        lstTournaments.setEnabled(false);
        
        chkActive.setEnabled(true);
        txtShortName.setEnabled(true);
        txtName.setEnabled(true);
        lstSeasons.setEnabled(false);
        dtpFrom.setEnabled(false);
        dtpTo.setEnabled(false);
        txtSeasonShortName.setEnabled(false);
        txtSeasonName.setEnabled(false);
        cmbPhases.setEnabled(false);
        txtDescription.setEnabled(false);
                
        btnNew.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(false);
        btnNewD.setEnabled(false);
        btnEditD.setEnabled(false);
        btnDeleteD.setEnabled(false);
        btnNewP.setEnabled(false);
        btnEditP.setEnabled(false);
        btnRemove.setEnabled(false);
        
        btnNew.setText("Save");
        btnEdit.setText("Cancel");
        
        action = 2;     // edit action
    }
    
    private void deleteRecord() {
        int ans = JOptionPane.showOptionDialog(this
                , "You are about to delete the object \"" + txtShortName.getText() + "\".\nAre you sure?"
                , "Delete"
                , JOptionPane.OK_CANCEL_OPTION
                , JOptionPane.QUESTION_MESSAGE
                , null
                , null
                , null);
        if (ans == JOptionPane.OK_OPTION){
            String msg = dbTournament.delete(Long.parseLong(txtId.getText()));
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                loadTournaments();
                JOptionPane.showMessageDialog(this, "Record deleted succesfully!", "Delete", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
    
    private void newRecordD() {
        if (action == 0){
            setNewScenarioD();
        }else{
            String msg = validateDataD();
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            } else if (action == 1){                  // insert action
                msg = insertRecordD();
                if (msg.isEmpty()){
                    setNormalScenario();
                    loadSeasons();
                    JOptionPane.showMessageDialog(this, "Record created succesfully!", "New", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {                                // update action
                msg = updateRecordD();
                if (msg.isEmpty()){
                    setNormalScenario();
                    JOptionPane.showMessageDialog(this, "Record updated succesfully!", "Edit", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
    
    private void setNewScenarioD() {
        lstAssociations.setEnabled(false);
        lstTournaments.setEnabled(false);
        
        txtShortName.setEnabled(false);
        txtName.setEnabled(false);
        lstSeasons.setEnabled(false);
        dtpFrom.setEnabled(true);
        dtpTo.setEnabled(true);
        txtSeasonShortName.setEnabled(true);
        txtSeasonName.setEnabled(true);
        cmbPhases.setEnabled(false);
        txtDescription.setEnabled(false);
        
        btnNew.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnNewD.setEnabled(true);
        btnEditD.setEnabled(true);
        btnDeleteD.setEnabled(false);
        btnNewP.setEnabled(false);
        btnEditP.setEnabled(false);
        btnRemove.setEnabled(false);
        
        btnNewD.setText("Save");
        btnEditD.setText("Cancel");
        
        clearSeasonFields();
        action = 1;         // new action
    }
    
    private String validateDataD() {
        String msg;
        if (txtShortName.getText().equals("")){
            msg = "Season name field cannot be empty";
        } else if (txtName.getText().equals("")){
            msg = "Season Description field cannot be empty";
        } else if (dtpFrom.getDate().after(dtpTo.getDate())) {
            msg = "Date from cannot be greather than date to.";
        } else {
            msg = "";
        }
        return msg;
    }
   
    private String insertRecordD() {
        Item tournament = new Item(Long.parseLong(txtId.getText()),txtShortName.getText());
        
        Season obj = new Season(
              -1
            , new Timestamp(dtpFrom.getDate().getTime())
            , new Timestamp(dtpTo.getDate().getTime())
            , txtSeasonShortName.getText()
            , txtSeasonName.getText()
            , tournament
        );
        
        return dbSeason.insert(obj, new TrackChange(null, user, null, null));
    }

    private String updateRecordD() {
        Item tournament = new Item(Long.parseLong(txtId.getText()),txtShortName.getText());

        Season obj = new Season(
              Long.parseLong(txtSeasonId.getText())
            , new Timestamp(dtpFrom.getDate().getTime())
            , new Timestamp(dtpTo.getDate().getTime())
            , txtSeasonShortName.getText()
            , txtSeasonName.getText()
            , tournament
        );
        
        return dbSeason.update(obj, new TrackChange(null, null, null, user));
    }
        
    private void editRecordD() {
        if (action==0){
            setEditScenarioD();
        } else {
            setNormalScenario();
            Season season = (Season)lstSeasons.getSelectedValue();
            loadSeasonFields(season);
        }
    }

    private void setEditScenarioD(){
        lstAssociations.setEnabled(false);
        lstTournaments.setEnabled(false);
        
        txtShortName.setEnabled(false);
        txtName.setEnabled(false);
        lstSeasons.setEnabled(false);
        dtpFrom.setEnabled(true);
        dtpTo.setEnabled(true);
        txtSeasonShortName.setEnabled(true);
        txtSeasonName.setEnabled(true);
        cmbPhases.setEnabled(false);
        txtDescription.setEnabled(false);
        
        btnNew.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnNewD.setEnabled(true);
        btnEditD.setEnabled(true);
        btnDeleteD.setEnabled(false);
        btnNewP.setEnabled(false);
        btnEditP.setEnabled(false);
        btnRemove.setEnabled(false);
        
        btnNewD.setText("Save");
        btnEditD.setText("Cancel");

        action = 2;         // edit action
    }

    private void deleteRecordD() {
        int ans = JOptionPane.showOptionDialog(
                this
                , "You are about to delete the season \"" 
                        + txtShortName.getText()
                        + "\".\nAre you sure?"
                , "Delete"
                , JOptionPane.OK_CANCEL_OPTION
                , JOptionPane.QUESTION_MESSAGE
                , null
                , null
                , null);
        if (ans == JOptionPane.OK_OPTION){
            String msg = dbSeason.delete(Long.parseLong(txtSeasonId.getText()));
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                loadSeasons();
                JOptionPane.showMessageDialog(this, "Record deleted succesfully!", "Delete", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    private void addPhase(){
        if (action == 0){
            setAddPhaseScenario();
        } else {
            String msg = validateDataPhase();
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            } else if (action == 1) {                  // Add action
                msg = insertPhase();
                if (msg.isEmpty()){
                    setNormalScenario();
                    Season season = (Season)lstSeasons.getSelectedValue();
                    loadPhases(season.getId());
                    JOptionPane.showMessageDialog(this, "Record created succesfully!", "New", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {                                // update action
                msg = updatePhase();
                if (msg.isEmpty()){
                    int rowSelected = tblPhases.getSelectedRow();
                    tblPhases.setValueAt((String)txtDescription.getText(), rowSelected, 1);
                    setNormalScenario();
                    JOptionPane.showMessageDialog(this, "Record updated succesfully!", "Edit", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void setAddPhaseScenario() {
        lstAssociations.setEnabled(false);
        lstTournaments.setEnabled(false);
        lstSeasons.setEnabled(false);
        
        cmbPhases.setEnabled(true);
        txtDescription.setEnabled(true);
        
        btnNew.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnNewD.setEnabled(false);
        btnEditD.setEnabled(false);
        btnDeleteD.setEnabled(false);
        btnRemove.setEnabled(false);
        
        btnNewP.setText("Save");
        btnEditP.setText("Cancel");
        
        action = 1;         // new action
    }
    
    private String insertPhase() {
        long seasonId = Long.parseLong(txtSeasonId.getText());
        long phaseId = ((Phase)cmbPhases.getSelectedItem()).getId();
        String desc = txtDescription.getText();
        return dbSeason.addPhaseSeason( seasonId, phaseId, desc, user.getId());
    }

    private String validateDataPhase() {
        String msg;
        if (cmbPhases.getSelectedIndex() == -1){
            msg = "Phase field cannot be empty";
        } else if (txtDescription.getText().equals("")){
            msg = "Description field cannot be empty";
        }else {
            msg = "";
        }
        return msg;
    }
    
    private void editPhase() {
        if (action==0){
            setEditPhaseScenario();
        } else {
            setNormalScenario();
            loadPhaseFields();
        }
    }
    
    private void setEditPhaseScenario() {
        lstAssociations.setEnabled(false);
        lstTournaments.setEnabled(false);
        lstSeasons.setEnabled(false);
        cmbPhases.setEnabled(false);
        
        txtDescription.setEnabled(true);
        
        btnNew.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnNewD.setEnabled(false);
        btnEditD.setEnabled(false);
        btnDeleteD.setEnabled(false);
        btnRemove.setEnabled(false);
        
        btnNewP.setText("Save");
        btnEditP.setText("Cancel");
        
        action = 2;         // edit action
    }
    
    private String updatePhase() {
        long seasonId = Long.parseLong(txtSeasonId.getText());
        long phaseId = ((Phase)cmbPhases.getSelectedItem()).getId();
        String desc = txtDescription.getText();
        return dbSeason.updatePhaseSeason( seasonId, phaseId, desc, user.getId());
    }

    private void removePhase(){
        int ans = JOptionPane.showOptionDialog(
                this
                , "You are about to remove the phase \"" 
                        + ((Phase)cmbPhases.getSelectedItem()).getName()
                        + "\".\nAre you sure?"
                , "Remove"
                , JOptionPane.OK_CANCEL_OPTION
                , JOptionPane.QUESTION_MESSAGE
                , null
                , null
                , null);
        if (ans == JOptionPane.OK_OPTION){
            String msg = dbSeason.removePhase(Long.parseLong(txtSeasonId.getText()), ((Phase)cmbPhases.getSelectedItem()).getId());
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                Season season = (Season)lstSeasons.getSelectedValue();
                loadPhases(season.getId());
                JOptionPane.showMessageDialog(this, "Record deleted succesfully!", "Delete", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

}
