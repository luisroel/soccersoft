/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package soccer.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import security.entities.Item;
import security.entities.Status;
import security.entities.TrackChange;
import security.entities.UserRight;
import security.models.StatusComboBoxModel;
import soccer.database.DBReferee;
import soccer.entities.Country;
import soccer.entities.Referee;
import soccer.models.CountryComboBoxModel;
import soccer.models.RefereeListModel;

/**
 *
 * @author Administrator
 */
public class FrmReferee extends javax.swing.JInternalFrame implements ActionListener, ItemListener, ListSelectionListener {

    /**
     * Creates new form FrmReferee
     */
    public FrmReferee(UserRight right, Item user) {
        initComponents();
        myInitComponents(right, user);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cmbStatus = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstReferees = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        chkActive = new javax.swing.JCheckBox();
        btnNew = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtNickname = new javax.swing.JTextField();
        txtFirstName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtMiddleName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        dtpBirthdate = new org.jdesktop.swingx.JXDatePicker();
        jLabel12 = new javax.swing.JLabel();
        cmbCountry = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtEntryUser = new javax.swing.JTextField();
        txtModUser = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtEntryDate = new javax.swing.JTextField();
        txtModDate = new javax.swing.JTextField();

        setClosable(true);
        setTitle("Referees");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter:"));

        cmbStatus.setName(""); // NOI18N

        jScrollPane1.setViewportView(lstReferees);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.Alignment.LEADING, 0, 116, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Referee info:"));

        jLabel1.setText("Id:");

        txtId.setEnabled(false);

        chkActive.setText("Active");

        btnNew.setText("New");

        jLabel2.setText("Nickname:");

        jLabel3.setText("First name:");

        btnEdit.setText("Edit");

        btnDelete.setText("Delete");

        jLabel8.setText("Middle name:");

        jLabel9.setText("Last Name:");

        jLabel11.setText("Birthdate:");

        dtpBirthdate.setName(""); // NOI18N

        jLabel12.setText("Country:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel8))
                        .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(14, 14, 14)
                            .addComponent(jLabel2)))
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMiddleName, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dtpBirthdate, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chkActive))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(txtNickname, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmbCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNew, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dtpBirthdate, txtFirstName, txtLastName, txtMiddleName});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEdit)
                        .addGap(134, 134, 134)
                        .addComponent(btnDelete))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(chkActive)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtNickname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmbCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel12)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dtpBirthdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtMiddleName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtLastName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Change info:"));

        jLabel4.setText("Entry User:");

        jLabel5.setText("Mod. User:");

        txtEntryUser.setEnabled(false);

        txtModUser.setEnabled(false);

        jLabel6.setText("Entry Date:");

        jLabel7.setText("Mod. Date:");

        txtEntryDate.setEnabled(false);

        txtModDate.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEntryDate)
                    .addComponent(txtEntryUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtModUser)
                    .addComponent(txtModDate))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEntryUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtModUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEntryDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtModDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNew;
    private javax.swing.JCheckBox chkActive;
    private javax.swing.JComboBox cmbCountry;
    private javax.swing.JComboBox cmbStatus;
    private org.jdesktop.swingx.JXDatePicker dtpBirthdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstReferees;
    private javax.swing.JTextField txtEntryDate;
    private javax.swing.JTextField txtEntryUser;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtMiddleName;
    private javax.swing.JTextField txtModDate;
    private javax.swing.JTextField txtModUser;
    private javax.swing.JTextField txtNickname;
    // End of variables declaration//GEN-END:variables
    
    private int action;
    private DBReferee dbReferee;
    private UserRight right;
    private Item user;
 
    /**
     * this method starts up all components
     * @param right
     * @param user 
     */
    private void myInitComponents(UserRight right, Item user) {
        this.user = user;
        this.right = right;
        setNormalScenario();

        dbReferee = new DBReferee();
        btnNew.setActionCommand("New");
        btnNew.addActionListener(this);
        btnEdit.setActionCommand("Edit");
        btnEdit.addActionListener(this);
        btnDelete.setActionCommand("Delete");
        btnDelete.addActionListener(this);
        cmbStatus.addItemListener(this);
        cmbCountry.setModel(new CountryComboBoxModel(1));
        lstReferees.addListSelectionListener(this);
        
        loadStatus();
    }
    
    private void setNormalScenario(){
        cmbStatus.setEnabled(true);
        chkActive.setEnabled(false);
        lstReferees.setEnabled(true);
        txtNickname.setEnabled(false);
        dtpBirthdate.setEnabled(false);
        txtFirstName.setEnabled(false);
        txtMiddleName.setEnabled(false);
        txtLastName.setEnabled(false);
        cmbCountry.setEnabled(false);
        
        btnNew.setEnabled(right.getIsCreated());
        btnEdit.setEnabled(right.getIsUpdated());
        btnDelete.setEnabled(right.getIsDeleted());
        
        btnNew.setText("New");
        btnEdit.setText("Edit");
        
        action = 0;         // no action
    }
    
    private void loadStatus(){
        cmbStatus.setModel(new StatusComboBoxModel());
        cmbStatus.setSelectedIndex(1);
    }
    
    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getStateChange() == ItemEvent.SELECTED){
            loadList();
        }
    }

    private void loadList(){
        if (cmbStatus.getModel().getSize() > 0) {
            Status status = (Status)cmbStatus.getSelectedItem();
            lstReferees.setModel(new RefereeListModel(dbReferee.getList(status.getId())));
            if (lstReferees.getModel().getSize() > 0){
                lstReferees.setSelectedIndex(0);
            } else {
                // clear data fields
                clearFields();
            }
        } else {
            // clear list and data fields
            clearFields();
        }
    }

    private void clearFields(){
        txtId.setText("");
        chkActive.setSelected(true);
        txtNickname.setText("");
        dtpBirthdate.setDate(new Date());
        txtFirstName.setText("");
        txtLastName.setText("");
        cmbCountry.setSelectedIndex(-1);
        txtEntryUser.setText("");
        txtEntryDate.setText("");
        txtModUser.setText("");
        txtModDate.setText("");
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        loadDetail();
    }

    private void loadDetail(){
        if (!lstReferees.isSelectionEmpty()){
            Referee obj = (Referee)lstReferees.getSelectedValue();
            txtId.setText(Long.toString(obj.getId()));
            txtNickname.setText(obj.getNickName());
            txtFirstName.setText(obj.getFirstName());
            txtMiddleName.setText(obj.getMiddleName());
            txtLastName.setText(obj.getLastName());
            chkActive.setSelected(obj.getIsActive());
            dtpBirthdate.setDate(new Date(obj.getBirthdate().getTime()));
            setCmbCountry(obj.getCountry().getId());
            txtEntryUser.setText(obj.getTrack().getEntryUser().getName());
            txtEntryDate.setText(new SimpleDateFormat("MM/dd/yyyy hh:mm:ss").format(obj.getTrack().getEntryDate()));
            txtModUser.setText(obj.getTrack().getModUser().getName());
            txtModDate.setText(new SimpleDateFormat("MM/dd/yyyy hh:mm:ss").format(obj.getTrack().getModDate()));
        }
    }
       
    private void setCmbCountry(long countryId){
        int index = -1;
        Country obj;
        for (int i=0;i<cmbCountry.getItemCount() && index == -1;i++){
            obj = (Country)cmbCountry.getItemAt(i);
            if (obj.getId()== countryId){
                index = i;
            }
        }
        cmbCountry.setSelectedIndex(index);
        cmbCountry.repaint();        
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (null != e.getActionCommand()){
            switch (e.getActionCommand()) {
                case "New":
                    newRecord();
                    break;
                case "Edit":
                    editRecord();
                    break;
                case "Delete":
                    deleteRecord();
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Action not identified", "Unkown", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        }
    }

    private void newRecord() {
        if (action == 0){
            setNewScenario();
        }else{
            String msg = validateData();
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            }else if (action == 1){                  // insert action
                msg = insertRecord();
                if (msg.isEmpty()){
                    setNormalScenario();
                    loadList();
                    JOptionPane.showMessageDialog(this, "Record created succesfully!", "New", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            }else{                                // update action
                msg = updateRecord();
                if (msg.isEmpty()){
                    setNormalScenario();
                    updateRow();
                    JOptionPane.showMessageDialog(this, "Record updated succesfully!", "Edit", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, msg, "Saving Data Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void setNewScenario(){
        cmbStatus.setEnabled(false);
        lstReferees.setEnabled(false);
        chkActive.setEnabled(false);
        txtNickname.setEnabled(true);       
        txtFirstName.setEnabled(true);
        txtMiddleName.setEnabled(true);
        txtLastName.setEnabled(true);
        dtpBirthdate.setEnabled(true);
        cmbCountry.setEnabled(true);
        btnNew.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(false);
        
        btnNew.setText("Save");
        btnEdit.setText("Cancel");
        
        clearFields();
        action = 1;     // new action
    }
    
    private String validateData() {
        String msg;
        if (txtFirstName.getText().equals("")){
            msg = "First name field cannot be empty";
        } else if (txtNickname.getText().equals("")){
            msg = "Short Name field cannot be empty";
        } else if (txtLastName.getText().equals("")){
            msg = "Last name field cannot be empty";
        } else if (cmbCountry.getSelectedIndex() == -1) {
            msg = "Country field cannot be empty";
        } else {
            msg = "";
        }
        return msg;
    }

    private String insertRecord() {
        Country country = (Country)cmbCountry.getSelectedItem();
        Referee obj = new Referee(
              -1
            , txtNickname.getText()
            , txtFirstName.getText()
            , txtMiddleName.getText()
            , txtLastName.getText()
            , chkActive.isSelected()
            , new Timestamp(dtpBirthdate.getDate().getTime())
            , new Item(country.getId(), country.getShortName())
            , new TrackChange(null, user, null, null)
        );
        
        return dbReferee.insert(obj);
    }
    
    private String updateRecord() {
        Country country = (Country)cmbCountry.getSelectedItem();
        Referee obj = new Referee(
              Long.parseLong(txtId.getText())
            , txtNickname.getText()
            , txtFirstName.getText()
            , txtMiddleName.getText()
            , txtLastName.getText()
            , chkActive.isSelected()
            , new Timestamp(dtpBirthdate.getDate().getTime())
            , new Item(country.getId(), country.getShortName())
            , new TrackChange(null, null, null, user)
        );
        
        return dbReferee.update(obj);
    }

    private void updateRow(){
        Date date = new Date();
        Country country = (Country)cmbCountry.getSelectedItem();
        Referee obj = (Referee)lstReferees.getSelectedValue();
        obj.setIsActive(chkActive.isSelected());
        obj.setNickName(txtNickname.getText());
        obj.setFirstName(txtFirstName.getText());
        obj.setMiddleName(txtMiddleName.getText());
        obj.setLastName(txtLastName.getText());
        obj.setBirthdate(new Timestamp(dtpBirthdate.getDate().getTime()));
        obj.setCountry(new Item(country.getId(), country.getShortName()));
        obj.getTrack().setModUser(user);
        obj.getTrack().setModDate(new Timestamp(date.getTime()));
        txtModUser.setText(user.getName());
        txtModDate.setText(new SimpleDateFormat("MM/dd/yyyy hh:mm:ss").format(date));
    }
    
    private void editRecord() {
        if (action==0){
            setEditScenario();
        } else {
            setNormalScenario();
            loadDetail();
        }
    }

    private void setEditScenario(){
        cmbStatus.setEnabled(false);
        chkActive.setEnabled(true);
        lstReferees.setEnabled(false);
        txtNickname.setEnabled(true);
        txtFirstName.setEnabled(true);
        txtMiddleName.setEnabled(true);
        txtLastName.setEnabled(true);
        dtpBirthdate.setEnabled(true);
        cmbCountry.setEnabled(true);
        btnNew.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(false);
        
        btnNew.setText("Save");
        btnEdit.setText("Cancel");
        
        action = 2;     // edit action
    }
    
    private void deleteRecord() {
        int ans = JOptionPane.showOptionDialog(
                this
                , "You are about to delete the object \"" 
                        + txtFirstName.getText()
                        + ", "
                        + txtLastName.getText() 
                        + "\".\nAre you sure?"
                , "Delete"
                , JOptionPane.OK_CANCEL_OPTION
                , JOptionPane.QUESTION_MESSAGE
                , null
                , null
                , null);
        if (ans == JOptionPane.OK_OPTION){
            String msg = dbReferee.delete(Long.parseLong(txtId.getText()));
            if (!msg.isEmpty()){
                JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                loadList();
                JOptionPane.showMessageDialog(this, "Record deleted succesfully!", "Delete", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
}
