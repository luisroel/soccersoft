/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package soccer.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyChangeEvent;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import security.entities.Item;
import security.entities.UserRight;
import security.models.ItemListModel;
import soccer.database.DBTableData;
import soccer.database.DBStat;
import soccer.entities.Summary;
import soccer.entities.TableData;
import soccer.models.ItemComboBoxModel;
import soccer.models.TableDataTableModel;
import soccer.models.StandingTableModel;
import soccer.models.SummaryTableModel;
import utils.FloatRenderer;
import utils.TableColumnAdjuster;
import utils.TimestampRenderer;

/**
 *
 * @author Administrator
 */
public class FrmTableData extends javax.swing.JInternalFrame implements ActionListener, ItemListener{
    
    /**
     * Creates new form FrmUsers
     */
    public FrmTableData(UserRight right, Item user) {
        initComponents();
        myInitComponents(right, user);
    }

    /**
     * This method is called fromDate within the constructor toDate initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstTournament = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        lstAssociation = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        dtpDate = new com.toedter.calendar.JDateChooser();
        spnWinFrom = new javax.swing.JSpinner();
        spnWinTo = new javax.swing.JSpinner();
        btnApply = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        spnOddFrom = new javax.swing.JSpinner();
        spnOddTo = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbReport = new javax.swing.JComboBox<>();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        tblPNPN = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        tblPNPP = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        tblPNNN = new javax.swing.JTable();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane15 = new javax.swing.JScrollPane();
        tblPPPN = new javax.swing.JTable();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane16 = new javax.swing.JScrollPane();
        tblNNPN = new javax.swing.JTable();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane17 = new javax.swing.JScrollPane();
        tblNNNN = new javax.swing.JTable();
        jPanel17 = new javax.swing.JPanel();
        jScrollPane18 = new javax.swing.JScrollPane();
        tblPNNP = new javax.swing.JTable();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        tblPPPP = new javax.swing.JTable();
        jPanel19 = new javax.swing.JPanel();
        jScrollPane20 = new javax.swing.JScrollPane();
        tblNNPP = new javax.swing.JTable();
        jPanel20 = new javax.swing.JPanel();
        jScrollPane21 = new javax.swing.JScrollPane();
        tblPPNN = new javax.swing.JTable();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane22 = new javax.swing.JScrollPane();
        tblNPPN = new javax.swing.JTable();
        jPanel22 = new javax.swing.JPanel();
        jScrollPane23 = new javax.swing.JScrollPane();
        tblNNNP = new javax.swing.JTable();
        jPanel23 = new javax.swing.JPanel();
        jScrollPane24 = new javax.swing.JScrollPane();
        tblPPNP = new javax.swing.JTable();
        jPanel24 = new javax.swing.JPanel();
        jScrollPane25 = new javax.swing.JScrollPane();
        tblNPNN = new javax.swing.JTable();
        jPanel25 = new javax.swing.JPanel();
        jScrollPane26 = new javax.swing.JScrollPane();
        tblNPPP = new javax.swing.JTable();
        jPanel26 = new javax.swing.JPanel();
        jScrollPane27 = new javax.swing.JScrollPane();
        tblNPNP = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblH = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblV = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblX = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblOne = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblXOne = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblOverall = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblHome = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        tblAway = new javax.swing.JTable();
        jPanel27 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        spnHour = new javax.swing.JSpinner();
        jScrollPane28 = new javax.swing.JScrollPane();
        tblSummary = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        spnDays = new javax.swing.JSpinner();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Table Data");
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(1300, 680));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter:"));

        jLabel2.setText("Association:");

        jLabel3.setText("Tournament:");

        jScrollPane4.setViewportView(lstTournament);

        jScrollPane6.setViewportView(lstAssociation);

        jLabel1.setText("Date:");

        dtpDate.setDateFormatString("MM/dd/yyyy");

        spnWinFrom.setModel(new javax.swing.SpinnerNumberModel(-0.01f, null, null, 0.01f));

        spnWinTo.setModel(new javax.swing.SpinnerNumberModel(1.01f, null, null, 0.01f));

        btnApply.setText("Apply");

        btnCreate.setText("Create Stats");

        spnOddFrom.setModel(new javax.swing.SpinnerNumberModel(1.0f, 1.0f, null, 0.1f));

        spnOddTo.setModel(new javax.swing.SpinnerNumberModel(50.0f, null, null, 0.1f));

        jLabel4.setText("Odd Range:");

        jLabel5.setText("Home Wins Range:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dtpDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnApply, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbReport, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                    .addComponent(spnWinFrom)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(spnWinTo, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addComponent(spnOddFrom, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(spnOddTo, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dtpDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCreate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnOddFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnOddTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnWinFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnWinTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnApply)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnApply, dtpDate, spnWinFrom, spnWinTo});

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblData.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblData.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblData);

        jTabbedPane2.addTab("All", jScrollPane1);

        tblPNPN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPNPN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPNPN.getTableHeader().setReorderingAllowed(false);
        jScrollPane12.setViewportView(tblPNPN);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel11Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel11Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("PNPN", jPanel11);

        tblPNPP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPNPP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPNPP.getTableHeader().setReorderingAllowed(false);
        jScrollPane13.setViewportView(tblPNPP);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel12Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel12Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("PNPP", jPanel12);

        tblPNNN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPNNN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPNNN.getTableHeader().setReorderingAllowed(false);
        jScrollPane14.setViewportView(tblPNNN);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("PNNN", jPanel13);

        tblPPPN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPPPN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPPPN.getTableHeader().setReorderingAllowed(false);
        jScrollPane15.setViewportView(tblPPPN);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel14Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel14Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("PPPN", jPanel14);

        tblNNPN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNNPN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNNPN.getTableHeader().setReorderingAllowed(false);
        jScrollPane16.setViewportView(tblNNPN);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel15Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel15Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("NNPN", jPanel15);

        tblNNNN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNNNN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNNNN.getTableHeader().setReorderingAllowed(false);
        jScrollPane17.setViewportView(tblNNNN);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel16Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel16Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("NNNN", jPanel16);

        tblPNNP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPNNP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPNNP.getTableHeader().setReorderingAllowed(false);
        jScrollPane18.setViewportView(tblPNNP);

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel17Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel17Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("PNNP", jPanel17);

        tblPPPP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPPPP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPPPP.getTableHeader().setReorderingAllowed(false);
        jScrollPane19.setViewportView(tblPPPP);

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel18Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel18Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("PPPP", jPanel18);

        tblNNPP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNNPP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNNPP.getTableHeader().setReorderingAllowed(false);
        jScrollPane20.setViewportView(tblNNPP);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel19Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel19Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("NNPP", jPanel19);

        tblPPNN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPPNN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPPNN.getTableHeader().setReorderingAllowed(false);
        jScrollPane21.setViewportView(tblPPNN);

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel20Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel20Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("PPNN", jPanel20);

        tblNPPN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNPPN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNPPN.getTableHeader().setReorderingAllowed(false);
        jScrollPane22.setViewportView(tblNPPN);

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel21Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel21Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("NPPN", jPanel21);

        tblNNNP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNNNP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNNNP.getTableHeader().setReorderingAllowed(false);
        jScrollPane23.setViewportView(tblNNNP);

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel22Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel22Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("NNNP", jPanel22);

        tblPPNP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblPPNP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPPNP.getTableHeader().setReorderingAllowed(false);
        jScrollPane24.setViewportView(tblPPNP);

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel23Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane24, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel23Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane24, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("PPNP", jPanel23);

        tblNPNN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNPNN.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNPNN.getTableHeader().setReorderingAllowed(false);
        jScrollPane25.setViewportView(tblNPNN);

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel24Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel24Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("NPNN", jPanel24);

        tblNPPP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNPPP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNPPP.getTableHeader().setReorderingAllowed(false);
        jScrollPane26.setViewportView(tblNPPP);

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel25Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane26, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel25Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane26, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("NPPP", jPanel25);

        tblNPNP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblNPNP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNPNP.getTableHeader().setReorderingAllowed(false);
        jScrollPane27.setViewportView(tblNPNP);

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1106, Short.MAX_VALUE)
            .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel26Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane27, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel26Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane27, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("NPNP", jPanel26);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        jTabbedPane1.addTab("Data", jPanel1);

        tblH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblH.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblH.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblH);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Rpt H", jPanel2);

        tblV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblV.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblV.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tblV);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Rpt V", jPanel3);

        tblX.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblX.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblX.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(tblX);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("X", jPanel4);

        tblOne.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblOne.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblOne.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(tblOne);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("1", jPanel7);

        tblXOne.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblXOne.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblXOne.getTableHeader().setReorderingAllowed(false);
        jScrollPane8.setViewportView(tblXOne);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("X1", jPanel6);

        tblOverall.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblOverall.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblOverall.getTableHeader().setReorderingAllowed(false);
        jScrollPane9.setViewportView(tblOverall);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Overall", jPanel8);

        tblHome.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblHome.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblHome.getTableHeader().setReorderingAllowed(false);
        jScrollPane10.setViewportView(tblHome);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Home", jPanel9);

        tblAway.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblAway.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblAway.getTableHeader().setReorderingAllowed(false);
        jScrollPane11.setViewportView(tblAway);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Away", jPanel10);

        jLabel6.setText("Hour:");

        spnHour.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));

        tblSummary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane28.setViewportView(tblSummary);

        jLabel7.setText("Days back:");

        spnDays.setModel(new javax.swing.SpinnerNumberModel(13, 1, null, 1));

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnHour, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnDays, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(776, Short.MAX_VALUE))
            .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel27Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane28, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(spnHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(spnDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(560, Short.MAX_VALUE))
            .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel27Layout.createSequentialGroup()
                    .addGap(41, 41, 41)
                    .addComponent(jScrollPane28, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jTabbedPane1.addTab("Summary", jPanel27);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnCreate;
    private javax.swing.JComboBox<String> cmbReport;
    private com.toedter.calendar.JDateChooser dtpDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane27;
    private javax.swing.JScrollPane jScrollPane28;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JList lstAssociation;
    private javax.swing.JList lstTournament;
    private javax.swing.JSpinner spnDays;
    private javax.swing.JSpinner spnHour;
    private javax.swing.JSpinner spnOddFrom;
    private javax.swing.JSpinner spnOddTo;
    private javax.swing.JSpinner spnWinFrom;
    private javax.swing.JSpinner spnWinTo;
    private javax.swing.JTable tblAway;
    private javax.swing.JTable tblData;
    private javax.swing.JTable tblH;
    private javax.swing.JTable tblHome;
    private javax.swing.JTable tblNNNN;
    private javax.swing.JTable tblNNNP;
    private javax.swing.JTable tblNNPN;
    private javax.swing.JTable tblNNPP;
    private javax.swing.JTable tblNPNN;
    private javax.swing.JTable tblNPNP;
    private javax.swing.JTable tblNPPN;
    private javax.swing.JTable tblNPPP;
    private javax.swing.JTable tblOne;
    private javax.swing.JTable tblOverall;
    private javax.swing.JTable tblPNNN;
    private javax.swing.JTable tblPNNP;
    private javax.swing.JTable tblPNPN;
    private javax.swing.JTable tblPNPP;
    private javax.swing.JTable tblPPNN;
    private javax.swing.JTable tblPPNP;
    private javax.swing.JTable tblPPPN;
    private javax.swing.JTable tblPPPP;
    private javax.swing.JTable tblSummary;
    private javax.swing.JTable tblV;
    private javax.swing.JTable tblX;
    private javax.swing.JTable tblXOne;
    // End of variables declaration//GEN-END:variables

    private UserRight right;
    private Item user;
    private List<TableData> list;
    private DBTableData dbRawData;
    
    private void myInitComponents(UserRight right, Item user) {
        this.user = user;
        this.right = right;
        dbRawData = new DBTableData();
        
        dtpDate.addPropertyChangeListener("date", (PropertyChangeEvent evt) -> {
            loadSummaryResults();
            loadAssociations();
        });
        
        lstAssociation.addListSelectionListener(new AssociationListSelection());
        lstTournament.addListSelectionListener(new TournamentListSelection());
        
        btnApply.setActionCommand("Apply");
        btnApply.addActionListener(this);

        btnCreate.setActionCommand("Create");
        btnCreate.addActionListener(this);
        
        initCmbReport();
        
        tblData.getSelectionModel().addListSelectionListener(new DataSelection(tblData));
        tblData.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblData.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblData.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblH.getSelectionModel().addListSelectionListener(new DataSelection(tblH));
        tblH.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblH.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblH.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblV.getSelectionModel().addListSelectionListener(new DataSelection(tblV));
        tblV.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblV.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblV.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblX.getSelectionModel().addListSelectionListener(new DataSelection(tblX));
        tblX.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblX.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblX.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblOne.getSelectionModel().addListSelectionListener(new DataSelection(tblOne));
        tblOne.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblOne.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblOne.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblXOne.getSelectionModel().addListSelectionListener(new DataSelection(tblXOne));
        tblXOne.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblXOne.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblXOne.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        tblNNNN.getSelectionModel().addListSelectionListener(new DataSelection(tblNNNN));
        tblNNNN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNNNN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNNNN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblNNNP.getSelectionModel().addListSelectionListener(new DataSelection(tblNNNP));
        tblNNNP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNNNP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNNNP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblNNPN.getSelectionModel().addListSelectionListener(new DataSelection(tblNNPN));
        tblNNPN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNNPN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNNPN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        tblNNPP.getSelectionModel().addListSelectionListener(new DataSelection(tblNNPP));
        tblNNPP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNNPP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNNPP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblNPNN.getSelectionModel().addListSelectionListener(new DataSelection(tblNPNN));
        tblNPNN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNPNN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNPNN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblNPNP.getSelectionModel().addListSelectionListener(new DataSelection(tblNPNP));
        tblNPNP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNPNP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNPNP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblNPPN.getSelectionModel().addListSelectionListener(new DataSelection(tblNPPN));
        tblNPPN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNPPN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNPPN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        tblNPPP.getSelectionModel().addListSelectionListener(new DataSelection(tblNPPP));
        tblNPPP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblNPPP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblNPPP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        tblPNNN.getSelectionModel().addListSelectionListener(new DataSelection(tblPNNN));
        tblPNNN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPNNN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPNNN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblPNNP.getSelectionModel().addListSelectionListener(new DataSelection(tblPNNP));
        tblPNNP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPNNP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPNNP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblPNPN.getSelectionModel().addListSelectionListener(new DataSelection(tblPNPN));
        tblPNPN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPNPN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPNPN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        tblPNPP.getSelectionModel().addListSelectionListener(new DataSelection(tblPNPP));
        tblPNPP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPNPP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPNPP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        tblPPNN.getSelectionModel().addListSelectionListener(new DataSelection(tblPPNN));
        tblPPNN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPPNN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPPNN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblPPNP.getSelectionModel().addListSelectionListener(new DataSelection(tblPPNP));
        tblPPNP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPPNP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPPNP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));
        
        tblPPPN.getSelectionModel().addListSelectionListener(new DataSelection(tblPPPN));
        tblPPPN.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPPPN.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPPPN.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        tblPPPP.getSelectionModel().addListSelectionListener(new DataSelection(tblPPPP));
        tblPPPP.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPPPP.setDefaultRenderer(Timestamp.class, new TimestampRenderer("MM/dd HH:mm"));
        tblPPPP.setDefaultRenderer(Float.class, new FloatRenderer("%.2f"));

        tblSummary.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        
        setInitDate();
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getStateChange() == ItemEvent.SELECTED){
            loadSummaryResults();
            loadAssociations();
        }
    }
    
    private long getReport(){
        long value = 0;
        int idx = cmbReport.getSelectedIndex();
        if ( idx != -1){
            Item item = (Item)cmbReport.getSelectedItem();
            value = item.getId();
        }
        return value;
    }
    
    private void loadSummaryResults(){
        Timestamp fromDate = getFromDate();
        int days = (Integer)spnDays.getValue();
        int hour = (Integer)spnHour.getValue();
        List<Summary> dataList = dbRawData.getSummaryResults(fromDate, hour, days);

        tblSummary.setModel(new SummaryTableModel(dataList));
        TableColumnAdjuster ta = new TableColumnAdjuster(tblSummary);
        ta.setOnlyAdjustLarger(false);
        ta.adjustColumns();
        TableModel model = tblSummary.getModel();
        if (model.getRowCount() > 0) {
            tblSummary.setRowSelectionInterval(0, 0);
        }
    }
    
    private void loadAssociations(){
        Timestamp fromDate = getFromDate();
        Timestamp toDate = getToDate();

        if (getReport() == 1){
            list = dbRawData.getListByGoals(fromDate, toDate);
        } else {
            list = dbRawData.getList(fromDate, toDate);
        }
        lstAssociation.setModel(new ItemListModel(getAssociationList(list)));
        if (lstAssociation.getModel().getSize() > 0){
            lstAssociation.setSelectedIndex(0);
        } else {
            loadTournaments();
        }
    }
    
    private void setInitDate(){
        Calendar c = Calendar.getInstance();
        c.set( Calendar.HOUR_OF_DAY,0);
        c.set( Calendar.MINUTE, 0);
        c.set( Calendar.SECOND, 0);
        c.set( Calendar.MILLISECOND, 0);
        dtpDate.setDate(c.getTime());
    }
    
    private void initCmbReport(){
        List<Item> itemList = new ArrayList<>();
        itemList.add(new Item(0, "Alls"));
        itemList.add(new Item(1, "Home Goals Projections"));
        cmbReport.setModel(new ItemComboBoxModel(itemList));
        cmbReport.setSelectedIndex(0);
        
        cmbReport.addItemListener(this);
    }
    
    private class AssociationListSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                if (lstAssociation.getSelectedIndex() != -1){                   
                    loadTournaments();
                }
            }
        }
    }

    private class TournamentListSelection implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()){
                if (lstTournament.getSelectedIndex() != -1){
                    loadData();
                }
            }
        }
    }

    private class DataSelection implements ListSelectionListener {
        JTable table;
        
        public DataSelection(JTable table){
            this.table = table;
        }
        
        @Override
        public void valueChanged(ListSelectionEvent lse) {
            if (!lse.getValueIsAdjusting()) {
                reloadStandings(table);
            }
        }
    }
    
    private List<Item> getAssociationList(List<TableData> list){
        List<Item> rslList = new ArrayList<>();
        rslList.add(new Item(0,"---"));
        TableData node;
        Iterator i = list.iterator();
        while (i.hasNext()){
            node = (TableData)i.next();
            if (rslList.size() == 1){
                rslList.add(node.getCt());
            } else {
                Item item;
                boolean found = false;
                Iterator li = rslList.iterator();
                while (li.hasNext()){
                    item = (Item)li.next();
                    if (item.getId() == node.getCt().getId()){
                        found = true;
                        break;
                    }
                }
                if (!found){
                    rslList.add(node.getCt());
                }
            }
        }
        Collections.sort(rslList, (Item t1, Item t2) -> t1.getName().compareToIgnoreCase(t2.getName()));
        return rslList;
    }
    
    private void loadTournaments(){
        if (lstAssociation.getSelectedIndex() != -1) {
            Item association = (Item)lstAssociation.getSelectedValue();
            lstTournament.setModel(new ItemListModel(getTournamentList(list, association.getId())));
            if (lstTournament.getModel().getSize() > 0){
                lstTournament.setSelectedIndex(0);
            }
        } else {
            // clear tournament list
            lstTournament.setModel(new ItemListModel(new ArrayList<>()));
            loadData();
        }
    }

    private List<Item> getTournamentList(List<TableData> list, long associationId){
        List<Item> rslList = new ArrayList<>();
        rslList.add(new Item(0,"---"));
        TableData node;
        Iterator i = list.iterator();
        while (i.hasNext()){
            node = (TableData)i.next();
            if (node.getCt().getId() == associationId || associationId == 0) {
                if (rslList.size() == 1){
                    rslList.add(node.getLg());
                } else {
                    Item item;
                    boolean found = false;
                    Iterator li = rslList.iterator();
                    while (li.hasNext()){
                        item = (Item)li.next();
                        if (item.getId() == node.getLg().getId()){
                            found = true;
                            break;
                        }
                    }
                    if (!found){
                        rslList.add(node.getLg());
                    }
                }
            }
        }
        Collections.sort(rslList, (Item t1, Item t2) -> t1.getName().compareToIgnoreCase(t2.getName()));
        return rslList;
    }
    
    private Timestamp getFromDate(){
        Date selectedDate = dtpDate.getDate();
        return new Timestamp(selectedDate.getTime());
    }
    
    private Timestamp getToDate(){
        long oneDay = (
                      (23*60*60)    // 23 Hours in seconds
                    + (59*60)       // 59 minutes in secods
                    + 59            // 59 seconds
                    ) * 1000;       // in milisecods    
        Date selectedDate = dtpDate.getDate();
        return new Timestamp(selectedDate.getTime() + oneDay);
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        if (ae.getActionCommand() != null){
            switch (ae.getActionCommand()){
                case "Create":
                    createData();
                    loadSummaryResults();
                    loadAssociations();
                    break;
                case "Apply":
                    loadSummaryResults();
                    loadAssociations();
                    break;
            }
        }
    }

    private void createData(){
        Timestamp fromDate = getFromDate();
        Timestamp toDate = getToDate();
        
        dbRawData.createRawData(fromDate, toDate);
        dbRawData.createGoalsProjection(fromDate, toDate);
    }
    
    private void loadData(){
        if (lstTournament.getSelectedIndex() != -1 ){
            Long tournamentId = ((Item)lstTournament.getSelectedValue()).getId();
            List<TableData> dataList = getFilteredList(list, tournamentId);

            // Filling table tblData
            loadTable(tblData, dataList);

            // Filling mask table clasification)
            loadTableMask(tblPNPN, dataList, "PNPN");
            loadTableMask(tblPNPP, dataList, "PNPP");
            loadTableMask(tblPNNN, dataList, "PNNN");
            loadTableMask(tblPPPN, dataList, "PPPN");
            loadTableMask(tblNNPN, dataList, "NNPN");
            loadTableMask(tblNNNN, dataList, "NNNN");
            loadTableMask(tblPNNP, dataList, "PNNP");
            loadTableMask(tblPPPP, dataList, "PPPP");
            loadTableMask(tblNNPP, dataList, "NNPP");
            loadTableMask(tblPPNN, dataList, "PPNN");
            loadTableMask(tblNPPN, dataList, "NPPN");
            loadTableMask(tblNNNP, dataList, "NNNP");
            loadTableMask(tblPPNP, dataList, "PPNP");
            loadTableMask(tblNPNN, dataList, "NPNN");
            loadTableMask(tblNPPP, dataList, "NPPP");
            loadTableMask(tblNPNP, dataList, "NPNP");

            // Create and sort a new list of TableData and the it is use to fill tblRptH table
            loadTableH(tblH, dataList);

            // Filling table tblRptV
            loadTableV(tblV, dataList);

            // Filling table tblX (LH IN {DW, WD} AND LV IN {WD, WW})
            loadTableX(tblX, dataList);

            // Filling table tbl1 (LH IN {LL, LW, WL, WW} AND LV IN {LL, LW, WL})
            loadTableOne(tblOne, dataList);

            // Filling table tblX1 = tblX + tbl1
            loadTableXOne(tblXOne, dataList);
        }
    }
    
    private List<TableData> getFilteredList(List<TableData> list, Long tournamentId){
        List<TableData> rslList = new ArrayList<>();
        TableData node;
        Iterator i = list.iterator();
        while (i.hasNext()){
            node = (TableData)i.next();
            // float  diff = node.getPwi() - node.getPlt();
            float  diff = node.getPwi();
            if (diff >= (Float)spnWinFrom.getValue() &&
                diff <= (Float)spnWinTo.getValue() &&
                node.getO1() >= (Float)spnOddFrom.getValue() &&
                node.getO1() <= (Float)spnOddTo.getValue() && 
                (node.getLg().getId() == tournamentId || tournamentId == 0)){
                rslList.add(node);
            }
        }
        // Collections.sort(rslList, (TableData t1, TableData t2) -> (t1.getPwi() - (t1.getPlt() + t1.getPdr())) > (t2.getPwi() - (t2.getPlt() + t2.getPdr())) ? -1 : 1);
        return rslList;
    }
    
    private void loadTable(JTable table, List<TableData> list){
        table.setModel(new TableDataTableModel(list));
        TableColumnAdjuster ta = new TableColumnAdjuster(table);
        ta.setOnlyAdjustLarger(false);
        ta.adjustColumns();
        TableModel model = table.getModel();
        if (model.getRowCount() > 0) {
            table.setRowSelectionInterval(0, 0);
        }
    }
    
    private void loadTableMask(JTable table, List<TableData> list, String mask){
        List<TableData> filteredList = searchByMask(list, mask);
        loadTable(table, filteredList);
    }
    
    private List<TableData> searchByMask(List<TableData> list, String mask){
        List<TableData> rslList = new ArrayList<>();
        TableData node;
        Iterator i = list.iterator();
        while (i.hasNext()){
            node = (TableData)i.next();
            if (node.getMask().equals(mask)) {
                rslList.add(node);
            }
        }
        return rslList;
    }

    private void loadTableH(JTable table, List<TableData> list){
        List<TableData> rptList = new ArrayList<>();
        rptList.addAll(list);
        Collections.sort(rptList, (TableData t1, TableData t2) -> t1.getLh().compareToIgnoreCase(t2.getLh()));
        loadTable(table, rptList);
    }
    
    private void loadTableV(JTable table, List<TableData> list){
        List<TableData> rptList = new ArrayList<>();
        rptList.addAll(list);
        Collections.sort(rptList, (TableData t1, TableData t2) -> t1.getLv().compareToIgnoreCase(t2.getLv()));
        loadTable(table, rptList);
    }

    private void loadTableX(JTable table, List<TableData> list){
        List<TableData> rptList = getXList(list);
        Collections.sort(rptList, (TableData t1, TableData t2) 
                -> ( t1.getDpt() > t2.getDpt() ? -1 : (t1.getDpt() < t2.getDpt() ? 1
                  : (t1.getDft() > t2.getDft() ? -1 : (t1.getDft() < t2.getDft() ? 1 
                  : (t1.getDt().compareTo(t2.getDt()) != 0 ? t1.getDt().compareTo(t2.getDt()) 
                  : (t1.getHm().getName().compareToIgnoreCase(t2.getHm().getName()))))))));
        loadTable(table, rptList);
    }

    private List<TableData> getXList(List<TableData> list){
        List<TableData> rslList = new ArrayList<>();
        TableData node;
        Iterator i = list.iterator();
        while (i.hasNext()){
            node = (TableData)i.next();
            if ((node.getLh().equalsIgnoreCase("DW") ||
                node.getLh().equalsIgnoreCase("WD")) &&
                node.getPwi() >= (Float)spnWinFrom.getValue() &&
                node.getPwi() <= (Float)spnWinTo.getValue() ){
                rslList.add(node);
            }
            if ((node.getLv().equalsIgnoreCase("DW") ||
                node.getLv().equalsIgnoreCase("WW")) &&
                node.getPwi() >= (Float)spnWinFrom.getValue() &&
                node.getPwi() <= (Float)spnWinTo.getValue() ){
                rslList.add(node);
            }
        }
        return rslList;
    }
    
    private void loadTableOne(JTable table, List<TableData> list){
        List<TableData> rptList = getOneList(list);
        Collections.sort(rptList, (TableData t1, TableData t2) 
                -> ( t1.getDpt() > t2.getDpt() ? -1 : (t1.getDpt() < t2.getDpt() ? 1 
                  : (t1.getDft() > t2.getDft() ? -1 : (t1.getDft() < t2.getDft() ? 1 
                  : (t1.getDt().compareTo(t2.getDt()) != 0 ? t1.getDt().compareTo(t2.getDt()) 
                  : (t1.getHm().getName().compareToIgnoreCase(t2.getHm().getName()))))))));
        loadTable(table, rptList);
    }
    
    private List<TableData> getOneList(List<TableData> list){
        List<TableData> rslList = new ArrayList<>();
        TableData node;
        Iterator i = list.iterator();
        while (i.hasNext()){
            node = (TableData)i.next();
            if ((node.getLh().equalsIgnoreCase("LL") ||
                node.getLh().equalsIgnoreCase("LW") ||
                node.getLh().equalsIgnoreCase("WL") ||
                node.getLh().equalsIgnoreCase("WW") ||
                node.getLv().equalsIgnoreCase("LL") ||
                node.getLv().equalsIgnoreCase("LW") ||
                node.getLv().equalsIgnoreCase("WL")) &&
                node.getPwi() >= (Float)spnWinFrom.getValue() &&
                node.getPwi() <= (Float)spnWinTo.getValue() ){
                rslList.add(node);
            }
        }
        return rslList;
    }

    private void loadTableXOne(JTable table, List<TableData> list){
        List<TableData> rptList = getOneList(list);
        List<TableData> rptXList = getXList(list);
        rptList.addAll(rptXList);
        Collections.sort(rptList, (TableData t1, TableData t2) 
                -> ( t1.getDpt() > t2.getDpt() ? -1 : (t1.getDpt() < t2.getDpt() ? 1 
                  : (t1.getDft() > t2.getDft() ? -1 : (t1.getDft() < t2.getDft() ? 1 
                  : (t1.getDt().compareTo(t2.getDt()) != 0 ? t1.getDt().compareTo(t2.getDt()) 
                  : (t1.getHm().getName().compareToIgnoreCase(t2.getHm().getName()))))))));
        loadTable(table, rptList);
    }
    

    private void reloadStandings(JTable table){
        int rowSelected = table.getSelectedRow();
        if (rowSelected != -1){
            Item association = (Item)table.getValueAt(rowSelected, 1);
            Item tournament = (Item)table.getValueAt(rowSelected, 2);
            Item season = (Item)table.getValueAt(rowSelected, 40);
            Item phase = (Item)table.getValueAt(rowSelected, 41);
            Item home = (Item)table.getValueAt(rowSelected, 4);
            Item visitor = (Item)table.getValueAt(rowSelected, 5);
            loadStanding(season.getId(), phase.getId());
            setStandingSelection(home, visitor);
            setSummarySelection(association, tournament);
        }
    }
   
    private void loadStanding(long seasonId, long phaseId){
        DBStat dbStat = new DBStat();
        TableModel tableModel;
        Timestamp date;
        date = new Timestamp(dtpDate.getDate().getTime());
        
        // Load overall standing
        tblOverall.setModel(new StandingTableModel(dbStat.getOverallLiveStanding(seasonId, phaseId, date)));
        TableColumnAdjuster taOverall = new TableColumnAdjuster(tblOverall);
        taOverall.setOnlyAdjustLarger(false);
        taOverall.adjustColumns();
        tableModel = tblOverall.getModel();
        if (tableModel.getRowCount() > 0){
            tblOverall.setRowSelectionInterval(0, 0);
        }
        
        // Load home standing
        tblHome.setModel(new StandingTableModel(dbStat.getHomeLiveStanding(seasonId, phaseId, date)));
        TableColumnAdjuster taHome = new TableColumnAdjuster(tblHome);
        taHome.setOnlyAdjustLarger(false);
        taHome.adjustColumns();
        tableModel = tblHome.getModel();
        if (tableModel.getRowCount() > 0){
            tblHome.setRowSelectionInterval(0, 0);
        }
        
        // Load away standing
        tblAway.setModel(new StandingTableModel(dbStat.getAwayLiveStanding(seasonId, phaseId, date)));
        TableColumnAdjuster taAway = new TableColumnAdjuster(tblAway);
        taAway.setOnlyAdjustLarger(false);
        taAway.adjustColumns();
        tableModel = tblAway.getModel();
        if (tableModel.getRowCount() > 0){
            tblAway.setRowSelectionInterval(0, 0);
        }
    }
    
    private void setStandingSelection(Item home, Item visitor){
        boolean foundHome = false;
        boolean foundVisitor = false;
        Item team;
        
        int row = 0;
        tblOverall.clearSelection();
        while (row < tblOverall.getRowCount() && !(foundHome && foundVisitor)){
            team = (Item)tblOverall.getValueAt(row, 1);
            if (team.getName().equals(home.getName())){
                tblOverall.addRowSelectionInterval(row, row);
                foundHome = true;
            }
            if (team.getName().equals(visitor.getName())){
                tblOverall.addRowSelectionInterval(row, row);
                foundVisitor = true;
            }
            row++;
        }
        
        row = 0;
        foundHome = false;
        while (row < tblHome.getRowCount() && !foundHome ){
            team = (Item)tblHome.getValueAt(row, 1);
            if (team.getName().equals(home.getName())){
                tblHome.setRowSelectionInterval(row, row);
                foundHome = true;
            }
           row++;
        }
        
        row = 0;
        foundVisitor = false;
        while (row < tblAway.getRowCount() && !foundVisitor ){
            team = (Item)tblAway.getValueAt(row, 1);
            if (team.getName().equals(visitor.getName())){
                tblAway.setRowSelectionInterval(row, row);
                foundVisitor = true;
            }
            row++;
        }
    }
    
    private void setSummarySelection(Item association, Item tournament){
        boolean found = false;
        Item tItem, aItem;
        int row = 0;
        
        while (row < tblSummary.getRowCount() && !found ){
            aItem = (Item)tblSummary.getValueAt(row, 0);
            tItem = (Item)tblSummary.getValueAt(row, 1);
            if (tItem.getName().equals(tournament.getName()) && aItem.getName().equals(association.getName())){
                tblSummary.setRowSelectionInterval(row, row);
                found = true;
            }
            row++;
        }
    }
}